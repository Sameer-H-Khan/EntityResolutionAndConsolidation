program	transformation	lhs	rhs	text
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)"	Computers as Theatre->Computers As Theatre	Computers as Theatre	Computers As Theatre	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)] [Transformation: Computers as Theatre transforms to Computers As Theatre]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))))))"	Computers As Theatre->Computers as Theatre	Computers As Theatre	Computers as Theatre	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))))))] [Transformation: Computers As Theatre transforms to Computers as Theatre]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Brenda Laurel->""Laurel, Brenda"""	Brenda Laurel	"""Laurel, Brenda"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Brenda Laurel transforms to ""Laurel, Brenda""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Laurel, Brenda""->Brenda Laurel"	"""Laurel, Brenda"""	Brenda Laurel	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Laurel, Brenda"" transforms to Brenda Laurel]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Alphanumeric""), -1))), Concat(ConstStr("" : ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" and Correcting System Problems (HP ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""echnologies)""))))))))))"	Tru64 Unix Troubleshooting Diagnosing &amp;->Tru64 UNIX Troubleshooting : Diagnosing and Correcting System Problems (HP Technologies)	Tru64 Unix Troubleshooting Diagnosing &amp;	Tru64 UNIX Troubleshooting : Diagnosing and Correcting System Problems (HP Technologies)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Alphanumeric""), -1))), Concat(ConstStr("" : ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" and Correcting System Problems (HP ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""echnologies)""))))))))))] [Transformation: Tru64 Unix Troubleshooting Diagnosing &amp; transforms to Tru64 UNIX Troubleshooting : Diagnosing and Correcting System Problems (HP Technologies)]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1))), ConstStr("" &amp;""))))"	Tru64 UNIX Troubleshooting : Diagnosing and Correcting System Problems (HP Technologies)->Tru64 Unix Troubleshooting Diagnosing &amp;	Tru64 UNIX Troubleshooting : Diagnosing and Correcting System Problems (HP Technologies)	Tru64 Unix Troubleshooting Diagnosing &amp;	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1))), ConstStr("" &amp;""))))] [Transformation: Tru64 UNIX Troubleshooting : Diagnosing and Correcting System Problems (HP Technologies) transforms to Tru64 Unix Troubleshooting Diagnosing &amp;]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("", Steven Hancock\"""")))))"	"""Moore, Martin L""->""Martin Moore, Steven Hancock"""	"""Moore, Martin L"""	"""Martin Moore, Steven Hancock"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("", Steven Hancock\"""")))))] [Transformation: ""Moore, Martin L"" transforms to ""Martin Moore, Steven Hancock""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" L\"""")))))"	"""Martin Moore, Steven Hancock""->""Moore, Martin L"""	"""Martin Moore, Steven Hancock"""	"""Moore, Martin L"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" L\"""")))))] [Transformation: ""Martin Moore, Steven Hancock"" transforms to ""Moore, Martin L""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (The Addison-Wesley Signature Series)""))"	Refactoring Databases: Evolutionary Database Design->Refactoring Databases: Evolutionary Database Design (The Addison-Wesley Signature Series)	Refactoring Databases: Evolutionary Database Design	Refactoring Databases: Evolutionary Database Design (The Addison-Wesley Signature Series)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (The Addison-Wesley Signature Series)""))] [Transformation: Refactoring Databases: Evolutionary Database Design transforms to Refactoring Databases: Evolutionary Database Design (The Addison-Wesley Signature Series)]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Refactoring Databases: Evolutionary Database Design (The Addison-Wesley Signature Series)->Refactoring Databases: Evolutionary Database Design	Refactoring Databases: Evolutionary Database Design (The Addison-Wesley Signature Series)	Refactoring Databases: Evolutionary Database Design	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Refactoring Databases: Evolutionary Database Design (The Addison-Wesley Signature Series) transforms to Refactoring Databases: Evolutionary Database Design]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" W. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" J. ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))))))"	"""Ambler, Scott; Sadalage, Pramodkumar""->Scott W. Ambler; Pramodkumar J. Sadalage"	"""Ambler, Scott; Sadalage, Pramodkumar"""	Scott W. Ambler; Pramodkumar J. Sadalage	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" W. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" J. ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))))))] [Transformation: ""Ambler, Scott; Sadalage, Pramodkumar"" transforms to Scott W. Ambler; Pramodkumar J. Sadalage]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))))))"	"Scott W. Ambler; Pramodkumar J. Sadalage->""Ambler, Scott; Sadalage, Pramodkumar"""	Scott W. Ambler; Pramodkumar J. Sadalage	"""Ambler, Scott; Sadalage, Pramodkumar"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))))))] [Transformation: Scott W. Ambler; Pramodkumar J. Sadalage transforms to ""Ambler, Scott; Sadalage, Pramodkumar""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr(""\""""))))))"	"The ACE Programmer's Guide: Practical Design Patterns for Network and Systems Programming->""ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming"""	The ACE Programmer's Guide: Practical Design Patterns for Network and Systems Programming	"""ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr(""\""""))))))] [Transformation: The ACE Programmer's Guide: Practical Design Patterns for Network and Systems Programming transforms to ""ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))))))"	"""ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming""->The ACE Programmer's Guide: Practical Design Patterns for Network and Systems Programming"	"""ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming"""	The ACE Programmer's Guide: Practical Design Patterns for Network and Systems Programming	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))))))] [Transformation: ""ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming"" transforms to The ACE Programmer's Guide: Practical Design Patterns for Network and Systems Programming]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("".""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""ALL CAPSâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\""""))))))))))))"	"Stephen D. Huston; James CE Johnson; Umar Syyid->""Huston, Stephen D.Johnson, James CESyyid, Umar"""	Stephen D. Huston; James CE Johnson; Umar Syyid	"""Huston, Stephen D.Johnson, James CESyyid, Umar"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("".""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""ALL CAPSâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\""""))))))))))))] [Transformation: Stephen D. Huston; James CE Johnson; Umar Syyid transforms to ""Huston, Stephen D.Johnson, James CESyyid, Umar""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Dotâ—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))))))))))"	"""Huston, Stephen D.Johnson, James CESyyid, Umar""->Stephen D. Huston; James CE Johnson; Umar Syyid"	"""Huston, Stephen D.Johnson, James CESyyid, Umar"""	Stephen D. Huston; James CE Johnson; Umar Syyid	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Dotâ—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))))))))))] [Transformation: ""Huston, Stephen D.Johnson, James CESyyid, Umar"" transforms to Stephen D. Huston; James CE Johnson; Umar Syyid]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), ConstStr("" (Softcover) (CD-ROM)""))"	"""Kernel Projects for Linux, by Nutt""->Kernel Projects for Linux (Softcover) (CD-ROM)"	"""Kernel Projects for Linux, by Nutt"""	Kernel Projects for Linux (Softcover) (CD-ROM)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), ConstStr("" (Softcover) (CD-ROM)""))] [Transformation: ""Kernel Projects for Linux, by Nutt"" transforms to Kernel Projects for Linux (Softcover) (CD-ROM)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), ConstStr("", by Nutt\"""")))"	"Kernel Projects for Linux (Softcover) (CD-ROM)->""Kernel Projects for Linux, by Nutt"""	Kernel Projects for Linux (Softcover) (CD-ROM)	"""Kernel Projects for Linux, by Nutt"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), ConstStr("", by Nutt\"""")))] [Transformation: Kernel Projects for Linux (Softcover) (CD-ROM) transforms to ""Kernel Projects for Linux, by Nutt""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Nutt, Gary J""->Gary Nutt"	"""Nutt, Gary J"""	Gary Nutt	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Nutt, Gary J"" transforms to Gary Nutt]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" J\"""")))))"	"Gary Nutt->""Nutt, Gary J"""	Gary Nutt	"""Nutt, Gary J"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" J\"""")))))] [Transformation: Gary Nutt transforms to ""Nutt, Gary J""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 4)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))))"	Practical Model-Based Testing: A Tools Approach->PRAC MODEL-BASED TESTING	Practical Model-Based Testing: A Tools Approach	PRAC MODEL-BASED TESTING	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 4)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))))] [Transformation: Practical Model-Based Testing: A Tools Approach transforms to PRAC MODEL-BASED TESTING]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Upper Case"", ""Îµ""), 1))), ConstStr(""ractical Model-Based Testing: A Tools Approach""))"	PRAC MODEL-BASED TESTING->Practical Model-Based Testing: A Tools Approach	PRAC MODEL-BASED TESTING	Practical Model-Based Testing: A Tools Approach	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Upper Case"", ""Îµ""), 1))), ConstStr(""ractical Model-Based Testing: A Tools Approach""))] [Transformation: PRAC MODEL-BASED TESTING transforms to Practical Model-Based Testing: A Tools Approach]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))"	"""Utting, Mark Legeard, Bruno""->""Utting, Mark"""	"""Utting, Mark Legeard, Bruno"""	"""Utting, Mark"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))] [Transformation: ""Utting, Mark Legeard, Bruno"" transforms to ""Utting, Mark""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr("" Legeard, Bruno\"""")))"	"""Utting, Mark""->""Utting, Mark Legeard, Bruno"""	"""Utting, Mark"""	"""Utting, Mark Legeard, Bruno"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr("" Legeard, Bruno\"""")))] [Transformation: ""Utting, Mark"" transforms to ""Utting, Mark Legeard, Bruno""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))), ConstStr("".""))"	"""Open Source Web Development with LAMP: Using Linux, Apache, MySQL, Perl, and PHP""->Open Source Web Development With Lamp."	"""Open Source Web Development with LAMP: Using Linux, Apache, MySQL, Perl, and PHP"""	Open Source Web Development With Lamp.	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))), ConstStr("".""))] [Transformation: ""Open Source Web Development with LAMP: Using Linux, Apache, MySQL, Perl, and PHP"" transforms to Open Source Web Development With Lamp.]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), ConstStr("" with LAMP: Using Linux, Apache, MySQL, Perl, and PHP\"""")))"	"Open Source Web Development With Lamp.->""Open Source Web Development with LAMP: Using Linux, Apache, MySQL, Perl, and PHP"""	Open Source Web Development With Lamp.	"""Open Source Web Development with LAMP: Using Linux, Apache, MySQL, Perl, and PHP"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), ConstStr("" with LAMP: Using Linux, Apache, MySQL, Perl, and PHP\"""")))] [Transformation: Open Source Web Development With Lamp. transforms to ""Open Source Web Development with LAMP: Using Linux, Apache, MySQL, Perl, and PHP""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""/ ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr("".\"""")))))"	"""Lee, James B.; Ware, Brent""->""Lee, James/ Ware, Brent."""	"""Lee, James B.; Ware, Brent"""	"""Lee, James/ Ware, Brent."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""/ ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr("".\"""")))))] [Transformation: ""Lee, James B.; Ware, Brent"" transforms to ""Lee, James/ Ware, Brent.""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slashâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr(""\"""")))))))"	"""Lee, James/ Ware, Brent.""->""Lee, James B.; Ware, Brent"""	"""Lee, James/ Ware, Brent."""	"""Lee, James B.; Ware, Brent"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slashâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr(""\"""")))))))] [Transformation: ""Lee, James/ Ware, Brent."" transforms to ""Lee, James B.; Ware, Brent""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -8)))))))))))"	"""C++ For C Programmers, Third Edition (3rd Edition)""->C++ for C Programmers 3ed"	"""C++ For C Programmers, Third Edition (3rd Edition)"""	C++ for C Programmers 3ed	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -8)))))))))))] [Transformation: ""C++ For C Programmers, Third Edition (3rd Edition)"" transforms to C++ for C Programmers 3ed]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1)))), Concat(ConstStr("", Third Edition (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), ConstStr(""rd Edition)\"""")))))"	"C++ for C Programmers 3ed->""C++ For C Programmers, Third Edition (3rd Edition)"""	C++ for C Programmers 3ed	"""C++ For C Programmers, Third Edition (3rd Edition)"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1)))), Concat(ConstStr("", Third Edition (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), ConstStr(""rd Edition)\"""")))))] [Transformation: C++ for C Programmers 3ed transforms to ""C++ For C Programmers, Third Edition (3rd Edition)""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))))))"	"""Essential .NET, Volume I: The Common Language Runtime""->EssentialNET. Volume I: The Common Language Runtime"	"""Essential .NET, Volume I: The Common Language Runtime"""	EssentialNET. Volume I: The Common Language Runtime	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))))))] [Transformation: ""Essential .NET, Volume I: The Common Language Runtime"" transforms to EssentialNET. Volume I: The Common Language Runtime]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" .""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Lowercase word"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr(""\"""")))))))"	"EssentialNET. Volume I: The Common Language Runtime->""Essential .NET, Volume I: The Common Language Runtime"""	EssentialNET. Volume I: The Common Language Runtime	"""Essential .NET, Volume I: The Common Language Runtime"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" .""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Lowercase word"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr(""\"""")))))))] [Transformation: EssentialNET. Volume I: The Common Language Runtime transforms to ""Essential .NET, Volume I: The Common Language Runtime""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))"	Don Box->Box	Don Box	Box	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))] [Transformation: Don Box transforms to Box]"
"Concat(ConstStr(""Don ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x)"	Box->Don Box	Box	Don Box	"[Program: Concat(ConstStr(""Don ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x)] [Transformation: Box transforms to Don Box]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1))), Concat(ConstStr(""ames ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))))))"	Micro Java(TM) Game Development->Micro Java Games Development	Micro Java(TM) Game Development	Micro Java Games Development	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1))), Concat(ConstStr(""ames ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))))))] [Transformation: Micro Java(TM) Game Development transforms to Micro Java Games Development]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RelativePosition(x, -2), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("") ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RelativePosition(x, -14))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))))))))))"	Micro Java Games Development->Micro Java(TM) Game Development	Micro Java Games Development	Micro Java(TM) Game Development	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RelativePosition(x, -2), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("") ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RelativePosition(x, -14))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))))))))))] [Transformation: Micro Java Games Development transforms to Micro Java(TM) Game Development]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""erhosek, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))))))"	"David Fox;Roman Verhovsek->""Fox, David; Verhovsek, Roman; Verhosek, Roman"""	David Fox;Roman Verhovsek	"""Fox, David; Verhovsek, Roman; Verhosek, Roman"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""erhosek, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))))))] [Transformation: David Fox;Roman Verhovsek transforms to ""Fox, David; Verhovsek, Roman; Verhosek, Roman""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("";""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))))))))"	"""Fox, David; Verhovsek, Roman; Verhosek, Roman""->David Fox;Roman Verhovsek"	"""Fox, David; Verhovsek, Roman; Verhosek, Roman"""	David Fox;Roman Verhovsek	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("";""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))))))))] [Transformation: ""Fox, David; Verhovsek, Roman; Verhosek, Roman"" transforms to David Fox;Roman Verhovsek]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	SQL Queries for Mere Mortals: A Hands-On Guide to Data Manipulation in SQL->SQL Queries for Mere Mortals A Hands-On Guide to Data Manipulation in SQL	SQL Queries for Mere Mortals: A Hands-On Guide to Data Manipulation in SQL	SQL Queries for Mere Mortals A Hands-On Guide to Data Manipulation in SQL	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: SQL Queries for Mere Mortals: A Hands-On Guide to Data Manipulation in SQL transforms to SQL Queries for Mere Mortals A Hands-On Guide to Data Manipulation in SQL]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦ALL CAPSâ—¦WhiteSpace""), 1))), Concat(ConstStr("": ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPSâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	SQL Queries for Mere Mortals A Hands-On Guide to Data Manipulation in SQL->SQL Queries for Mere Mortals: A Hands-On Guide to Data Manipulation in SQL	SQL Queries for Mere Mortals A Hands-On Guide to Data Manipulation in SQL	SQL Queries for Mere Mortals: A Hands-On Guide to Data Manipulation in SQL	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦ALL CAPSâ—¦WhiteSpace""), 1))), Concat(ConstStr("": ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPSâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: SQL Queries for Mere Mortals A Hands-On Guide to Data Manipulation in SQL transforms to SQL Queries for Mere Mortals: A Hands-On Guide to Data Manipulation in SQL]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))"	"""Hernandez, Michael J.; Viescas, John; Viescas, John L.""->John Viescas"	"""Hernandez, Michael J.; Viescas, John; Viescas, John L."""	John Viescas	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))] [Transformation: ""Hernandez, Michael J.; Viescas, John; Viescas, John L."" transforms to John Viescas]"
"Concat(ConstStr(""\""Hernandez, Michael ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" L.\"""")))))))))))"	"John Viescas->""Hernandez, Michael J.; Viescas, John; Viescas, John L."""	John Viescas	"""Hernandez, Michael J.; Viescas, John; Viescas, John L."""	"[Program: Concat(ConstStr(""\""Hernandez, Michael ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" L.\"""")))))))))))] [Transformation: John Viescas transforms to ""Hernandez, Michael J.; Viescas, John; Viescas, John L.""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("": A User's Guide""))"	Linux System Administration->Linux System Administration: A User's Guide	Linux System Administration	Linux System Administration: A User's Guide	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("": A User's Guide""))] [Transformation: Linux System Administration transforms to Linux System Administration: A User's Guide]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))"	Linux System Administration: A User's Guide->Linux System Administration	Linux System Administration: A User's Guide	Linux System Administration	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))] [Transformation: Linux System Administration: A User's Guide transforms to Linux System Administration]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Marcel\"""")))"	"Gagne->""Gagne, Marcel"""	Gagne	"""Gagne, Marcel"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Marcel\"""")))] [Transformation: Gagne transforms to ""Gagne, Marcel""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))"	"""Gagne, Marcel""->Gagne"	"""Gagne, Marcel"""	Gagne	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))] [Transformation: ""Gagne, Marcel"" transforms to Gagne]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("" '""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))))))"	"""Java(TM) Programming Language, The (4th Edition) (The Java Series)""->The 'java Programming Language"	"""Java(TM) Programming Language, The (4th Edition) (The Java Series)"""	The 'java Programming Language	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("" '""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))))))] [Transformation: ""Java(TM) Programming Language, The (4th Edition) (The Java Series)"" transforms to The 'java Programming Language]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Single Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Single Quoteâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""M) ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" (4th Edition) (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Single Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Single Quoteâ—¦Alphanumeric"", ""Îµ""), 1)))), ConstStr("" Series)\"""")))))))))))))"	"The 'java Programming Language->""Java(TM) Programming Language, The (4th Edition) (The Java Series)"""	The 'java Programming Language	"""Java(TM) Programming Language, The (4th Edition) (The Java Series)"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Single Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Single Quoteâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""M) ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" (4th Edition) (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Single Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Single Quoteâ—¦Alphanumeric"", ""Îµ""), 1)))), ConstStr("" Series)\"""")))))))))))))] [Transformation: The 'java Programming Language transforms to ""Java(TM) Programming Language, The (4th Edition) (The Java Series)""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -2), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 2))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))))))"	"Ken Arnold James Gosling David Holmes->""Arnold, Ken; Gosling, James; Holmes, David"""	Ken Arnold James Gosling David Holmes	"""Arnold, Ken; Gosling, James; Holmes, David"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -2), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 2))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))))))] [Transformation: Ken Arnold James Gosling David Holmes transforms to ""Arnold, Ken; Gosling, James; Holmes, David""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Semicolon""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))))))))))"	"""Arnold, Ken; Gosling, James; Holmes, David""->Ken Arnold James Gosling David Holmes"	"""Arnold, Ken; Gosling, James; Holmes, David"""	Ken Arnold James Gosling David Holmes	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Semicolon""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))))))))))] [Transformation: ""Arnold, Ken; Gosling, James; Holmes, David"" transforms to Ken Arnold James Gosling David Holmes]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphenâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("", Vol. 4\"""")))"	"Neural Network Systems Techniques and Applications - Industrial and Manufacturing Systems->""Industrial and Manufacturing Systems, Vol. 4"""	Neural Network Systems Techniques and Applications - Industrial and Manufacturing Systems	"""Industrial and Manufacturing Systems, Vol. 4"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphenâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("", Vol. 4\"""")))] [Transformation: Neural Network Systems Techniques and Applications - Industrial and Manufacturing Systems transforms to ""Industrial and Manufacturing Systems, Vol. 4""]"
"Concat(ConstStr(""Neural Network ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" Techniques ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" Applications - ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))))))))"	"""Industrial and Manufacturing Systems, Vol. 4""->Neural Network Systems Techniques and Applications - Industrial and Manufacturing Systems"	"""Industrial and Manufacturing Systems, Vol. 4"""	Neural Network Systems Techniques and Applications - Industrial and Manufacturing Systems	"[Program: Concat(ConstStr(""Neural Network ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" Techniques ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" Applications - ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))))))))] [Transformation: ""Industrial and Manufacturing Systems, Vol. 4"" transforms to Neural Network Systems Techniques and Applications - Industrial and Manufacturing Systems]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))"	"""Leondes, Cornelius T.,""->""Leondes, Cornelius T."""	"""Leondes, Cornelius T.,"""	"""Leondes, Cornelius T."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))] [Transformation: ""Leondes, Cornelius T.,"" transforms to ""Leondes, Cornelius T.""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".,\"""")))"	"""Leondes, Cornelius T.""->""Leondes, Cornelius T.,"""	"""Leondes, Cornelius T."""	"""Leondes, Cornelius T.,"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".,\"""")))] [Transformation: ""Leondes, Cornelius T."" transforms to ""Leondes, Cornelius T.,""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("" : A Structured Approach, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Left Parenthesis"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Right Parenthesis""), 1)))), ConstStr("", pb, 1990\"""")))))"	"Business Programming Logic (4th Edition)->""Business Programming Logic : A Structured Approach, 4th edition, pb, 1990"""	Business Programming Logic (4th Edition)	"""Business Programming Logic : A Structured Approach, 4th edition, pb, 1990"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("" : A Structured Approach, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Left Parenthesis"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Right Parenthesis""), 1)))), ConstStr("", pb, 1990\"""")))))] [Transformation: Business Programming Logic (4th Edition) transforms to ""Business Programming Logic : A Structured Approach, 4th edition, pb, 1990""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Numberâ—¦Words/dots/hyphens""), 1), RegexPositionRelative(x, RegexPair(""Numberâ—¦Words/dots/hyphens"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1)))), ConstStr("")""))))))"	"""Business Programming Logic : A Structured Approach, 4th edition, pb, 1990""->Business Programming Logic (4th Edition)"	"""Business Programming Logic : A Structured Approach, 4th edition, pb, 1990"""	Business Programming Logic (4th Edition)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Numberâ—¦Words/dots/hyphens""), 1), RegexPositionRelative(x, RegexPair(""Numberâ—¦Words/dots/hyphens"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1)))), ConstStr("")""))))))] [Transformation: ""Business Programming Logic : A Structured Approach, 4th edition, pb, 1990"" transforms to Business Programming Logic (4th Edition)]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr(""/Longhurst""))"	Jay Singelmann->Singelmann/Longhurst	Jay Singelmann	Singelmann/Longhurst	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr(""/Longhurst""))] [Transformation: Jay Singelmann transforms to Singelmann/Longhurst]"
"Concat(ConstStr(""Jay ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))"	Singelmann/Longhurst->Jay Singelmann	Singelmann/Longhurst	Jay Singelmann	"[Program: Concat(ConstStr(""Jay ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))] [Transformation: Singelmann/Longhurst transforms to Jay Singelmann]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))"	Database Administration: The Complete Guide to Practices and Procedures->Database Administration	Database Administration: The Complete Guide to Practices and Procedures	Database Administration	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))] [Transformation: Database Administration: The Complete Guide to Practices and Procedures transforms to Database Administration]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("": The Complete Guide to Practices and Procedures""))"	Database Administration->Database Administration: The Complete Guide to Practices and Procedures	Database Administration	Database Administration: The Complete Guide to Practices and Procedures	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("": The Complete Guide to Practices and Procedures""))] [Transformation: Database Administration transforms to Database Administration: The Complete Guide to Practices and Procedures]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Mullins, Craig S.""->Craig S. Mullins"	"""Mullins, Craig S."""	Craig S. Mullins	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Mullins, Craig S."" transforms to Craig S. Mullins]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))"	"Craig S. Mullins->""Mullins, Craig S."""	Craig S. Mullins	"""Mullins, Craig S."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))] [Transformation: Craig S. Mullins transforms to ""Mullins, Craig S.""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))"	Real 802.11 Security: Wi-Fi Protected Access and 802.11i->REAL 802.11 SECURITY	Real 802.11 Security: Wi-Fi Protected Access and 802.11i	REAL 802.11 SECURITY	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))] [Transformation: Real 802.11 Security: Wi-Fi Protected Access and 802.11i transforms to REAL 802.11 SECURITY]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), Concat(ConstStr("": Wi-Fi Protected ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦WhiteSpace""), 1))), Concat(ConstStr(""ccess and ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Upper Caseâ—¦Upper Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Upper Case""), -1)))))))))"	REAL 802.11 SECURITY->Real 802.11 Security: Wi-Fi Protected Access and 802.11i	REAL 802.11 SECURITY	Real 802.11 Security: Wi-Fi Protected Access and 802.11i	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), Concat(ConstStr("": Wi-Fi Protected ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦WhiteSpace""), 1))), Concat(ConstStr(""ccess and ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Upper Caseâ—¦Upper Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Upper Case""), -1)))))))))] [Transformation: REAL 802.11 SECURITY transforms to Real 802.11 Security: Wi-Fi Protected Access and 802.11i]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"""Jon Edney, William A. Arbaugh""->""Edney, Jon"""	"""Jon Edney, William A. Arbaugh"""	"""Edney, Jon"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: ""Jon Edney, William A. Arbaugh"" transforms to ""Edney, Jon""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("", William A. Arbaugh\"""")))))"	"""Edney, Jon""->""Jon Edney, William A. Arbaugh"""	"""Edney, Jon"""	"""Jon Edney, William A. Arbaugh"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("", William A. Arbaugh\"""")))))] [Transformation: ""Edney, Jon"" transforms to ""Jon Edney, William A. Arbaugh""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x), Concat(ConstStr(""-W/""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))))))"	C++ By Dissection->C++ BY DISSECTION-W/CD	C++ By Dissection	C++ BY DISSECTION-W/CD	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x), Concat(ConstStr(""-W/""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))))))] [Transformation: C++ By Dissection transforms to C++ BY DISSECTION-W/CD]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Hyphen""), 1))))"	C++ BY DISSECTION-W/CD->C++ By Dissection	C++ BY DISSECTION-W/CD	C++ By Dissection	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Hyphen""), 1))))] [Transformation: C++ BY DISSECTION-W/CD transforms to C++ By Dissection]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))))"	Ira Pohl->POHL	Ira Pohl	POHL	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))))] [Transformation: Ira Pohl transforms to POHL]"
"Concat(ConstStr(""Ira ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x))"	POHL->Ira Pohl	POHL	Ira Pohl	"[Program: Concat(ConstStr(""Ira ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x))] [Transformation: POHL transforms to Ira Pohl]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))))"	"""Non-Photorealistic Computer Graphics: Modeling, Rendering and Animation""->""Non-Photorealistic Computer Graphics, Modeling, Rendering, and Animation"""	"""Non-Photorealistic Computer Graphics: Modeling, Rendering and Animation"""	"""Non-Photorealistic Computer Graphics, Modeling, Rendering, and Animation"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))))] [Transformation: ""Non-Photorealistic Computer Graphics: Modeling, Rendering and Animation"" transforms to ""Non-Photorealistic Computer Graphics, Modeling, Rendering, and Animation""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Commaâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))))"	"""Non-Photorealistic Computer Graphics, Modeling, Rendering, and Animation""->""Non-Photorealistic Computer Graphics: Modeling, Rendering and Animation"""	"""Non-Photorealistic Computer Graphics, Modeling, Rendering, and Animation"""	"""Non-Photorealistic Computer Graphics: Modeling, Rendering and Animation"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Commaâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))))] [Transformation: ""Non-Photorealistic Computer Graphics, Modeling, Rendering, and Animation"" transforms to ""Non-Photorealistic Computer Graphics: Modeling, Rendering and Animation""]"
"Concat(ConstStr(""\""By (author) ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" By (author) ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))"	"""Strothotte, Thomas; Schlechtweg, Stefan""->""By (author) Strothotte, Thomas By (author) Schlechtweg, Stefan"""	"""Strothotte, Thomas; Schlechtweg, Stefan"""	"""By (author) Strothotte, Thomas By (author) Schlechtweg, Stefan"""	"[Program: Concat(ConstStr(""\""By (author) ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" By (author) ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))] [Transformation: ""Strothotte, Thomas; Schlechtweg, Stefan"" transforms to ""By (author) Strothotte, Thomas By (author) Schlechtweg, Stefan""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))"	"""By (author) Strothotte, Thomas By (author) Schlechtweg, Stefan""->""Strothotte, Thomas; Schlechtweg, Stefan"""	"""By (author) Strothotte, Thomas By (author) Schlechtweg, Stefan"""	"""Strothotte, Thomas; Schlechtweg, Stefan"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))] [Transformation: ""By (author) Strothotte, Thomas By (author) Schlechtweg, Stefan"" transforms to ""Strothotte, Thomas; Schlechtweg, Stefan""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), -1)))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), -1)))))))))"	Smart Client Deployment with ClickOnce(TM): Deploying Windows Forms Applications with ClickOnce(TM)->Smart Client Deployment with Clickonce: Deploying Windows Forms Applications with Clickonce	Smart Client Deployment with ClickOnce(TM): Deploying Windows Forms Applications with ClickOnce(TM)	Smart Client Deployment with Clickonce: Deploying Windows Forms Applications with Clickonce	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), -1)))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), -1)))))))))] [Transformation: Smart Client Deployment with ClickOnce(TM): Deploying Windows Forms Applications with ClickOnce(TM) transforms to Smart Client Deployment with Clickonce: Deploying Windows Forms Applications with Clickonce]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -5))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RelativePosition(x, -5), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))), Concat(ConstStr(""(TM)""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RelativePosition(x, -5))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RelativePosition(x, -5), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))), ConstStr(""(TM)""))))))))"	Smart Client Deployment with Clickonce: Deploying Windows Forms Applications with Clickonce->Smart Client Deployment with ClickOnce(TM): Deploying Windows Forms Applications with ClickOnce(TM)	Smart Client Deployment with Clickonce: Deploying Windows Forms Applications with Clickonce	Smart Client Deployment with ClickOnce(TM): Deploying Windows Forms Applications with ClickOnce(TM)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -5))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RelativePosition(x, -5), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))), Concat(ConstStr(""(TM)""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RelativePosition(x, -5))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RelativePosition(x, -5), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))), ConstStr(""(TM)""))))))))] [Transformation: Smart Client Deployment with Clickonce: Deploying Windows Forms Applications with Clickonce transforms to Smart Client Deployment with ClickOnce(TM): Deploying Windows Forms Applications with ClickOnce(TM)]"
"Concat(ConstStr(""\""Mackenzie, Duncan; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))"	"""Noyes, Brian""->""Mackenzie, Duncan; Noyes, Brian"""	"""Noyes, Brian"""	"""Mackenzie, Duncan; Noyes, Brian"""	"[Program: Concat(ConstStr(""\""Mackenzie, Duncan; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))] [Transformation: ""Noyes, Brian"" transforms to ""Mackenzie, Duncan; Noyes, Brian""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))"	"""Mackenzie, Duncan; Noyes, Brian""->""Noyes, Brian"""	"""Mackenzie, Duncan; Noyes, Brian"""	"""Noyes, Brian"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))] [Transformation: ""Mackenzie, Duncan; Noyes, Brian"" transforms to ""Noyes, Brian""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Managing Gigabytes: Compressing and Indexing Documents and Images (The Morgan.->Managing Gigabytes: Compressing and Indexing Documents and Images	Managing Gigabytes: Compressing and Indexing Documents and Images (The Morgan.	Managing Gigabytes: Compressing and Indexing Documents and Images	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Managing Gigabytes: Compressing and Indexing Documents and Images (The Morgan. transforms to Managing Gigabytes: Compressing and Indexing Documents and Images]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (The ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""organ.""))))"	Managing Gigabytes: Compressing and Indexing Documents and Images->Managing Gigabytes: Compressing and Indexing Documents and Images (The Morgan.	Managing Gigabytes: Compressing and Indexing Documents and Images	Managing Gigabytes: Compressing and Indexing Documents and Images (The Morgan.	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (The ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""organ.""))))] [Transformation: Managing Gigabytes: Compressing and Indexing Documents and Images transforms to Managing Gigabytes: Compressing and Indexing Documents and Images (The Morgan.]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""0"": ""Ian Witten""})"	0->Ian Witten	0	Ian Witten	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""0"": ""Ian Witten""})] [Transformation: 0 transforms to Ian Witten]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""Ian Witten"": ""0""})"	Ian Witten->0	Ian Witten	0	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""Ian Witten"": ""0""})] [Transformation: Ian Witten transforms to 0]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x)"	Constraint Processing->CONSTRAINT PROCESSING	Constraint Processing	CONSTRAINT PROCESSING	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x)] [Transformation: Constraint Processing transforms to CONSTRAINT PROCESSING]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)"	CONSTRAINT PROCESSING->Constraint Processing	CONSTRAINT PROCESSING	Constraint Processing	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)] [Transformation: CONSTRAINT PROCESSING transforms to Constraint Processing]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x)"	"""Dechter, Rina""->""DECHTER, RINA"""	"""Dechter, Rina"""	"""DECHTER, RINA"""	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x)] [Transformation: ""Dechter, Rina"" transforms to ""DECHTER, RINA""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)"	"""DECHTER, RINA""->""Dechter, Rina"""	"""DECHTER, RINA"""	"""Dechter, Rina"""	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)] [Transformation: ""DECHTER, RINA"" transforms to ""Dechter, Rina""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("": Techniques for Building Corporate ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""emories""))))"	Applying Knowledge Management->Applying Knowledge Management: Techniques for Building Corporate Memories	Applying Knowledge Management	Applying Knowledge Management: Techniques for Building Corporate Memories	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("": Techniques for Building Corporate ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""emories""))))] [Transformation: Applying Knowledge Management transforms to Applying Knowledge Management: Techniques for Building Corporate Memories]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))"	Applying Knowledge Management: Techniques for Building Corporate Memories->Applying Knowledge Management	Applying Knowledge Management: Techniques for Building Corporate Memories	Applying Knowledge Management	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))] [Transformation: Applying Knowledge Management: Techniques for Building Corporate Memories transforms to Applying Knowledge Management]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Watson, Ian D""->Ian Watson"	"""Watson, Ian D"""	Ian Watson	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Watson, Ian D"" transforms to Ian Watson]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" D\"""")))))"	"Ian Watson->""Watson, Ian D"""	Ian Watson	"""Watson, Ian D"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" D\"""")))))] [Transformation: Ian Watson transforms to ""Watson, Ian D""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))"	"""TCP/IP Clearly Explained, Fourth Edition (The Morgan Kaufmann Series in Networking)""->TCP/IP Clearly Explained"	"""TCP/IP Clearly Explained, Fourth Edition (The Morgan Kaufmann Series in Networking)"""	TCP/IP Clearly Explained	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))] [Transformation: ""TCP/IP Clearly Explained, Fourth Edition (The Morgan Kaufmann Series in Networking)"" transforms to TCP/IP Clearly Explained]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Fourth Edition (The Morgan Kaufmann Series in Networking)\"""")))"	"TCP/IP Clearly Explained->""TCP/IP Clearly Explained, Fourth Edition (The Morgan Kaufmann Series in Networking)"""	TCP/IP Clearly Explained	"""TCP/IP Clearly Explained, Fourth Edition (The Morgan Kaufmann Series in Networking)"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Fourth Edition (The Morgan Kaufmann Series in Networking)\"""")))] [Transformation: TCP/IP Clearly Explained transforms to ""TCP/IP Clearly Explained, Fourth Edition (The Morgan Kaufmann Series in Networking)""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Pete Loshin->""Loshin, Pete"""	Pete Loshin	"""Loshin, Pete"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Pete Loshin transforms to ""Loshin, Pete""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Loshin, Pete""->Pete Loshin"	"""Loshin, Pete"""	Pete Loshin	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Loshin, Pete"" transforms to Pete Loshin]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Numberâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1)))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1))), ConstStr(""M D"")))"	SimNet XPert Release 4 Combined PageOut Edition->SIMNET XPERT RELEASE 4 COM D	SimNet XPert Release 4 Combined PageOut Edition	SIMNET XPERT RELEASE 4 COM D	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Numberâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1)))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1))), ConstStr(""M D"")))] [Transformation: SimNet XPert Release 4 Combined PageOut Edition transforms to SIMNET XPERT RELEASE 4 COM D]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), 1)))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), 1)))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Upper Case""), -1)))), ConstStr(""ombined PageOut Edition""))))"	SIMNET XPERT RELEASE 4 COM D->SimNet XPert Release 4 Combined PageOut Edition	SIMNET XPERT RELEASE 4 COM D	SimNet XPert Release 4 Combined PageOut Edition	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), 1)))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), 1)))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Upper Case""), -1)))), ConstStr(""ombined PageOut Edition""))))] [Transformation: SIMNET XPERT RELEASE 4 COM D transforms to SimNet XPert Release 4 Combined PageOut Edition]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr(""\"""")))))"	"Triad Interactive->""Triad, Interactive"""	Triad Interactive	"""Triad, Interactive"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr(""\"""")))))] [Transformation: Triad Interactive transforms to ""Triad, Interactive""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))))"	"""Triad, Interactive""->Triad Interactive"	"""Triad, Interactive"""	Triad Interactive	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))))] [Transformation: ""Triad, Interactive"" transforms to Triad Interactive]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Colon"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colon"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))))"	The Humane Interface :New Directions for Designing Interactive Systems->The Humane Interface: New Directions for Designing Interactive Systems	The Humane Interface :New Directions for Designing Interactive Systems	The Humane Interface: New Directions for Designing Interactive Systems	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Colon"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colon"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))))] [Transformation: The Humane Interface :New Directions for Designing Interactive Systems transforms to The Humane Interface: New Directions for Designing Interactive Systems]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Colon"", ""Îµ""), -1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))))"	The Humane Interface: New Directions for Designing Interactive Systems->The Humane Interface :New Directions for Designing Interactive Systems	The Humane Interface: New Directions for Designing Interactive Systems	The Humane Interface :New Directions for Designing Interactive Systems	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Colon"", ""Îµ""), -1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))))] [Transformation: The Humane Interface: New Directions for Designing Interactive Systems transforms to The Humane Interface :New Directions for Designing Interactive Systems]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Raskin, Jef""->Jef Raskin"	"""Raskin, Jef"""	Jef Raskin	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Raskin, Jef"" transforms to Jef Raskin]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Jef Raskin->""Raskin, Jef"""	Jef Raskin	"""Raskin, Jef"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Jef Raskin transforms to ""Raskin, Jef""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	JDBC: Practical Guide for Java Programmers (The Practical Guides)->JDBC: Practical Guide for Java Programmers	JDBC: Practical Guide for Java Programmers (The Practical Guides)	JDBC: Practical Guide for Java Programmers	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: JDBC: Practical Guide for Java Programmers (The Practical Guides) transforms to JDBC: Practical Guide for Java Programmers]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (The ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""uides)""))))"	JDBC: Practical Guide for Java Programmers->JDBC: Practical Guide for Java Programmers (The Practical Guides)	JDBC: Practical Guide for Java Programmers	JDBC: Practical Guide for Java Programmers (The Practical Guides)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (The ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""uides)""))))] [Transformation: JDBC: Practical Guide for Java Programmers transforms to JDBC: Practical Guide for Java Programmers (The Practical Guides)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))"	"Gregory D. Speegle->""Speegle, Gregory D."""	Gregory D. Speegle	"""Speegle, Gregory D."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))] [Transformation: Gregory D. Speegle transforms to ""Speegle, Gregory D.""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Speegle, Gregory D.""->Gregory D. Speegle"	"""Speegle, Gregory D."""	Gregory D. Speegle	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Speegle, Gregory D."" transforms to Gregory D. Speegle]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Hyphen""), 1))))"	"""Essential Check Point FireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide""->ESSENTIAL CHECK POINT FIREWALL"	"""Essential Check Point FireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide"""	ESSENTIAL CHECK POINT FIREWALL	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Hyphen""), 1))))] [Transformation: ""Essential Check Point FireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide"" transforms to ESSENTIAL CHECK POINT FIREWALL]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), -1)))), ConstStr(""ireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide\"""")))"	"ESSENTIAL CHECK POINT FIREWALL->""Essential Check Point FireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide"""	ESSENTIAL CHECK POINT FIREWALL	"""Essential Check Point FireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), -1)))), ConstStr(""ireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide\"""")))] [Transformation: ESSENTIAL CHECK POINT FIREWALL transforms to ""Essential Check Point FireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))"	"Dameon D. Welch-Abernathy->""Welch-Abernathy, Dameon D."""	Dameon D. Welch-Abernathy	"""Welch-Abernathy, Dameon D."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))] [Transformation: Dameon D. Welch-Abernathy transforms to ""Welch-Abernathy, Dameon D.""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Welch-Abernathy, Dameon D.""->Dameon D. Welch-Abernathy"	"""Welch-Abernathy, Dameon D."""	Dameon D. Welch-Abernathy	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Welch-Abernathy, Dameon D."" transforms to Dameon D. Welch-Abernathy]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Hyphen""), 1))), Concat(ConstStr("": ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphenâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Practical Issues in Database Management - A Reference for the Thinking Practitioner->Practical Issues in Database Management: A Reference for the Thinking Practitioner	Practical Issues in Database Management - A Reference for the Thinking Practitioner	Practical Issues in Database Management: A Reference for the Thinking Practitioner	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Hyphen""), 1))), Concat(ConstStr("": ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphenâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Practical Issues in Database Management - A Reference for the Thinking Practitioner transforms to Practical Issues in Database Management: A Reference for the Thinking Practitioner]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" - ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Practical Issues in Database Management: A Reference for the Thinking Practitioner->Practical Issues in Database Management - A Reference for the Thinking Practitioner	Practical Issues in Database Management: A Reference for the Thinking Practitioner	Practical Issues in Database Management - A Reference for the Thinking Practitioner	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" - ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Practical Issues in Database Management: A Reference for the Thinking Practitioner transforms to Practical Issues in Database Management - A Reference for the Thinking Practitioner]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Pascal, Fabian,""->Fabian Pascal"	"""Pascal, Fabian,"""	Fabian Pascal	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Pascal, Fabian,"" transforms to Fabian Pascal]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("",\"""")))))"	"Fabian Pascal->""Pascal, Fabian,"""	Fabian Pascal	"""Pascal, Fabian,"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("",\"""")))))] [Transformation: Fabian Pascal transforms to ""Pascal, Fabian,""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1)))"	Fundamentals of Thermal-Fluid Sciences(2nd edition)->Fundamentals of Thermal-Fluid Sciences	Fundamentals of Thermal-Fluid Sciences(2nd edition)	Fundamentals of Thermal-Fluid Sciences	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1)))] [Transformation: Fundamentals of Thermal-Fluid Sciences(2nd edition) transforms to Fundamentals of Thermal-Fluid Sciences]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr(""(2nd edition)""))"	Fundamentals of Thermal-Fluid Sciences->Fundamentals of Thermal-Fluid Sciences(2nd edition)	Fundamentals of Thermal-Fluid Sciences	Fundamentals of Thermal-Fluid Sciences(2nd edition)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr(""(2nd edition)""))] [Transformation: Fundamentals of Thermal-Fluid Sciences transforms to Fundamentals of Thermal-Fluid Sciences(2nd edition)]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr(""&nbsp;&nbsp;""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), -1)))))"	"""Yunus A. Cengel, Robert H. Turner, Yunus Cengel, Robert Turn""->Yunus A. Cengel&nbsp;&nbsp;Robert H. Turner"	"""Yunus A. Cengel, Robert H. Turner, Yunus Cengel, Robert Turn"""	Yunus A. Cengel&nbsp;&nbsp;Robert H. Turner	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr(""&nbsp;&nbsp;""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), -1)))))] [Transformation: ""Yunus A. Cengel, Robert H. Turner, Yunus Cengel, Robert Turn"" transforms to Yunus A. Cengel&nbsp;&nbsp;Robert H. Turner]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Ampersand""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Ampersand""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -3))), ConstStr(""\"""")))))))))))))"	"Yunus A. Cengel&nbsp;&nbsp;Robert H. Turner->""Yunus A. Cengel, Robert H. Turner, Yunus Cengel, Robert Turn"""	Yunus A. Cengel&nbsp;&nbsp;Robert H. Turner	"""Yunus A. Cengel, Robert H. Turner, Yunus Cengel, Robert Turn"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Ampersand""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Ampersand""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -3))), ConstStr(""\"""")))))))))))))] [Transformation: Yunus A. Cengel&nbsp;&nbsp;Robert H. Turner transforms to ""Yunus A. Cengel, Robert H. Turner, Yunus Cengel, Robert Turn""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x)"	Applied Software Architecture->APPLIED SOFTWARE ARCHITECTURE	Applied Software Architecture	APPLIED SOFTWARE ARCHITECTURE	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x)] [Transformation: Applied Software Architecture transforms to APPLIED SOFTWARE ARCHITECTURE]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)"	APPLIED SOFTWARE ARCHITECTURE->Applied Software Architecture	APPLIED SOFTWARE ARCHITECTURE	Applied Software Architecture	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)] [Transformation: APPLIED SOFTWARE ARCHITECTURE transforms to Applied Software Architecture]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦Comma""), 1))), Concat(ConstStr(""offmeister, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"""Christine Hofmeister, Robert Nord, Dilip Soni""->""Hoffmeister, Christine"""	"""Christine Hofmeister, Robert Nord, Dilip Soni"""	"""Hoffmeister, Christine"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦Comma""), 1))), Concat(ConstStr(""offmeister, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: ""Christine Hofmeister, Robert Nord, Dilip Soni"" transforms to ""Hoffmeister, Christine""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""ofmeister, Robert Nord, Dilip Soni\"""")))))"	"""Hoffmeister, Christine""->""Christine Hofmeister, Robert Nord, Dilip Soni"""	"""Hoffmeister, Christine"""	"""Christine Hofmeister, Robert Nord, Dilip Soni"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""ofmeister, Robert Nord, Dilip Soni\"""")))))] [Transformation: ""Hoffmeister, Christine"" transforms to ""Christine Hofmeister, Robert Nord, Dilip Soni""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Words/dots/hyphensâ—¦WhiteSpaceâ—¦Words/dots/hyphens""), -1), RegexPositionRelative(x, RegexPair(""Lowercase word"", ""Îµ""), -1))))))))"	Data Structures from the Outside In : An Object Oriented Approach with Java 5. 0->Data Structures Outside In With Java	Data Structures from the Outside In : An Object Oriented Approach with Java 5. 0	Data Structures Outside In With Java	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Words/dots/hyphensâ—¦WhiteSpaceâ—¦Words/dots/hyphens""), -1), RegexPositionRelative(x, RegexPair(""Lowercase word"", ""Îµ""), -1))))))))] [Transformation: Data Structures from the Outside In : An Object Oriented Approach with Java 5. 0 transforms to Data Structures Outside In With Java]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" from the ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), ConstStr("" : An Object Oriented Approach with Java 5. 0""))))"	Data Structures Outside In With Java->Data Structures from the Outside In : An Object Oriented Approach with Java 5. 0	Data Structures Outside In With Java	Data Structures from the Outside In : An Object Oriented Approach with Java 5. 0	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" from the ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), ConstStr("" : An Object Oriented Approach with Java 5. 0""))))] [Transformation: Data Structures Outside In With Java transforms to Data Structures from the Outside In : An Object Oriented Approach with Java 5. 0]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))"	"""Venugopal, Sesh""->Venugopal"	"""Venugopal, Sesh"""	Venugopal	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))] [Transformation: ""Venugopal, Sesh"" transforms to Venugopal]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Sesh\"""")))"	"Venugopal->""Venugopal, Sesh"""	Venugopal	"""Venugopal, Sesh"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Sesh\"""")))] [Transformation: Venugopal transforms to ""Venugopal, Sesh""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1)))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Words/dots/hyphensâ—¦WhiteSpaceâ—¦Number""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Commaâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))))))))"	"""INSIDE WINDOWS STORAGE. Server Storage Technologies for Windows 2000, Windows Server 2003, and Beyond""->""Inside Windows Storage: Server Storage Technologies for Windows Server 2003, Windows 2000 and Beyond"""	"""INSIDE WINDOWS STORAGE. Server Storage Technologies for Windows 2000, Windows Server 2003, and Beyond"""	"""Inside Windows Storage: Server Storage Technologies for Windows Server 2003, Windows 2000 and Beyond"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1)))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Words/dots/hyphensâ—¦WhiteSpaceâ—¦Number""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Commaâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))))))))] [Transformation: ""INSIDE WINDOWS STORAGE. Server Storage Technologies for Windows 2000, Windows Server 2003, and Beyond"" transforms to ""Inside Windows Storage: Server Storage Technologies for Windows Server 2003, Windows 2000 and Beyond""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""WhiteSpaceâ—¦Words/dots/hyphens""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in let sharedParsedNumber = ParseNumber(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), -1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), -1))), ""(',', , , '.', , False)"") in let sharedNumberFormat = ""(, , , , , (, , , '.', , False))"" in RangeConcat(RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, ""(0, 4, Down)""), sharedNumberFormat), RangeConcat(RangeConstStr("", Windows Server ""), RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, ""(3, 4, UpOrNext)""), sharedNumberFormat))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Numberâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))))))"	"""Inside Windows Storage: Server Storage Technologies for Windows Server 2003, Windows 2000 and Beyond""->""INSIDE WINDOWS STORAGE. Server Storage Technologies for Windows 2000, Windows Server 2003, and Beyond"""	"""Inside Windows Storage: Server Storage Technologies for Windows Server 2003, Windows 2000 and Beyond"""	"""INSIDE WINDOWS STORAGE. Server Storage Technologies for Windows 2000, Windows Server 2003, and Beyond"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""WhiteSpaceâ—¦Words/dots/hyphens""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in let sharedParsedNumber = ParseNumber(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), -1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), -1))), ""(',', , , '.', , False)"") in let sharedNumberFormat = ""(, , , , , (, , , '.', , False))"" in RangeConcat(RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, ""(0, 4, Down)""), sharedNumberFormat), RangeConcat(RangeConstStr("", Windows Server ""), RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, ""(3, 4, UpOrNext)""), sharedNumberFormat))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Numberâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Inside Windows Storage: Server Storage Technologies for Windows Server 2003, Windows 2000 and Beyond"" transforms to ""INSIDE WINDOWS STORAGE. Server Storage Technologies for Windows 2000, Windows Server 2003, and Beyond""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))))))"	"""Naik, Dilip C""->Dilip C. Naik Dilip Naik"	"""Naik, Dilip C"""	Dilip C. Naik Dilip Naik	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))))))] [Transformation: ""Naik, Dilip C"" transforms to Dilip C. Naik Dilip Naik]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr(""\"""")))))"	"Dilip C. Naik Dilip Naik->""Naik, Dilip C"""	Dilip C. Naik Dilip Naik	"""Naik, Dilip C"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr(""\"""")))))] [Transformation: Dilip C. Naik Dilip Naik transforms to ""Naik, Dilip C""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("".""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Computer Accounting with Microsoft Great Plains 8. 0 w/ Software CD->Computer Accounting with Microsoft Great Plains 8.0 w/ Software CD	Computer Accounting with Microsoft Great Plains 8. 0 w/ Software CD	Computer Accounting with Microsoft Great Plains 8.0 w/ Software CD	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("".""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Computer Accounting with Microsoft Great Plains 8. 0 w/ Software CD transforms to Computer Accounting with Microsoft Great Plains 8.0 w/ Software CD]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Computer Accounting with Microsoft Great Plains 8.0 w/ Software CD->Computer Accounting with Microsoft Great Plains 8. 0 w/ Software CD	Computer Accounting with Microsoft Great Plains 8.0 w/ Software CD	Computer Accounting with Microsoft Great Plains 8. 0 w/ Software CD	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Computer Accounting with Microsoft Great Plains 8.0 w/ Software CD transforms to Computer Accounting with Microsoft Great Plains 8. 0 w/ Software CD]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))"	"""Yacht, Carol; Crosson, Susan""->""Carol Yacht, Susan Crosson"""	"""Yacht, Carol; Crosson, Susan"""	"""Carol Yacht, Susan Crosson"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Yacht, Carol; Crosson, Susan"" transforms to ""Carol Yacht, Susan Crosson""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))"	"""Carol Yacht, Susan Crosson""->""Yacht, Carol; Crosson, Susan"""	"""Carol Yacht, Susan Crosson"""	"""Yacht, Carol; Crosson, Susan"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Carol Yacht, Susan Crosson"" transforms to ""Yacht, Carol; Crosson, Susan""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr("" Gupta\"""")))))"	"Defend I.T.: Security by Example->""Defend I.T.: Security by Example, by Gupta"""	Defend I.T.: Security by Example	"""Defend I.T.: Security by Example, by Gupta"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr("" Gupta\"""")))))] [Transformation: Defend I.T.: Security by Example transforms to ""Defend I.T.: Security by Example, by Gupta""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))"	"""Defend I.T.: Security by Example, by Gupta""->Defend I.T.: Security by Example"	"""Defend I.T.: Security by Example, by Gupta"""	Defend I.T.: Security by Example	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))] [Transformation: ""Defend I.T.: Security by Example, by Gupta"" transforms to Defend I.T.: Security by Example]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""/ ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))"	"Ajay Gupta; Scott Laliberte->""Gupta, Ajay/ Laliberte, Scott"""	Ajay Gupta; Scott Laliberte	"""Gupta, Ajay/ Laliberte, Scott"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""/ ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))] [Transformation: Ajay Gupta; Scott Laliberte transforms to ""Gupta, Ajay/ Laliberte, Scott""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slashâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))))))"	"""Gupta, Ajay/ Laliberte, Scott""->Ajay Gupta; Scott Laliberte"	"""Gupta, Ajay/ Laliberte, Scott"""	Ajay Gupta; Scott Laliberte	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slashâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))))))] [Transformation: ""Gupta, Ajay/ Laliberte, Scott"" transforms to Ajay Gupta; Scott Laliberte]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), ConstStr("", pb, 2003\"""")))"	"Business Intelligence: The Savvy Manager's Guide (The Savvy Manager's Guides)->""Business Intelligence: The Savvy Manager's Guide, pb, 2003"""	Business Intelligence: The Savvy Manager's Guide (The Savvy Manager's Guides)	"""Business Intelligence: The Savvy Manager's Guide, pb, 2003"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), ConstStr("", pb, 2003\"""")))] [Transformation: Business Intelligence: The Savvy Manager's Guide (The Savvy Manager's Guides) transforms to ""Business Intelligence: The Savvy Manager's Guide, pb, 2003""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""uides)""))))"	"""Business Intelligence: The Savvy Manager's Guide, pb, 2003""->Business Intelligence: The Savvy Manager's Guide (The Savvy Manager's Guides)"	"""Business Intelligence: The Savvy Manager's Guide, pb, 2003"""	Business Intelligence: The Savvy Manager's Guide (The Savvy Manager's Guides)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""uides)""))))] [Transformation: ""Business Intelligence: The Savvy Manager's Guide, pb, 2003"" transforms to Business Intelligence: The Savvy Manager's Guide (The Savvy Manager's Guides)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"David Loshin->""Loshin, David"""	David Loshin	"""Loshin, David"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: David Loshin transforms to ""Loshin, David""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Loshin, David""->David Loshin"	"""Loshin, David"""	David Loshin	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Loshin, David"" transforms to David Loshin]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" : ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1)))), Concat(ConstStr(""honeandapos;""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, -9), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1), RelativePosition(x, 10))), ConstStr("" Society""))))))))))"	Mobile Connection the Cell Phones Impact->The Mobile Connection : The Cell Phoneandapos;s Impact on Society	Mobile Connection the Cell Phones Impact	The Mobile Connection : The Cell Phoneandapos;s Impact on Society	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" : ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1)))), Concat(ConstStr(""honeandapos;""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, -9), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1), RelativePosition(x, 10))), ConstStr("" Society""))))))))))] [Transformation: Mobile Connection the Cell Phones Impact transforms to The Mobile Connection : The Cell Phoneandapos;s Impact on Society]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""Camel Caseâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""hones ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Lowercase word""), 1)))))))))"	The Mobile Connection : The Cell Phoneandapos;s Impact on Society->Mobile Connection the Cell Phones Impact	The Mobile Connection : The Cell Phoneandapos;s Impact on Society	Mobile Connection the Cell Phones Impact	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""Camel Caseâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""hones ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Lowercase word""), 1)))))))))] [Transformation: The Mobile Connection : The Cell Phoneandapos;s Impact on Society transforms to Mobile Connection the Cell Phones Impact]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RelativePosition(x, -5))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Ling, Richard""->Rich Ling"	"""Ling, Richard"""	Rich Ling	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RelativePosition(x, -5))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Ling, Richard"" transforms to Rich Ling]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""ichard\"""")))))"	"Rich Ling->""Ling, Richard"""	Rich Ling	"""Ling, Richard"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""ichard\"""")))))] [Transformation: Rich Ling transforms to ""Ling, Richard""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Third Edition\"""")))"	"Pattern Recognition->""Pattern Recognition, Third Edition"""	Pattern Recognition	"""Pattern Recognition, Third Edition"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Third Edition\"""")))] [Transformation: Pattern Recognition transforms to ""Pattern Recognition, Third Edition""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))"	"""Pattern Recognition, Third Edition""->Pattern Recognition"	"""Pattern Recognition, Third Edition"""	Pattern Recognition	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))] [Transformation: ""Pattern Recognition, Third Edition"" transforms to Pattern Recognition]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Plus""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Plus""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr("" (with CD-ROM)""))))))))))"	Principles Of Computer Security: Security+ And Beyond->Principles of Computer Security: Security + and Beyond (with CD-ROM)	Principles Of Computer Security: Security+ And Beyond	Principles of Computer Security: Security + and Beyond (with CD-ROM)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Plus""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Plus""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr("" (with CD-ROM)""))))))))))] [Transformation: Principles Of Computer Security: Security+ And Beyond transforms to Principles of Computer Security: Security + and Beyond (with CD-ROM)]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Plus""), 1)))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Plus""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1)))))"	Principles of Computer Security: Security + and Beyond (with CD-ROM)->Principles Of Computer Security: Security+ And Beyond	Principles of Computer Security: Security + and Beyond (with CD-ROM)	Principles Of Computer Security: Security+ And Beyond	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Plus""), 1)))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Plus""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1)))))] [Transformation: Principles of Computer Security: Security + and Beyond (with CD-ROM) transforms to Principles Of Computer Security: Security+ And Beyond]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))"	"""Conklin, Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck""->CONKLIN"	"""Conklin, Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck"""	CONKLIN	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))] [Transformation: ""Conklin, Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck"" transforms to CONKLIN]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("", Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck\"""")))"	"CONKLIN->""Conklin, Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck"""	CONKLIN	"""Conklin, Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("", Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck\"""")))] [Transformation: CONKLIN transforms to ""Conklin, Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" 1/""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 5), RelativePosition(x, 6)))))"	Business Data Communications->Business Data Communications 1/e	Business Data Communications	Business Data Communications 1/e	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" 1/""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 5), RelativePosition(x, 6)))))] [Transformation: Business Data Communications transforms to Business Data Communications 1/e]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))"	Business Data Communications 1/e->Business Data Communications	Business Data Communications 1/e	Business Data Communications	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))] [Transformation: Business Data Communications 1/e transforms to Business Data Communications]"
"Concat(ConstStr(""FOROUZA""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))))"	None->FOROUZAN	None	FOROUZAN	"[Program: Concat(ConstStr(""FOROUZA""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))))] [Transformation: None transforms to FOROUZAN]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Case""), -1), RegexPositionRelative(x, RegexPair(""Upper Case"", ""Îµ""), -1))), ConstStr(""one""))"	FOROUZAN->None	FOROUZAN	None	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Case""), -1), RegexPositionRelative(x, RegexPair(""Upper Case"", ""Îµ""), -1))), ConstStr(""one""))] [Transformation: FOROUZAN transforms to None]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))))"	Essentials of Computer Architecture->ESSENTIALS COMPUTER ARCHITECTURE	Essentials of Computer Architecture	ESSENTIALS COMPUTER ARCHITECTURE	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))))] [Transformation: Essentials of Computer Architecture transforms to ESSENTIALS COMPUTER ARCHITECTURE]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" of ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))))"	ESSENTIALS COMPUTER ARCHITECTURE->Essentials of Computer Architecture	ESSENTIALS COMPUTER ARCHITECTURE	Essentials of Computer Architecture	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" of ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))))] [Transformation: ESSENTIALS COMPUTER ARCHITECTURE transforms to Essentials of Computer Architecture]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x)"	Comer->COMER	Comer	COMER	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x)] [Transformation: Comer transforms to COMER]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)"	COMER->Comer	COMER	Comer	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)] [Transformation: COMER transforms to Comer]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1))), Concat(ConstStr("" &amp; ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Software Engineering and Computer Games->Software Engineering &amp; Computer Games	Software Engineering and Computer Games	Software Engineering &amp; Computer Games	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1))), Concat(ConstStr("" &amp; ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Software Engineering and Computer Games transforms to Software Engineering &amp; Computer Games]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Ampersand""), 1))), Concat(ConstStr("" and ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Software Engineering &amp; Computer Games->Software Engineering and Computer Games	Software Engineering &amp; Computer Games	Software Engineering and Computer Games	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Ampersand""), 1))), Concat(ConstStr("" and ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Software Engineering &amp; Computer Games transforms to Software Engineering and Computer Games]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))"	"""Rucker, Rudy""->Rucker"	"""Rucker, Rudy"""	Rucker	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))] [Transformation: ""Rucker, Rudy"" transforms to Rucker]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""udy\"""")))))"	"Rucker->""Rucker, Rudy"""	Rucker	"""Rucker, Rudy"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""udy\"""")))))] [Transformation: Rucker transforms to ""Rucker, Rudy""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" Student Edition with ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""D-R""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""\""""))))))))))))"	"""Microsoft Office Access 2003: A Professional Approach, by Juarez, Comprehensive""->""Microsoft Office Access 2003 : A Professional Approach, Comprehensive Student Edition with CD-ROM"""	"""Microsoft Office Access 2003: A Professional Approach, by Juarez, Comprehensive"""	"""Microsoft Office Access 2003 : A Professional Approach, Comprehensive Student Edition with CD-ROM"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" Student Edition with ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""D-R""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""\""""))))))))))))] [Transformation: ""Microsoft Office Access 2003: A Professional Approach, by Juarez, Comprehensive"" transforms to ""Microsoft Office Access 2003 : A Professional Approach, Comprehensive Student Edition with CD-ROM""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", by Juarez, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), 1))), ConstStr(""\""""))))))"	"""Microsoft Office Access 2003 : A Professional Approach, Comprehensive Student Edition with CD-ROM""->""Microsoft Office Access 2003: A Professional Approach, by Juarez, Comprehensive"""	"""Microsoft Office Access 2003 : A Professional Approach, Comprehensive Student Edition with CD-ROM"""	"""Microsoft Office Access 2003: A Professional Approach, by Juarez, Comprehensive"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", by Juarez, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), 1))), ConstStr(""\""""))))))] [Transformation: ""Microsoft Office Access 2003 : A Professional Approach, Comprehensive Student Edition with CD-ROM"" transforms to ""Microsoft Office Access 2003: A Professional Approach, by Juarez, Comprehensive""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))))"	Jon Juarez->JUAREZ	Jon Juarez	JUAREZ	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))))] [Transformation: Jon Juarez transforms to JUAREZ]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Upper Case"", ""Îµ""), 1))), Concat(ConstStr(""on ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)))"	JUAREZ->Jon Juarez	JUAREZ	Jon Juarez	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Upper Case"", ""Îµ""), 1))), Concat(ConstStr(""on ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)))] [Transformation: JUAREZ transforms to Jon Juarez]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))), Concat(ConstStr("" - ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr("" Edition""))))))))))"	"""The X Window System: Programming and Applications with XT, OSF/Motif""->The X Window System Programming and Applications with Xt - OSF Motif Edition"	"""The X Window System: Programming and Applications with XT, OSF/Motif"""	The X Window System Programming and Applications with Xt - OSF Motif Edition	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))), Concat(ConstStr("" - ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr("" Edition""))))))))))] [Transformation: ""The X Window System: Programming and Applications with XT, OSF/Motif"" transforms to The X Window System Programming and Applications with Xt - OSF Motif Edition]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Alphanumericâ—¦',' or 'and'""), 1))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦',' or 'and'""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpaceâ—¦Hyphen""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Upper Caseâ—¦Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), 1))), Concat(ConstStr(""/""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\""""))))))))))"	"The X Window System Programming and Applications with Xt - OSF Motif Edition->""The X Window System: Programming and Applications with XT, OSF/Motif"""	The X Window System Programming and Applications with Xt - OSF Motif Edition	"""The X Window System: Programming and Applications with XT, OSF/Motif"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Alphanumericâ—¦',' or 'and'""), 1))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦',' or 'and'""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpaceâ—¦Hyphen""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Upper Caseâ—¦Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), 1))), Concat(ConstStr(""/""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\""""))))))))))] [Transformation: The X Window System Programming and Applications with Xt - OSF Motif Edition transforms to ""The X Window System: Programming and Applications with XT, OSF/Motif""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Young, Douglas A.""->Douglas A. Young"	"""Young, Douglas A."""	Douglas A. Young	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Young, Douglas A."" transforms to Douglas A. Young]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))"	"Douglas A. Young->""Young, Douglas A."""	Douglas A. Young	"""Young, Douglas A."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))] [Transformation: Douglas A. Young transforms to ""Young, Douglas A.""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))"	Computers As Components: Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K->COMPUTERS AS COMPONENTS	Computers As Components: Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K	COMPUTERS AS COMPONENTS	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))] [Transformation: Computers As Components: Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K transforms to COMPUTERS AS COMPONENTS]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("": Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K""))"	COMPUTERS AS COMPONENTS->Computers As Components: Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K	COMPUTERS AS COMPONENTS	Computers As Components: Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("": Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K""))] [Transformation: COMPUTERS AS COMPONENTS transforms to Computers As Components: Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Wayne Wolf->""Wolf, Wayne"""	Wayne Wolf	"""Wolf, Wayne"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Wayne Wolf transforms to ""Wolf, Wayne""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Wolf, Wayne""->Wayne Wolf"	"""Wolf, Wayne"""	Wayne Wolf	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Wolf, Wayne"" transforms to Wayne Wolf]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Hash"", ""Îµ""), 1))))"	TCP/IP Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)->TCP/IP SOCKETS IN C#	TCP/IP Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)	TCP/IP SOCKETS IN C#	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Hash"", ""Îµ""), 1))))] [Transformation: TCP/IP Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series) transforms to TCP/IP SOCKETS IN C#]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), 1))), ConstStr("" Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)""))"	TCP/IP SOCKETS IN C#->TCP/IP Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)	TCP/IP SOCKETS IN C#	TCP/IP Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), 1))), ConstStr("" Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)""))] [Transformation: TCP/IP SOCKETS IN C# transforms to TCP/IP Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"""David Makofske, Michael J. Donahoo, Kenneth L. Calvert""->""Makofske, David"""	"""David Makofske, Michael J. Donahoo, Kenneth L. Calvert"""	"""Makofske, David"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: ""David Makofske, Michael J. Donahoo, Kenneth L. Calvert"" transforms to ""Makofske, David""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""ichael J. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""onahoo, Kenneth L. Calvert\"""")))))))))"	"""Makofske, David""->""David Makofske, Michael J. Donahoo, Kenneth L. Calvert"""	"""Makofske, David"""	"""David Makofske, Michael J. Donahoo, Kenneth L. Calvert"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""ichael J. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""onahoo, Kenneth L. Calvert\"""")))))))))] [Transformation: ""Makofske, David"" transforms to ""David Makofske, Michael J. Donahoo, Kenneth L. Calvert""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	3D User Interfaces: Theory and Practice->3D User Interfaces : Theory and Practice	3D User Interfaces: Theory and Practice	3D User Interfaces : Theory and Practice	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: 3D User Interfaces: Theory and Practice transforms to 3D User Interfaces : Theory and Practice]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))"	3D User Interfaces : Theory and Practice->3D User Interfaces: Theory and Practice	3D User Interfaces : Theory and Practice	3D User Interfaces: Theory and Practice	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))] [Transformation: 3D User Interfaces : Theory and Practice transforms to 3D User Interfaces: Theory and Practice]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))"	"Doug A. Bowman;Ernst Kruijff;Joseph J. LaViola;Ivan Poupyrev->""Bowman, Doug A."""	Doug A. Bowman;Ernst Kruijff;Joseph J. LaViola;Ivan Poupyrev	"""Bowman, Doug A."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))] [Transformation: Doug A. Bowman;Ernst Kruijff;Joseph J. LaViola;Ivan Poupyrev transforms to ""Bowman, Doug A.""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("";Ernst Kruijff;Joseph J. L""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1)))), ConstStr(""Viola;Ivan Poupyrev""))))))"	"""Bowman, Doug A.""->Doug A. Bowman;Ernst Kruijff;Joseph J. LaViola;Ivan Poupyrev"	"""Bowman, Doug A."""	Doug A. Bowman;Ernst Kruijff;Joseph J. LaViola;Ivan Poupyrev	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("";Ernst Kruijff;Joseph J. L""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1)))), ConstStr(""Viola;Ivan Poupyrev""))))))] [Transformation: ""Bowman, Doug A."" transforms to Doug A. Bowman;Ernst Kruijff;Joseph J. LaViola;Ivan Poupyrev]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Socially Responsible It Management->Socially Responsible IT Management	Socially Responsible It Management	Socially Responsible IT Management	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Socially Responsible It Management transforms to Socially Responsible IT Management]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)"	Socially Responsible IT Management->Socially Responsible It Management	Socially Responsible IT Management	Socially Responsible It Management	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)] [Transformation: Socially Responsible IT Management transforms to Socially Responsible It Management]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Erbschloe, Michael""->Michael Erbschloe"	"""Erbschloe, Michael"""	Michael Erbschloe	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Erbschloe, Michael"" transforms to Michael Erbschloe]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Michael Erbschloe->""Erbschloe, Michael"""	Michael Erbschloe	"""Erbschloe, Michael"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Michael Erbschloe transforms to ""Erbschloe, Michael""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in let sharedParsedNumber = ParseNumber(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), ""(',', , , '.', , False)"") in let sharedNumberFormat = ""(, , , , , (, , , '.', , False))"" in RangeConcat(RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, ""(0, 1, Down)""), sharedNumberFormat), RangeConcat(RangeConstStr("", BK&amp;CD-ROM, pb, ""), RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, ""(0, 1, UpOrNext)""), sharedNumberFormat))), ConstStr(""\"""")))))"	"""Excel 2000: A Professional Approach, by Tobias, Level 2: Expert""->""Excel 2000, BK&amp;CD-ROM, pb, 2001"""	"""Excel 2000: A Professional Approach, by Tobias, Level 2: Expert"""	"""Excel 2000, BK&amp;CD-ROM, pb, 2001"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in let sharedParsedNumber = ParseNumber(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), ""(',', , , '.', , False)"") in let sharedNumberFormat = ""(, , , , , (, , , '.', , False))"" in RangeConcat(RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, ""(0, 1, Down)""), sharedNumberFormat), RangeConcat(RangeConstStr("", BK&amp;CD-ROM, pb, ""), RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, ""(0, 1, UpOrNext)""), sharedNumberFormat))), ConstStr(""\"""")))))] [Transformation: ""Excel 2000: A Professional Approach, by Tobias, Level 2: Expert"" transforms to ""Excel 2000, BK&amp;CD-ROM, pb, 2001""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), ConstStr("": A Professional Approach, by Tobias, Level 2: Expert\"""")))"	"""Excel 2000, BK&amp;CD-ROM, pb, 2001""->""Excel 2000: A Professional Approach, by Tobias, Level 2: Expert"""	"""Excel 2000, BK&amp;CD-ROM, pb, 2001"""	"""Excel 2000: A Professional Approach, by Tobias, Level 2: Expert"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), ConstStr("": A Professional Approach, by Tobias, Level 2: Expert\"""")))] [Transformation: ""Excel 2000, BK&amp;CD-ROM, pb, 2001"" transforms to ""Excel 2000: A Professional Approach, by Tobias, Level 2: Expert""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", by Henry\"""")))"	"Software Project Management: A Real-World Guide to Success->""Software Project Management: A Real-World Guide to Success, by Henry"""	Software Project Management: A Real-World Guide to Success	"""Software Project Management: A Real-World Guide to Success, by Henry"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", by Henry\"""")))] [Transformation: Software Project Management: A Real-World Guide to Success transforms to ""Software Project Management: A Real-World Guide to Success, by Henry""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))"	"""Software Project Management: A Real-World Guide to Success, by Henry""->Software Project Management: A Real-World Guide to Success"	"""Software Project Management: A Real-World Guide to Success, by Henry"""	Software Project Management: A Real-World Guide to Success	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))] [Transformation: ""Software Project Management: A Real-World Guide to Success, by Henry"" transforms to Software Project Management: A Real-World Guide to Success]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Joel Henry->""Henry, Joel"""	Joel Henry	"""Henry, Joel"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Joel Henry transforms to ""Henry, Joel""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Henry, Joel""->Joel Henry"	"""Henry, Joel"""	Joel Henry	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Henry, Joel"" transforms to Joel Henry]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))"	The AIX Survival Guide->AIX SURVIVAL GUIDE	The AIX Survival Guide	AIX SURVIVAL GUIDE	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))] [Transformation: The AIX Survival Guide transforms to AIX SURVIVAL GUIDE]"
"Concat(ConstStr(""The ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))"	AIX SURVIVAL GUIDE->The AIX Survival Guide	AIX SURVIVAL GUIDE	The AIX Survival Guide	"[Program: Concat(ConstStr(""The ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))] [Transformation: AIX SURVIVAL GUIDE transforms to The AIX Survival Guide]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1)))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""NDRE""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""\""""))))))))"	"A. Siegert->""SIEGERT, ANDREAS"""	A. Siegert	"""SIEGERT, ANDREAS"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1)))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""NDRE""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""\""""))))))))] [Transformation: A. Siegert transforms to ""SIEGERT, ANDREAS""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))))"	"""SIEGERT, ANDREAS""->A. Siegert"	"""SIEGERT, ANDREAS"""	A. Siegert	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))))] [Transformation: ""SIEGERT, ANDREAS"" transforms to A. Siegert]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", by Joseph J. Lazzaro\"""")))"	"Adapting PCs for Disabilities->""Adapting PCs for Disabilities, by Joseph J. Lazzaro"""	Adapting PCs for Disabilities	"""Adapting PCs for Disabilities, by Joseph J. Lazzaro"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", by Joseph J. Lazzaro\"""")))] [Transformation: Adapting PCs for Disabilities transforms to ""Adapting PCs for Disabilities, by Joseph J. Lazzaro""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))"	"""Adapting PCs for Disabilities, by Joseph J. Lazzaro""->Adapting PCs for Disabilities"	"""Adapting PCs for Disabilities, by Joseph J. Lazzaro"""	Adapting PCs for Disabilities	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))] [Transformation: ""Adapting PCs for Disabilities, by Joseph J. Lazzaro"" transforms to Adapting PCs for Disabilities]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))"	"Joseph J. Lazzaro->""Lazzaro, Joseph J."""	Joseph J. Lazzaro	"""Lazzaro, Joseph J."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))] [Transformation: Joseph J. Lazzaro transforms to ""Lazzaro, Joseph J.""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Lazzaro, Joseph J.""->Joseph J. Lazzaro"	"""Lazzaro, Joseph J."""	Joseph J. Lazzaro	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Lazzaro, Joseph J."" transforms to Joseph J. Lazzaro]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 25))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))"	Clustering Windows Servers: A Road Map for Enterprise Solutions->Clustering Windows Server: A Road Map for Enterprise Solutions	Clustering Windows Servers: A Road Map for Enterprise Solutions	Clustering Windows Server: A Road Map for Enterprise Solutions	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 25))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))] [Transformation: Clustering Windows Servers: A Road Map for Enterprise Solutions transforms to Clustering Windows Server: A Road Map for Enterprise Solutions]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦Colon""), 1))), Concat(ConstStr(""ervers: ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Clustering Windows Server: A Road Map for Enterprise Solutions->Clustering Windows Servers: A Road Map for Enterprise Solutions	Clustering Windows Server: A Road Map for Enterprise Solutions	Clustering Windows Servers: A Road Map for Enterprise Solutions	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦Colon""), 1))), Concat(ConstStr(""ervers: ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Clustering Windows Server: A Road Map for Enterprise Solutions transforms to Clustering Windows Servers: A Road Map for Enterprise Solutions]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Ampersand""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Mauler, Gary &amp; Milton Beebe""->Gary Mauler"	"""Mauler, Gary &amp; Milton Beebe"""	Gary Mauler	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Ampersand""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Mauler, Gary &amp; Milton Beebe"" transforms to Gary Mauler]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" &amp; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""ilton Beebe\"""")))))))"	"Gary Mauler->""Mauler, Gary &amp; Milton Beebe"""	Gary Mauler	"""Mauler, Gary &amp; Milton Beebe"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" &amp; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""ilton Beebe\"""")))))))] [Transformation: Gary Mauler transforms to ""Mauler, Gary &amp; Milton Beebe""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), ConstStr("")\"""")))))))))))))))"	"""Advances In Computers, Volume 62: Advances In Software Engineering (advances In Computers)""->""Advances in Computers (Advances in Computers, 62)"""	"""Advances In Computers, Volume 62: Advances In Software Engineering (advances In Computers)"""	"""Advances in Computers (Advances in Computers, 62)"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), ConstStr("")\"""")))))))))))))))] [Transformation: ""Advances In Computers, Volume 62: Advances In Software Engineering (advances In Computers)"" transforms to ""Advances in Computers (Advances in Computers, 62)""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Left Parenthesis"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))), Concat(ConstStr("", Volume ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" Software Engineering (advances ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))), ConstStr("")\"""")))))))))"	"""Advances in Computers (Advances in Computers, 62)""->""Advances In Computers, Volume 62: Advances In Software Engineering (advances In Computers)"""	"""Advances in Computers (Advances in Computers, 62)"""	"""Advances In Computers, Volume 62: Advances In Software Engineering (advances In Computers)"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Left Parenthesis"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))), Concat(ConstStr("", Volume ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" Software Engineering (advances ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))), ConstStr("")\"""")))))))))] [Transformation: ""Advances in Computers (Advances in Computers, 62)"" transforms to ""Advances In Computers, Volume 62: Advances In Software Engineering (advances In Computers)""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" V. ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))))"	Marvin Zelkowitz->Marvin V. Zelkowitz	Marvin Zelkowitz	Marvin V. Zelkowitz	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" V. ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))))] [Transformation: Marvin Zelkowitz transforms to Marvin V. Zelkowitz]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))))"	Marvin V. Zelkowitz->Marvin Zelkowitz	Marvin V. Zelkowitz	Marvin Zelkowitz	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))))] [Transformation: Marvin V. Zelkowitz transforms to Marvin Zelkowitz]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Designing Applications with MSMQ: Message Queuing for Developers (The Addison-Wesley Microsoft Technology Series)->Designing Applications with MSMQ: Message Queuing for Developers	Designing Applications with MSMQ: Message Queuing for Developers (The Addison-Wesley Microsoft Technology Series)	Designing Applications with MSMQ: Message Queuing for Developers	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Designing Applications with MSMQ: Message Queuing for Developers (The Addison-Wesley Microsoft Technology Series) transforms to Designing Applications with MSMQ: Message Queuing for Developers]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (The Addison-Wesley Microsoft Technology Series)""))"	Designing Applications with MSMQ: Message Queuing for Developers->Designing Applications with MSMQ: Message Queuing for Developers (The Addison-Wesley Microsoft Technology Series)	Designing Applications with MSMQ: Message Queuing for Developers	Designing Applications with MSMQ: Message Queuing for Developers (The Addison-Wesley Microsoft Technology Series)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (The Addison-Wesley Microsoft Technology Series)""))] [Transformation: Designing Applications with MSMQ: Message Queuing for Developers transforms to Designing Applications with MSMQ: Message Queuing for Developers (The Addison-Wesley Microsoft Technology Series)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Alan Dickman->""Dickman, Alan"""	Alan Dickman	"""Dickman, Alan"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Alan Dickman transforms to ""Dickman, Alan""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Dickman, Alan""->Alan Dickman"	"""Dickman, Alan"""	Alan Dickman	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Dickman, Alan"" transforms to Alan Dickman]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphen"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Skew-Tolerant Circuit Design->Skew Tolerant Circuit Design	Skew-Tolerant Circuit Design	Skew Tolerant Circuit Design	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphen"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Skew-Tolerant Circuit Design transforms to Skew Tolerant Circuit Design]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""-""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Skew Tolerant Circuit Design->Skew-Tolerant Circuit Design	Skew Tolerant Circuit Design	Skew-Tolerant Circuit Design	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""-""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Skew Tolerant Circuit Design transforms to Skew-Tolerant Circuit Design]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"David Harris->""Harris, David"""	David Harris	"""Harris, David"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: David Harris transforms to ""Harris, David""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Harris, David""->David Harris"	"""Harris, David"""	David Harris	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Harris, David"" transforms to David Harris]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Software Engineering (6th Edition)->Software Engineering	Software Engineering (6th Edition)	Software Engineering	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Software Engineering (6th Edition) transforms to Software Engineering]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (6th ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""dition)""))))"	Software Engineering->Software Engineering (6th Edition)	Software Engineering	Software Engineering (6th Edition)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (6th ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""dition)""))))] [Transformation: Software Engineering transforms to Software Engineering (6th Edition)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Ian Sommerville->""Sommerville, Ian"""	Ian Sommerville	"""Sommerville, Ian"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Ian Sommerville transforms to ""Sommerville, Ian""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Sommerville, Ian""->Ian Sommerville"	"""Sommerville, Ian"""	Ian Sommerville	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Sommerville, Ian"" transforms to Ian Sommerville]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" - ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))), ConstStr("" B""))))"	Virtual Private Networks: Technologies and Solutions->Virtual Private Networks - Technologies And Solutions B	Virtual Private Networks: Technologies and Solutions	Virtual Private Networks - Technologies And Solutions B	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" - ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))), ConstStr("" B""))))] [Transformation: Virtual Private Networks: Technologies and Solutions transforms to Virtual Private Networks - Technologies And Solutions B]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Hyphen""), 1))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphenâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Hyphenâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Words/dots/hyphensâ—¦WhiteSpaceâ—¦Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Camel Case""), -1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1)))))))))"	Virtual Private Networks - Technologies And Solutions B->Virtual Private Networks: Technologies and Solutions	Virtual Private Networks - Technologies And Solutions B	Virtual Private Networks: Technologies and Solutions	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Hyphen""), 1))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphenâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Hyphenâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Words/dots/hyphensâ—¦WhiteSpaceâ—¦Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Camel Case""), -1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1)))))))))] [Transformation: Virtual Private Networks - Technologies And Solutions B transforms to Virtual Private Networks: Technologies and Solutions]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("",""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr("",\"""")))))"	"Ruixi Yuan; W. Timothy Strayer->""Yuan,Strayer,"""	Ruixi Yuan; W. Timothy Strayer	"""Yuan,Strayer,"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("",""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr("",\"""")))))] [Transformation: Ruixi Yuan; W. Timothy Strayer transforms to ""Yuan,Strayer,""]"
"Concat(ConstStr(""Ruixi ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; W. Timothy ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))))))"	"""Yuan,Strayer,""->Ruixi Yuan; W. Timothy Strayer"	"""Yuan,Strayer,"""	Ruixi Yuan; W. Timothy Strayer	"[Program: Concat(ConstStr(""Ruixi ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; W. Timothy ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))))))] [Transformation: ""Yuan,Strayer,"" transforms to Ruixi Yuan; W. Timothy Strayer]"
"Concat(ConstStr(""The ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))))"	Statistical Imagination (w/CD)->The Statistical Imagination	Statistical Imagination (w/CD)	The Statistical Imagination	"[Program: Concat(ConstStr(""The ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))))] [Transformation: Statistical Imagination (w/CD) transforms to The Statistical Imagination]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("" (w/CD)""))"	The Statistical Imagination->Statistical Imagination (w/CD)	The Statistical Imagination	Statistical Imagination (w/CD)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("" (w/CD)""))] [Transformation: The Statistical Imagination transforms to Statistical Imagination (w/CD)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Ferris\"""")))"	"Ritchey->""Ritchey, Ferris"""	Ritchey	"""Ritchey, Ferris"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Ferris\"""")))] [Transformation: Ritchey transforms to ""Ritchey, Ferris""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))"	"""Ritchey, Ferris""->Ritchey"	"""Ritchey, Ferris"""	Ritchey	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))] [Transformation: ""Ritchey, Ferris"" transforms to Ritchey]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Software Security: Building Security In (Addison-Wesley Software Security Series)->Software Security: Building Security In	Software Security: Building Security In (Addison-Wesley Software Security Series)	Software Security: Building Security In	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Software Security: Building Security In (Addison-Wesley Software Security Series) transforms to Software Security: Building Security In]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (Addison-Wesley ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""eries)""))))))"	Software Security: Building Security In->Software Security: Building Security In (Addison-Wesley Software Security Series)	Software Security: Building Security In	Software Security: Building Security In (Addison-Wesley Software Security Series)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (Addison-Wesley ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""eries)""))))))] [Transformation: Software Security: Building Security In transforms to Software Security: Building Security In (Addison-Wesley Software Security Series)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Gary McGraw->""McGraw, Gary"""	Gary McGraw	"""McGraw, Gary"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Gary McGraw transforms to ""McGraw, Gary""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""McGraw, Gary""->Gary McGraw"	"""McGraw, Gary"""	Gary McGraw	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""McGraw, Gary"" transforms to Gary McGraw]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))"	"""Understanding Virtual Reality: Interface, Application, and Design""->UNDERSTANDING VIRTUAL REALITY"	"""Understanding Virtual Reality: Interface, Application, and Design"""	UNDERSTANDING VIRTUAL REALITY	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))] [Transformation: ""Understanding Virtual Reality: Interface, Application, and Design"" transforms to UNDERSTANDING VIRTUAL REALITY]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("": Interface, Application, and Design\"""")))"	"UNDERSTANDING VIRTUAL REALITY->""Understanding Virtual Reality: Interface, Application, and Design"""	UNDERSTANDING VIRTUAL REALITY	"""Understanding Virtual Reality: Interface, Application, and Design"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("": Interface, Application, and Design\"""")))] [Transformation: UNDERSTANDING VIRTUAL REALITY transforms to ""Understanding Virtual Reality: Interface, Application, and Design""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))"	"""Sherman, William R.; Craig, Alan B.""->SHERMAN"	"""Sherman, William R.; Craig, Alan B."""	SHERMAN	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))] [Transformation: ""Sherman, William R.; Craig, Alan B."" transforms to SHERMAN]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("", William R.; Craig, Alan B.\"""")))"	"SHERMAN->""Sherman, William R.; Craig, Alan B."""	SHERMAN	"""Sherman, William R.; Craig, Alan B."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("", William R.; Craig, Alan B.\"""")))] [Transformation: SHERMAN transforms to ""Sherman, William R.; Craig, Alan B.""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Data Model Patterns: A Metadata Map (the Morgan Kaufmann Series In Data Management Systems)->Data Model Patterns: A Metadata Map	Data Model Patterns: A Metadata Map (the Morgan Kaufmann Series In Data Management Systems)	Data Model Patterns: A Metadata Map	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Data Model Patterns: A Metadata Map (the Morgan Kaufmann Series In Data Management Systems) transforms to Data Model Patterns: A Metadata Map]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (the Morgan Kaufmann Series In Data Management Systems)""))"	Data Model Patterns: A Metadata Map->Data Model Patterns: A Metadata Map (the Morgan Kaufmann Series In Data Management Systems)	Data Model Patterns: A Metadata Map	Data Model Patterns: A Metadata Map (the Morgan Kaufmann Series In Data Management Systems)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (the Morgan Kaufmann Series In Data Management Systems)""))] [Transformation: Data Model Patterns: A Metadata Map transforms to Data Model Patterns: A Metadata Map (the Morgan Kaufmann Series In Data Management Systems)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr(""\"""")))))"	"David C. Hay->""Hay, David C"""	David C. Hay	"""Hay, David C"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr(""\"""")))))] [Transformation: David C. Hay transforms to ""Hay, David C""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Hay, David C""->David C. Hay"	"""Hay, David C"""	David C. Hay	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Hay, David C"" transforms to David C. Hay]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", by Winston\"""")))"	"On to C++->""On to C++, by Winston"""	On to C++	"""On to C++, by Winston"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", by Winston\"""")))] [Transformation: On to C++ transforms to ""On to C++, by Winston""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))"	"""On to C++, by Winston""->On to C++"	"""On to C++, by Winston"""	On to C++	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))] [Transformation: ""On to C++, by Winston"" transforms to On to C++]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))"	"Patrick Henry Winston->""Winston, Patrick Henry"""	Patrick Henry Winston	"""Winston, Patrick Henry"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))] [Transformation: Patrick Henry Winston transforms to ""Winston, Patrick Henry""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Winston, Patrick Henry""->Patrick Henry Winston"	"""Winston, Patrick Henry"""	Patrick Henry Winston	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Winston, Patrick Henry"" transforms to Patrick Henry Winston]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("".""))"	Cryptography Decrypted->Cryptography Decrypted.	Cryptography Decrypted	Cryptography Decrypted.	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("".""))] [Transformation: Cryptography Decrypted transforms to Cryptography Decrypted.]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1)))"	Cryptography Decrypted.->Cryptography Decrypted	Cryptography Decrypted.	Cryptography Decrypted	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1)))] [Transformation: Cryptography Decrypted. transforms to Cryptography Decrypted]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dotâ—¦Semicolon""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))))))))"	"""Mel, H.X.; Burnett, Doris; Baker, Doris M.""->""H. X. Mel, Doris Burnett, Doris M. Baker"""	"""Mel, H.X.; Burnett, Doris; Baker, Doris M."""	"""H. X. Mel, Doris Burnett, Doris M. Baker"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dotâ—¦Semicolon""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))))))))] [Transformation: ""Mel, H.X.; Burnett, Doris; Baker, Doris M."" transforms to ""H. X. Mel, Doris Burnett, Doris M. Baker""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("".""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Lowercase wordâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), ConstStr("".\"""")))))))))))))"	"""H. X. Mel, Doris Burnett, Doris M. Baker""->""Mel, H.X.; Burnett, Doris; Baker, Doris M."""	"""H. X. Mel, Doris Burnett, Doris M. Baker"""	"""Mel, H.X.; Burnett, Doris; Baker, Doris M."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("".""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Lowercase wordâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), ConstStr("".\"""")))))))))))))] [Transformation: ""H. X. Mel, Doris Burnett, Doris M. Baker"" transforms to ""Mel, H.X.; Burnett, Doris; Baker, Doris M.""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), -1)))), Concat(ConstStr(""echnology in the ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), -1))), ConstStr(""nterprise: Pdas, Blackberries, and Mobile Devices\"""")))))"	"INTEGRATING WIRELESS TECHNOLOG->""Integrating Wireless Technology in the Enterprise: Pdas, Blackberries, and Mobile Devices"""	INTEGRATING WIRELESS TECHNOLOG	"""Integrating Wireless Technology in the Enterprise: Pdas, Blackberries, and Mobile Devices"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), -1)))), Concat(ConstStr(""echnology in the ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), -1))), ConstStr(""nterprise: Pdas, Blackberries, and Mobile Devices\"""")))))] [Transformation: INTEGRATING WIRELESS TECHNOLOG transforms to ""Integrating Wireless Technology in the Enterprise: Pdas, Blackberries, and Mobile Devices""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RelativePosition(x, 31))))"	"""Integrating Wireless Technology in the Enterprise: Pdas, Blackberries, and Mobile Devices""->INTEGRATING WIRELESS TECHNOLOG"	"""Integrating Wireless Technology in the Enterprise: Pdas, Blackberries, and Mobile Devices"""	INTEGRATING WIRELESS TECHNOLOG	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RelativePosition(x, 31))))] [Transformation: ""Integrating Wireless Technology in the Enterprise: Pdas, Blackberries, and Mobile Devices"" transforms to INTEGRATING WIRELESS TECHNOLOG]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Wheeler, William""->William Wheeler"	"""Wheeler, William"""	William Wheeler	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Wheeler, William"" transforms to William Wheeler]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"William Wheeler->""Wheeler, William"""	William Wheeler	"""Wheeler, William"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: William Wheeler transforms to ""Wheeler, William""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	The Craft of Information Visualization: Readings and Reflections (The Morgan Kaufmann Series in Interactive Technologies)->The Craft of Information Visualization: Readings and Reflections	The Craft of Information Visualization: Readings and Reflections (The Morgan Kaufmann Series in Interactive Technologies)	The Craft of Information Visualization: Readings and Reflections	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: The Craft of Information Visualization: Readings and Reflections (The Morgan Kaufmann Series in Interactive Technologies) transforms to The Craft of Information Visualization: Readings and Reflections]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" Morgan Kaufmann Series in Interactive Technologies)""))))"	The Craft of Information Visualization: Readings and Reflections->The Craft of Information Visualization: Readings and Reflections (The Morgan Kaufmann Series in Interactive Technologies)	The Craft of Information Visualization: Readings and Reflections	The Craft of Information Visualization: Readings and Reflections (The Morgan Kaufmann Series in Interactive Technologies)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" Morgan Kaufmann Series in Interactive Technologies)""))))] [Transformation: The Craft of Information Visualization: Readings and Reflections transforms to The Craft of Information Visualization: Readings and Reflections (The Morgan Kaufmann Series in Interactive Technologies)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr(""\"""")))))"	"Benjamin B. Bederson Ben Shneiderman->""Benjamin B. Bederson, Ben Shneiderman"""	Benjamin B. Bederson Ben Shneiderman	"""Benjamin B. Bederson, Ben Shneiderman"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr(""\"""")))))] [Transformation: Benjamin B. Bederson Ben Shneiderman transforms to ""Benjamin B. Bederson, Ben Shneiderman""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1)))))"	"""Benjamin B. Bederson, Ben Shneiderman""->Benjamin B. Bederson Ben Shneiderman"	"""Benjamin B. Bederson, Ben Shneiderman"""	Benjamin B. Bederson Ben Shneiderman	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1)))))] [Transformation: ""Benjamin B. Bederson, Ben Shneiderman"" transforms to Benjamin B. Bederson Ben Shneiderman]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase wordâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Upper Caseâ—¦Upper Case""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))))))))"	Bluetooth Application Programming with the Java APIs (The Morgan Kaufmann Series in Networking)->Bluetooth Application Programming With the Java Apis	Bluetooth Application Programming with the Java APIs (The Morgan Kaufmann Series in Networking)	Bluetooth Application Programming With the Java Apis	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Lowercase wordâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Upper Caseâ—¦Upper Case""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))))))))] [Transformation: Bluetooth Application Programming with the Java APIs (The Morgan Kaufmann Series in Networking) transforms to Bluetooth Application Programming With the Java Apis]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 2))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpaceâ—¦Lowercase word""), 1), RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1))), ConstStr(""PIs (The Morgan Kaufmann Series in Networking)""))))))"	Bluetooth Application Programming With the Java Apis->Bluetooth Application Programming with the Java APIs (The Morgan Kaufmann Series in Networking)	Bluetooth Application Programming With the Java Apis	Bluetooth Application Programming with the Java APIs (The Morgan Kaufmann Series in Networking)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 2))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpaceâ—¦Lowercase word""), 1), RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpaceâ—¦Lowercase word"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1))), ConstStr(""PIs (The Morgan Kaufmann Series in Networking)""))))))] [Transformation: Bluetooth Application Programming With the Java Apis transforms to Bluetooth Application Programming with the Java APIs (The Morgan Kaufmann Series in Networking)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" J.; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""imothy J.\"""")))))))))))))))"	"""C Bala Kumar, Paul Kline, Tim Thompson""->""Kumar, C. Bala; Kline, Paul J.; Thompson, Timothy J."""	"""C Bala Kumar, Paul Kline, Tim Thompson"""	"""Kumar, C. Bala; Kline, Paul J.; Thompson, Timothy J."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" J.; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""imothy J.\"""")))))))))))))))] [Transformation: ""C Bala Kumar, Paul Kline, Tim Thompson"" transforms to ""Kumar, C. Bala; Kline, Paul J.; Thompson, Timothy J.""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'â—¦Camel Case""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RelativePosition(x, -9))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))))))))"	"""Kumar, C. Bala; Kline, Paul J.; Thompson, Timothy J.""->""C Bala Kumar, Paul Kline, Tim Thompson"""	"""Kumar, C. Bala; Kline, Paul J.; Thompson, Timothy J."""	"""C Bala Kumar, Paul Kline, Tim Thompson"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'â—¦Camel Case""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RelativePosition(x, -9))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))))))))] [Transformation: ""Kumar, C. Bala; Kline, Paul J.; Thompson, Timothy J."" transforms to ""C Bala Kumar, Paul Kline, Tim Thompson""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" 5 ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""ALL CAPSâ—¦WhiteSpace"", ""Îµ""), 1), RelativePosition(x, -8)))))))"	UNIX(R) System V Network Programming->Unix System 5 Network Prog	UNIX(R) System V Network Programming	Unix System 5 Network Prog	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" 5 ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""ALL CAPSâ—¦WhiteSpace"", ""Îµ""), 1), RelativePosition(x, -8)))))))] [Transformation: UNIX(R) System V Network Programming transforms to Unix System 5 Network Prog]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1), RelativePosition(x, -3)))), Concat(ConstStr("") ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" V ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Numberâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1))), ConstStr(""rogramming""))))))))"	Unix System 5 Network Prog->UNIX(R) System V Network Programming	Unix System 5 Network Prog	UNIX(R) System V Network Programming	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1), RelativePosition(x, -3)))), Concat(ConstStr("") ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" V ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Numberâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1))), ConstStr(""rogramming""))))))))] [Transformation: Unix System 5 Network Prog transforms to UNIX(R) System V Network Programming]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr(""\"""")))))"	"Stephen A. Rago->""Rago, Stephen A"""	Stephen A. Rago	"""Rago, Stephen A"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr(""\"""")))))] [Transformation: Stephen A. Rago transforms to ""Rago, Stephen A""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Rago, Stephen A""->Stephen A. Rago"	"""Rago, Stephen A"""	Stephen A. Rago	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Rago, Stephen A"" transforms to Stephen A. Rago]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Understanding Data Communications (7th Edition)->Understanding Data Communications	Understanding Data Communications (7th Edition)	Understanding Data Communications	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Understanding Data Communications (7th Edition) transforms to Understanding Data Communications]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (7th Edition)""))"	Understanding Data Communications->Understanding Data Communications (7th Edition)	Understanding Data Communications	Understanding Data Communications (7th Edition)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (7th Edition)""))] [Transformation: Understanding Data Communications transforms to Understanding Data Communications (7th Edition)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Gilbert Held->""Held, Gilbert"""	Gilbert Held	"""Held, Gilbert"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Gilbert Held transforms to ""Held, Gilbert""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Held, Gilbert""->Gilbert Held"	"""Held, Gilbert"""	Gilbert Held	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Held, Gilbert"" transforms to Gilbert Held]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))"	The Theory of Computation->Theory of Computation	The Theory of Computation	Theory of Computation	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))] [Transformation: The Theory of Computation transforms to Theory of Computation]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 3))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x))"	Theory of Computation->The Theory of Computation	Theory of Computation	The Theory of Computation	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 3))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x))] [Transformation: Theory of Computation transforms to The Theory of Computation]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))"	"""Bernard M. Moret, Addison-Wesley, B. M. E. Moret""->Moret"	"""Bernard M. Moret, Addison-Wesley, B. M. E. Moret"""	Moret	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))] [Transformation: ""Bernard M. Moret, Addison-Wesley, B. M. E. Moret"" transforms to Moret]"
"Concat(ConstStr(""\""Bernard ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", Addison-Wesley, B. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("". E. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr(""\"""")))))))))"	"Moret->""Bernard M. Moret, Addison-Wesley, B. M. E. Moret"""	Moret	"""Bernard M. Moret, Addison-Wesley, B. M. E. Moret"""	"[Program: Concat(ConstStr(""\""Bernard ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", Addison-Wesley, B. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("". E. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr(""\"""")))))))))] [Transformation: Moret transforms to ""Bernard M. Moret, Addison-Wesley, B. M. E. Moret""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Camel Case""), -1))), Concat(ConstStr(""/""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr(""onverters (Edn ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""eries for ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), ConstStr("" Engineers)""))))))))"	Simplified Design of Voltage Frequency C->Simplified Design of Voltage/Frequency Converters (Edn Series for Design Engineers)	Simplified Design of Voltage Frequency C	Simplified Design of Voltage/Frequency Converters (Edn Series for Design Engineers)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Camel Case""), -1))), Concat(ConstStr(""/""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr(""onverters (Edn ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""eries for ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), ConstStr("" Engineers)""))))))))] [Transformation: Simplified Design of Voltage Frequency C transforms to Simplified Design of Voltage/Frequency Converters (Edn Series for Design Engineers)]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slash"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpaceâ—¦Left Parenthesis""), 1)))))"	Simplified Design of Voltage/Frequency Converters (Edn Series for Design Engineers)->Simplified Design of Voltage Frequency C	Simplified Design of Voltage/Frequency Converters (Edn Series for Design Engineers)	Simplified Design of Voltage Frequency C	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slash"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpaceâ—¦Left Parenthesis""), 1)))))] [Transformation: Simplified Design of Voltage/Frequency Converters (Edn Series for Design Engineers) transforms to Simplified Design of Voltage Frequency C]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Lenk, John D""->John Lenk"	"""Lenk, John D"""	John Lenk	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Lenk, John D"" transforms to John Lenk]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" D\"""")))))"	"John Lenk->""Lenk, John D"""	John Lenk	"""Lenk, John D"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" D\"""")))))] [Transformation: John Lenk transforms to ""Lenk, John D""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))"	"""Genetic Algorithms in Search, Optimization, and Machine Learning""->Genetic Algorithms"	"""Genetic Algorithms in Search, Optimization, and Machine Learning"""	Genetic Algorithms	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))] [Transformation: ""Genetic Algorithms in Search, Optimization, and Machine Learning"" transforms to Genetic Algorithms]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" in Search, Optimization, and Machine Learning\"""")))"	"Genetic Algorithms->""Genetic Algorithms in Search, Optimization, and Machine Learning"""	Genetic Algorithms	"""Genetic Algorithms in Search, Optimization, and Machine Learning"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" in Search, Optimization, and Machine Learning\"""")))] [Transformation: Genetic Algorithms transforms to ""Genetic Algorithms in Search, Optimization, and Machine Learning""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphen"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	White-Hat Security Arsenal: Tackling the Threats->White Hat Security Arsenal: Tackling the Threats	White-Hat Security Arsenal: Tackling the Threats	White Hat Security Arsenal: Tackling the Threats	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphen"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: White-Hat Security Arsenal: Tackling the Threats transforms to White Hat Security Arsenal: Tackling the Threats]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""-""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	White Hat Security Arsenal: Tackling the Threats->White-Hat Security Arsenal: Tackling the Threats	White Hat Security Arsenal: Tackling the Threats	White-Hat Security Arsenal: Tackling the Threats	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""-""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: White Hat Security Arsenal: Tackling the Threats transforms to White-Hat Security Arsenal: Tackling the Threats]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))"	"Aviel D. Rubin->""Rubin, Aviel D."""	Aviel D. Rubin	"""Rubin, Aviel D."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))] [Transformation: Aviel D. Rubin transforms to ""Rubin, Aviel D.""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Rubin, Aviel D.""->Aviel D. Rubin"	"""Rubin, Aviel D."""	Aviel D. Rubin	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Rubin, Aviel D."" transforms to Aviel D. Rubin]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	The OpenVMS User's Guide (HP Technologies)->OpenVMS User's Guide	The OpenVMS User's Guide (HP Technologies)	OpenVMS User's Guide	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: The OpenVMS User's Guide (HP Technologies) transforms to OpenVMS User's Guide]"
"Concat(ConstStr(""The ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (HP Technologies)"")))"	OpenVMS User's Guide->The OpenVMS User's Guide (HP Technologies)	OpenVMS User's Guide	The OpenVMS User's Guide (HP Technologies)	"[Program: Concat(ConstStr(""The ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (HP Technologies)"")))] [Transformation: OpenVMS User's Guide transforms to The OpenVMS User's Guide (HP Technologies)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Patrick Holmay->""Holmay, Patrick"""	Patrick Holmay	"""Holmay, Patrick"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Patrick Holmay transforms to ""Holmay, Patrick""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Holmay, Patrick""->Patrick Holmay"	"""Holmay, Patrick"""	Patrick Holmay	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Holmay, Patrick"" transforms to Patrick Holmay]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Plus""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""lus ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""lus ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))))"	Advanced C++ Programming Styles and Idioms->Advanced C Plus Plus Programming Styles and Idioms	Advanced C++ Programming Styles and Idioms	Advanced C Plus Plus Programming Styles and Idioms	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Plus""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""lus ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""lus ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))))] [Transformation: Advanced C++ Programming Styles and Idioms transforms to Advanced C Plus Plus Programming Styles and Idioms]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""++ ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Advanced C Plus Plus Programming Styles and Idioms->Advanced C++ Programming Styles and Idioms	Advanced C Plus Plus Programming Styles and Idioms	Advanced C++ Programming Styles and Idioms	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""++ ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Advanced C Plus Plus Programming Styles and Idioms transforms to Advanced C++ Programming Styles and Idioms]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".,\"""")))))"	"James O. Coplien->""Coplien, James O.,"""	James O. Coplien	"""Coplien, James O.,"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".,\"""")))))] [Transformation: James O. Coplien transforms to ""Coplien, James O.,""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Coplien, James O.,""->James O. Coplien"	"""Coplien, James O.,"""	James O. Coplien	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Coplien, James O.,"" transforms to James O. Coplien]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 50)))"	Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in Data Management Systems)->Database Transaction Models for Advanced Applicati	Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in Data Management Systems)	Database Transaction Models for Advanced Applicati	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 50)))] [Transformation: Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in Data Management Systems) transforms to Database Transaction Models for Advanced Applicati]"
"Concat(ConstStr(""Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 4))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpaceâ—¦Lowercase word""), 1))), ConstStr(""anagement Systems)"")))))"	Database Transaction Models for Advanced Applicati->Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in Data Management Systems)	Database Transaction Models for Advanced Applicati	Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in Data Management Systems)	"[Program: Concat(ConstStr(""Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 4))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpaceâ—¦Lowercase word""), 1))), ConstStr(""anagement Systems)"")))))] [Transformation: Database Transaction Models for Advanced Applicati transforms to Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in Data Management Systems)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), Concat(ConstStr("". (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""dt)\"""")))))"	"""Elmargarmid, Ahmed K.; Elmagarmid, Ahmed K.""->""Elmagarmid, Ahmed K. (Edt)"""	"""Elmargarmid, Ahmed K.; Elmagarmid, Ahmed K."""	"""Elmagarmid, Ahmed K. (Edt)"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), Concat(ConstStr("". (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""dt)\"""")))))] [Transformation: ""Elmargarmid, Ahmed K.; Elmagarmid, Ahmed K."" transforms to ""Elmagarmid, Ahmed K. (Edt)""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""lmargarmid, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))))"	"""Elmagarmid, Ahmed K. (Edt)""->""Elmargarmid, Ahmed K.; Elmagarmid, Ahmed K."""	"""Elmagarmid, Ahmed K. (Edt)"""	"""Elmargarmid, Ahmed K.; Elmagarmid, Ahmed K."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""lmargarmid, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))))] [Transformation: ""Elmagarmid, Ahmed K. (Edt)"" transforms to ""Elmargarmid, Ahmed K.; Elmagarmid, Ahmed K.""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""econd Edition\"""")))))"	"A Mathematical Introduction to Logic (Softcover)->""A Mathematical Introduction to Logic, Second Edition"""	A Mathematical Introduction to Logic (Softcover)	"""A Mathematical Introduction to Logic, Second Edition"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""econd Edition\"""")))))] [Transformation: A Mathematical Introduction to Logic (Softcover) transforms to ""A Mathematical Introduction to Logic, Second Edition""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""oftcover)""))))"	"""A Mathematical Introduction to Logic, Second Edition""->A Mathematical Introduction to Logic (Softcover)"	"""A Mathematical Introduction to Logic, Second Edition"""	A Mathematical Introduction to Logic (Softcover)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""oftcover)""))))] [Transformation: ""A Mathematical Introduction to Logic, Second Edition"" transforms to A Mathematical Introduction to Logic (Softcover)]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Enderton, Herbert B.""->Herbert B. Enderton"	"""Enderton, Herbert B."""	Herbert B. Enderton	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Enderton, Herbert B."" transforms to Herbert B. Enderton]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))"	"Herbert B. Enderton->""Enderton, Herbert B."""	Herbert B. Enderton	"""Enderton, Herbert B."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))] [Transformation: Herbert B. Enderton transforms to ""Enderton, Herbert B.""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	CMM in Practice: Processes for Executing Software Projects at Infosys (The SEI Series in Software Engineering)->CMM in Practice: Processes for Executing Software Projects at Infosys	CMM in Practice: Processes for Executing Software Projects at Infosys (The SEI Series in Software Engineering)	CMM in Practice: Processes for Executing Software Projects at Infosys	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: CMM in Practice: Processes for Executing Software Projects at Infosys (The SEI Series in Software Engineering) transforms to CMM in Practice: Processes for Executing Software Projects at Infosys]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (The ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Caseâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Lowercase wordâ—¦WhiteSpaceâ—¦ALL CAPS""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Caseâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""eries ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), 1), RegexPositionRelative(x, RegexPair(""Lowercase word"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Lowercase wordâ—¦WhiteSpaceâ—¦ALL CAPS""), 1))), ConstStr(""ngineering)""))))))))))))))"	CMM in Practice: Processes for Executing Software Projects at Infosys->CMM in Practice: Processes for Executing Software Projects at Infosys (The SEI Series in Software Engineering)	CMM in Practice: Processes for Executing Software Projects at Infosys	CMM in Practice: Processes for Executing Software Projects at Infosys (The SEI Series in Software Engineering)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (The ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Caseâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Lowercase wordâ—¦WhiteSpaceâ—¦ALL CAPS""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Caseâ—¦WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""eries ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), 1), RegexPositionRelative(x, RegexPair(""Lowercase word"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpaceâ—¦Camel Case""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Lowercase wordâ—¦WhiteSpaceâ—¦ALL CAPS""), 1))), ConstStr(""ngineering)""))))))))))))))] [Transformation: CMM in Practice: Processes for Executing Software Projects at Infosys transforms to CMM in Practice: Processes for Executing Software Projects at Infosys (The SEI Series in Software Engineering)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"""Pankaj Jalote, P. Jalote""->""Jalote, Pankaj"""	"""Pankaj Jalote, P. Jalote"""	"""Jalote, Pankaj"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: ""Pankaj Jalote, P. Jalote"" transforms to ""Jalote, Pankaj""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))))"	"""Jalote, Pankaj""->""Pankaj Jalote, P. Jalote"""	"""Jalote, Pankaj"""	"""Pankaj Jalote, P. Jalote"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))))] [Transformation: ""Jalote, Pankaj"" transforms to ""Pankaj Jalote, P. Jalote""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))"	Netspionage : The Global Threats to Information->Netspionage: The Global Threats to Information	Netspionage : The Global Threats to Information	Netspionage: The Global Threats to Information	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))] [Transformation: Netspionage : The Global Threats to Information transforms to Netspionage: The Global Threats to Information]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Netspionage: The Global Threats to Information->Netspionage : The Global Threats to Information	Netspionage: The Global Threats to Information	Netspionage : The Global Threats to Information	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Netspionage: The Global Threats to Information transforms to Netspionage : The Global Threats to Information]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))))))"	"""William C. Boni, Gerald L. Kovacich""->""Boni, William C.; Kovacich, Gerald"""	"""William C. Boni, Gerald L. Kovacich"""	"""Boni, William C.; Kovacich, Gerald"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))))))] [Transformation: ""William C. Boni, Gerald L. Kovacich"" transforms to ""Boni, William C.; Kovacich, Gerald""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" L. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))"	"""Boni, William C.; Kovacich, Gerald""->""William C. Boni, Gerald L. Kovacich"""	"""Boni, William C.; Kovacich, Gerald"""	"""William C. Boni, Gerald L. Kovacich"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" L. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Boni, William C.; Kovacich, Gerald"" transforms to ""William C. Boni, Gerald L. Kovacich""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" &amp; ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RelativePosition(x, -6))))))"	Photoshop and Dreamweaver Integration->PHOTOSHOP &amp; DREAMWEAVER INTEGR	Photoshop and Dreamweaver Integration	PHOTOSHOP &amp; DREAMWEAVER INTEGR	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" &amp; ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RelativePosition(x, -6))))))] [Transformation: Photoshop and Dreamweaver Integration transforms to PHOTOSHOP &amp; DREAMWEAVER INTEGR]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" and ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpaceâ—¦Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpaceâ—¦Upper Case"", ""Îµ""), 1)))), ConstStr(""ntegration""))))"	PHOTOSHOP &amp; DREAMWEAVER INTEGR->Photoshop and Dreamweaver Integration	PHOTOSHOP &amp; DREAMWEAVER INTEGR	Photoshop and Dreamweaver Integration	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" and ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpaceâ—¦Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpaceâ—¦Upper Case"", ""Îµ""), 1)))), ConstStr(""ntegration""))))] [Transformation: PHOTOSHOP &amp; DREAMWEAVER INTEGR transforms to Photoshop and Dreamweaver Integration]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("", Colin\"""")))"	"SMITH->""Smith, Colin"""	SMITH	"""Smith, Colin"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("", Colin\"""")))] [Transformation: SMITH transforms to ""Smith, Colin""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))"	"""Smith, Colin""->SMITH"	"""Smith, Colin"""	SMITH	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))] [Transformation: ""Smith, Colin"" transforms to SMITH]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))))"	"""The Java Developers Almanac 1.4, Volume 2: Examples and Quick Reference (4th Edition)""->The Java Developers Almanac 1.4: Examples and Quick Reference"	"""The Java Developers Almanac 1.4, Volume 2: Examples and Quick Reference (4th Edition)"""	The Java Developers Almanac 1.4: Examples and Quick Reference	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))))] [Transformation: ""The Java Developers Almanac 1.4, Volume 2: Examples and Quick Reference (4th Edition)"" transforms to The Java Developers Almanac 1.4: Examples and Quick Reference]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("", Volume ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in let sharedParsedDt = ParsePartialDateTime(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), [""H""]) in let sharedDtFormat = ""H"" in DtRangeConcat(RangeFormatDateTime(RangeRoundDateTime(sharedParsedDt, ""({Hour=2, Minute=0, Second=0, Millisecond=0, HourInPeriod=2, Period=0}, 3, Hour, Down, , 0)""), sharedDtFormat), DtRangeConcat(DtRangeConstStr("": Examples and Quick Reference (""), RangeFormatDateTime(RangeRoundDateTime(sharedParsedDt, ""({Hour=2, Minute=0, Second=0, Millisecond=0, HourInPeriod=2, Period=0}, 3, Hour, UpOrNext, Hour, 1)""), sharedDtFormat))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 2)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦',' or 'and'""), 1))), ConstStr(""dition)\""""))))))))"	"The Java Developers Almanac 1.4: Examples and Quick Reference->""The Java Developers Almanac 1.4, Volume 2: Examples and Quick Reference (4th Edition)"""	The Java Developers Almanac 1.4: Examples and Quick Reference	"""The Java Developers Almanac 1.4, Volume 2: Examples and Quick Reference (4th Edition)"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("", Volume ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in let sharedParsedDt = ParsePartialDateTime(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), [""H""]) in let sharedDtFormat = ""H"" in DtRangeConcat(RangeFormatDateTime(RangeRoundDateTime(sharedParsedDt, ""({Hour=2, Minute=0, Second=0, Millisecond=0, HourInPeriod=2, Period=0}, 3, Hour, Down, , 0)""), sharedDtFormat), DtRangeConcat(DtRangeConstStr("": Examples and Quick Reference (""), RangeFormatDateTime(RangeRoundDateTime(sharedParsedDt, ""({Hour=2, Minute=0, Second=0, Millisecond=0, HourInPeriod=2, Period=0}, 3, Hour, UpOrNext, Hour, 1)""), sharedDtFormat))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 2)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦',' or 'and'""), 1))), ConstStr(""dition)\""""))))))))] [Transformation: The Java Developers Almanac 1.4: Examples and Quick Reference transforms to ""The Java Developers Almanac 1.4, Volume 2: Examples and Quick Reference (4th Edition)""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))"	"""Patrick Chan, Lan-Ahn Dang""->""Chan, Patrick; Dang, Lan-Ahn"""	"""Patrick Chan, Lan-Ahn Dang"""	"""Chan, Patrick; Dang, Lan-Ahn"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Patrick Chan, Lan-Ahn Dang"" transforms to ""Chan, Patrick; Dang, Lan-Ahn""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))"	"""Chan, Patrick; Dang, Lan-Ahn""->""Patrick Chan, Lan-Ahn Dang"""	"""Chan, Patrick; Dang, Lan-Ahn"""	"""Patrick Chan, Lan-Ahn Dang"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Chan, Patrick; Dang, Lan-Ahn"" transforms to ""Patrick Chan, Lan-Ahn Dang""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1)))"	The Guru's Guide to SQL Server Architecture and Internals->The Guru's Guide to SQL Server Architecture	The Guru's Guide to SQL Server Architecture and Internals	The Guru's Guide to SQL Server Architecture	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1)))] [Transformation: The Guru's Guide to SQL Server Architecture and Internals transforms to The Guru's Guide to SQL Server Architecture]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" and Internals""))"	The Guru's Guide to SQL Server Architecture->The Guru's Guide to SQL Server Architecture and Internals	The Guru's Guide to SQL Server Architecture	The Guru's Guide to SQL Server Architecture and Internals	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" and Internals""))] [Transformation: The Guru's Guide to SQL Server Architecture transforms to The Guru's Guide to SQL Server Architecture and Internals]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Ken Henderson->""Henderson, Ken"""	Ken Henderson	"""Henderson, Ken"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Ken Henderson transforms to ""Henderson, Ken""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Henderson, Ken""->Ken Henderson"	"""Henderson, Ken"""	Ken Henderson	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Henderson, Ken"" transforms to Ken Henderson]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1), RelativePosition(x, -8)))), ConstStr(""ssential C++""))"	Idioms of the Greek New Testament->Essential C++	Idioms of the Greek New Testament	Essential C++	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1), RelativePosition(x, -8)))), ConstStr(""ssential C++""))] [Transformation: Idioms of the Greek New Testament transforms to Essential C++]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RelativePosition(x, 6), RelativePosition(x, 7)))), ConstStr(""dioms of the Greek New Testament""))"	Essential C++->Idioms of the Greek New Testament	Essential C++	Idioms of the Greek New Testament	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RelativePosition(x, 6), RelativePosition(x, 7)))), ConstStr(""dioms of the Greek New Testament""))] [Transformation: Essential C++ transforms to Idioms of the Greek New Testament]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))"	"Stanley B. Lippman->""Lippman, Stanley B."""	Stanley B. Lippman	"""Lippman, Stanley B."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr("".\"""")))))] [Transformation: Stanley B. Lippman transforms to ""Lippman, Stanley B.""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Lippman, Stanley B.""->Stanley B. Lippman"	"""Lippman, Stanley B."""	Stanley B. Lippman	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Lippman, Stanley B."" transforms to Stanley B. Lippman]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphen"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))))"	Project-Based Software Engineering: An Object-Oriented Approach->Project Based Software Engineering	Project-Based Software Engineering: An Object-Oriented Approach	Project Based Software Engineering	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphen"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))))] [Transformation: Project-Based Software Engineering: An Object-Oriented Approach transforms to Project Based Software Engineering]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""-""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("": An Object-Oriented Approach""))))"	Project Based Software Engineering->Project-Based Software Engineering: An Object-Oriented Approach	Project Based Software Engineering	Project-Based Software Engineering: An Object-Oriented Approach	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""-""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("": An Object-Oriented Approach""))))] [Transformation: Project Based Software Engineering transforms to Project-Based Software Engineering: An Object-Oriented Approach]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))"	"""Stiller, Evelyn; Leblanc, Cathie""->Stiller"	"""Stiller, Evelyn; Leblanc, Cathie"""	Stiller	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))] [Transformation: ""Stiller, Evelyn; Leblanc, Cathie"" transforms to Stiller]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Evelyn; Leblanc, Cathie\"""")))"	"Stiller->""Stiller, Evelyn; Leblanc, Cathie"""	Stiller	"""Stiller, Evelyn; Leblanc, Cathie"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Evelyn; Leblanc, Cathie\"""")))] [Transformation: Stiller transforms to ""Stiller, Evelyn; Leblanc, Cathie""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" &amp; ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Problem Solving And Programming Concepts->Problem Solving &amp; Programming Concepts	Problem Solving And Programming Concepts	Problem Solving &amp; Programming Concepts	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" &amp; ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Problem Solving And Programming Concepts transforms to Problem Solving &amp; Programming Concepts]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Ampersand""), 1))), Concat(ConstStr("" And ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Problem Solving &amp; Programming Concepts->Problem Solving And Programming Concepts	Problem Solving &amp; Programming Concepts	Problem Solving And Programming Concepts	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Ampersand""), 1))), Concat(ConstStr("" And ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Problem Solving &amp; Programming Concepts transforms to Problem Solving And Programming Concepts]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))"	"""Sprankle, Maureen""->Sprankle"	"""Sprankle, Maureen"""	Sprankle	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))] [Transformation: ""Sprankle, Maureen"" transforms to Sprankle]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Maureen\"""")))"	"Sprankle->""Sprankle, Maureen"""	Sprankle	"""Sprankle, Maureen"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Maureen\"""")))] [Transformation: Sprankle transforms to ""Sprankle, Maureen""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("" &amp; ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -9)))))))))"	"""Mpls Network Management: Mibs, Tools, and Techniques""->Mpls Network Management Mibs Tools &amp; Tec"	"""Mpls Network Management: Mibs, Tools, and Techniques"""	Mpls Network Management Mibs Tools &amp; Tec	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("" &amp; ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -9)))))))))] [Transformation: ""Mpls Network Management: Mibs, Tools, and Techniques"" transforms to Mpls Network Management Mibs Tools &amp; Tec]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 2))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpaceâ—¦Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Ampersand""), 1))), Concat(ConstStr("", and ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""echniques\"""")))))))))"	"Mpls Network Management Mibs Tools &amp; Tec->""Mpls Network Management: Mibs, Tools, and Techniques"""	Mpls Network Management Mibs Tools &amp; Tec	"""Mpls Network Management: Mibs, Tools, and Techniques"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 2))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpaceâ—¦Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Ampersand""), 1))), Concat(ConstStr("", and ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""echniques\"""")))))))))] [Transformation: Mpls Network Management Mibs Tools &amp; Tec transforms to ""Mpls Network Management: Mibs, Tools, and Techniques""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr(""\"""")))"	"""Nadeau, Thomas D.""->""Nadeau, Thomas D"""	"""Nadeau, Thomas D."""	"""Nadeau, Thomas D"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), ConstStr(""\"""")))] [Transformation: ""Nadeau, Thomas D."" transforms to ""Nadeau, Thomas D""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr("".\"""")))"	"""Nadeau, Thomas D""->""Nadeau, Thomas D."""	"""Nadeau, Thomas D"""	"""Nadeau, Thomas D."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1))), ConstStr("".\"""")))] [Transformation: ""Nadeau, Thomas D"" transforms to ""Nadeau, Thomas D.""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 2)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -2), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("" [Hardcover] by.\"""")))))))))"	"Discrete Mathematics With Combinatorics Second Edition->""Discrete Mathematics with Combinatorics, Second Edition [Hardcover] by."""	Discrete Mathematics With Combinatorics Second Edition	"""Discrete Mathematics with Combinatorics, Second Edition [Hardcover] by."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 2)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -2), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("" [Hardcover] by.\"""")))))))))] [Transformation: Discrete Mathematics With Combinatorics Second Edition transforms to ""Discrete Mathematics with Combinatorics, Second Edition [Hardcover] by.""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Bracket""), 1)))))"	"""Discrete Mathematics with Combinatorics, Second Edition [Hardcover] by.""->Discrete Mathematics With Combinatorics Second Edition"	"""Discrete Mathematics with Combinatorics, Second Edition [Hardcover] by."""	Discrete Mathematics With Combinatorics Second Edition	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Bracket""), 1)))))] [Transformation: ""Discrete Mathematics with Combinatorics, Second Edition [Hardcover] by."" transforms to Discrete Mathematics With Combinatorics Second Edition]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""\""Anderson, James A.\"""": ""0""})"	"""Anderson, James A.""->0"	"""Anderson, James A."""	0	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""\""Anderson, James A.\"""": ""0""})] [Transformation: ""Anderson, James A."" transforms to 0]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""0"": ""\""Anderson, James A.\""""})"	"0->""Anderson, James A."""	0	"""Anderson, James A."""	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""0"": ""\""Anderson, James A.\""""})] [Transformation: 0 transforms to ""Anderson, James A.""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Ampersand""), 1))), Concat(ConstStr("" and ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -2))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""nalysis""))))))"	Distributed Operating Systems &amp; Algorithms->Distributed Operating Systems and Algorithm Analysis	Distributed Operating Systems &amp; Algorithms	Distributed Operating Systems and Algorithm Analysis	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Ampersand""), 1))), Concat(ConstStr("" and ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -2))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""nalysis""))))))] [Transformation: Distributed Operating Systems &amp; Algorithms transforms to Distributed Operating Systems and Algorithm Analysis]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1))), Concat(ConstStr("" &amp; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""lgorithms""))))"	Distributed Operating Systems and Algorithm Analysis->Distributed Operating Systems &amp; Algorithms	Distributed Operating Systems and Algorithm Analysis	Distributed Operating Systems &amp; Algorithms	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1))), Concat(ConstStr("" &amp; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""lgorithms""))))] [Transformation: Distributed Operating Systems and Algorithm Analysis transforms to Distributed Operating Systems &amp; Algorithms]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", RandyJohnson, Theodore\"""")))"	"Chow->""Chow, RandyJohnson, Theodore"""	Chow	"""Chow, RandyJohnson, Theodore"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", RandyJohnson, Theodore\"""")))] [Transformation: Chow transforms to ""Chow, RandyJohnson, Theodore""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))"	"""Chow, RandyJohnson, Theodore""->Chow"	"""Chow, RandyJohnson, Theodore"""	Chow	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))] [Transformation: ""Chow, RandyJohnson, Theodore"" transforms to Chow]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("": A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)""))"	Subdivision Methods for Geometric Design->Subdivision Methods for Geometric Design: A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)	Subdivision Methods for Geometric Design	Subdivision Methods for Geometric Design: A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("": A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)""))] [Transformation: Subdivision Methods for Geometric Design transforms to Subdivision Methods for Geometric Design: A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))"	Subdivision Methods for Geometric Design: A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)->Subdivision Methods for Geometric Design	Subdivision Methods for Geometric Design: A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)	Subdivision Methods for Geometric Design	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))] [Transformation: Subdivision Methods for Geometric Design: A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics) transforms to Subdivision Methods for Geometric Design]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; Henrik ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""eimer""))))))"	"""Warren, Joe""->Joe Warren; Henrik Weimer"	"""Warren, Joe"""	Joe Warren; Henrik Weimer	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; Henrik ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""eimer""))))))] [Transformation: ""Warren, Joe"" transforms to Joe Warren; Henrik Weimer]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Joe Warren; Henrik Weimer->""Warren, Joe"""	Joe Warren; Henrik Weimer	"""Warren, Joe"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Joe Warren; Henrik Weimer transforms to ""Warren, Joe""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (The Morgan Kaufmann Series ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr("" Artificial Intelligence)""))))"	Evolutionary Computation in Bioinformatics->Evolutionary Computation in Bioinformatics (The Morgan Kaufmann Series in Artificial Intelligence)	Evolutionary Computation in Bioinformatics	Evolutionary Computation in Bioinformatics (The Morgan Kaufmann Series in Artificial Intelligence)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (The Morgan Kaufmann Series ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr("" Artificial Intelligence)""))))] [Transformation: Evolutionary Computation in Bioinformatics transforms to Evolutionary Computation in Bioinformatics (The Morgan Kaufmann Series in Artificial Intelligence)]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Evolutionary Computation in Bioinformatics (The Morgan Kaufmann Series in Artificial Intelligence)->Evolutionary Computation in Bioinformatics	Evolutionary Computation in Bioinformatics (The Morgan Kaufmann Series in Artificial Intelligence)	Evolutionary Computation in Bioinformatics	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Evolutionary Computation in Bioinformatics (The Morgan Kaufmann Series in Artificial Intelligence) transforms to Evolutionary Computation in Bioinformatics]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr(""~David W. Corne""))"	Gary B. Fogel->Gary B. Fogel~David W. Corne	Gary B. Fogel	Gary B. Fogel~David W. Corne	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr(""~David W. Corne""))] [Transformation: Gary B. Fogel transforms to Gary B. Fogel~David W. Corne]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Tilde""), 1)))"	Gary B. Fogel~David W. Corne->Gary B. Fogel	Gary B. Fogel~David W. Corne	Gary B. Fogel	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Tilde""), 1)))] [Transformation: Gary B. Fogel~David W. Corne transforms to Gary B. Fogel]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Trucluster Server Handbook (Hp Technologies)->Trucluster Server Handbook	Trucluster Server Handbook (Hp Technologies)	Trucluster Server Handbook	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Trucluster Server Handbook (Hp Technologies) transforms to Trucluster Server Handbook]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""p ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""echnologies)""))))))"	Trucluster Server Handbook->Trucluster Server Handbook (Hp Technologies)	Trucluster Server Handbook	Trucluster Server Handbook (Hp Technologies)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""p ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""echnologies)""))))))] [Transformation: Trucluster Server Handbook transforms to Trucluster Server Handbook (Hp Technologies)]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Fafrak, Scott; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad""->Scott Fafrak"	"""Fafrak, Scott; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad"""	Scott Fafrak	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Fafrak, Scott; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad"" transforms to Scott Fafrak]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad\"""")))))"	"Scott Fafrak->""Fafrak, Scott; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad"""	Scott Fafrak	"""Fafrak, Scott; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad\"""")))))] [Transformation: Scott Fafrak transforms to ""Fafrak, Scott; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Lowercase word"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1)))))))"	HackNotes(tm) Windows Security Portable Reference->Windows Security Portable Reference: Hack Notes	HackNotes(tm) Windows Security Portable Reference	Windows Security Portable Reference: Hack Notes	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr("": ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Lowercase word"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1)))))))] [Transformation: HackNotes(tm) Windows Security Portable Reference transforms to Windows Security Portable Reference: Hack Notes]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr(""(tm) ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))))"	Windows Security Portable Reference: Hack Notes->HackNotes(tm) Windows Security Portable Reference	Windows Security Portable Reference: Hack Notes	HackNotes(tm) Windows Security Portable Reference	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr(""(tm) ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))))] [Transformation: Windows Security Portable Reference: Hack Notes transforms to HackNotes(tm) Windows Security Portable Reference]"
"Concat(ConstStr(""\""Viotto, Kate""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1))))"	"""O'Dea, Michael""->""Viotto, Kate"""	"""O'Dea, Michael"""	"""Viotto, Kate"""	"[Program: Concat(ConstStr(""\""Viotto, Kate""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1))))] [Transformation: ""O'Dea, Michael"" transforms to ""Viotto, Kate""]"
"Concat(ConstStr(""\""O'Dea, Michael""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1))))"	"""Viotto, Kate""->""O'Dea, Michael"""	"""Viotto, Kate"""	"""O'Dea, Michael"""	"[Program: Concat(ConstStr(""\""O'Dea, Michael""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1))))] [Transformation: ""Viotto, Kate"" transforms to ""O'Dea, Michael""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" - ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slash"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))"	The Oracle(R) Designer/2000 Handbook->The Oracle Designer - 2000 Handbook	The Oracle(R) Designer/2000 Handbook	The Oracle Designer - 2000 Handbook	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" - ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slash"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))] [Transformation: The Oracle(R) Designer/2000 Handbook transforms to The Oracle Designer - 2000 Handbook]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1), RelativePosition(x, 6)))), Concat(ConstStr("") ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Hyphen""), 1))), Concat(ConstStr(""/""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))))"	The Oracle Designer - 2000 Handbook->The Oracle(R) Designer/2000 Handbook	The Oracle Designer - 2000 Handbook	The Oracle(R) Designer/2000 Handbook	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1), RelativePosition(x, 6)))), Concat(ConstStr("") ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Hyphen""), 1))), Concat(ConstStr(""/""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))))] [Transformation: The Oracle Designer - 2000 Handbook transforms to The Oracle(R) Designer/2000 Handbook]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr("",\"""")))))"	"Carrie Anderson David Wendelken->""Wendelken, David,"""	Carrie Anderson David Wendelken	"""Wendelken, David,"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr("",\"""")))))] [Transformation: Carrie Anderson David Wendelken transforms to ""Wendelken, David,""]"
"Concat(ConstStr(""Carrie Anderson ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))))"	"""Wendelken, David,""->Carrie Anderson David Wendelken"	"""Wendelken, David,"""	Carrie Anderson David Wendelken	"[Program: Concat(ConstStr(""Carrie Anderson ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))))] [Transformation: ""Wendelken, David,"" transforms to Carrie Anderson David Wendelken]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))), ConstStr("" -OS""))"	LDAP Directories Explained: An Introduction and Analysis->LDAP DIRECTORIES EXPLAINED -OS	LDAP Directories Explained: An Introduction and Analysis	LDAP DIRECTORIES EXPLAINED -OS	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))), ConstStr("" -OS""))] [Transformation: LDAP Directories Explained: An Introduction and Analysis transforms to LDAP DIRECTORIES EXPLAINED -OS]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))), ConstStr("": An Introduction and Analysis""))))"	LDAP DIRECTORIES EXPLAINED -OS->LDAP Directories Explained: An Introduction and Analysis	LDAP DIRECTORIES EXPLAINED -OS	LDAP Directories Explained: An Introduction and Analysis	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))), ConstStr("": An Introduction and Analysis""))))] [Transformation: LDAP DIRECTORIES EXPLAINED -OS transforms to LDAP Directories Explained: An Introduction and Analysis]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Brian Arkills->""Arkills, Brian"""	Brian Arkills	"""Arkills, Brian"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Brian Arkills transforms to ""Arkills, Brian""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Arkills, Brian""->Brian Arkills"	"""Arkills, Brian"""	Brian Arkills	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Arkills, Brian"" transforms to Brian Arkills]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))))"	Advanced Use Case Modeling : Software Systems (Paperback)->Advanced Use Case Modeling: Software Systems	Advanced Use Case Modeling : Software Systems (Paperback)	Advanced Use Case Modeling: Software Systems	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))))] [Transformation: Advanced Use Case Modeling : Software Systems (Paperback) transforms to Advanced Use Case Modeling: Software Systems]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("" (Paperback)""))))"	Advanced Use Case Modeling: Software Systems->Advanced Use Case Modeling : Software Systems (Paperback)	Advanced Use Case Modeling: Software Systems	Advanced Use Case Modeling : Software Systems (Paperback)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("" (Paperback)""))))] [Transformation: Advanced Use Case Modeling: Software Systems transforms to Advanced Use Case Modeling : Software Systems (Paperback)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))"	"""Frank Armour , Granville Miller""->""Armour, Frank, Miller, Granville"""	"""Frank Armour , Granville Miller"""	"""Armour, Frank, Miller, Granville"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Frank Armour , Granville Miller"" transforms to ""Armour, Frank, Miller, Granville""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" , ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))"	"""Armour, Frank, Miller, Granville""->""Frank Armour , Granville Miller"""	"""Armour, Frank, Miller, Granville"""	"""Frank Armour , Granville Miller"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" , ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Armour, Frank, Miller, Granville"" transforms to ""Frank Armour , Granville Miller""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Juniper Networks(R) Field Guide and Reference->Juniper Networks Field Guide and Reference	Juniper Networks(R) Field Guide and Reference	Juniper Networks Field Guide and Reference	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Juniper Networks(R) Field Guide and Reference transforms to Juniper Networks Field Guide and Reference]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr("") ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))"	Juniper Networks Field Guide and Reference->Juniper Networks(R) Field Guide and Reference	Juniper Networks Field Guide and Reference	Juniper Networks(R) Field Guide and Reference	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr("") ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))] [Transformation: Juniper Networks Field Guide and Reference transforms to Juniper Networks(R) Field Guide and Reference]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Garrett, AvivaDrenan, GaryMorris, CrisJuniper&reg; Networks""->Aviva Garrett"	"""Garrett, AvivaDrenan, GaryMorris, CrisJuniper&reg; Networks"""	Aviva Garrett	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Camel Case"", ""Îµ""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Garrett, AvivaDrenan, GaryMorris, CrisJuniper&reg; Networks"" transforms to Aviva Garrett]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""Drenan, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""aryMorris, CrisJuniper&reg; Networks\"""")))))))"	"Aviva Garrett->""Garrett, AvivaDrenan, GaryMorris, CrisJuniper&reg; Networks"""	Aviva Garrett	"""Garrett, AvivaDrenan, GaryMorris, CrisJuniper&reg; Networks"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""Drenan, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""aryMorris, CrisJuniper&reg; Networks\"""")))))))] [Transformation: Aviva Garrett transforms to ""Garrett, AvivaDrenan, GaryMorris, CrisJuniper&reg; Networks""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (MicrosoftN""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""T Development Series)""))))"	Essential Windows Workflow Foundation->Essential Windows Workflow Foundation (MicrosoftNET Development Series)	Essential Windows Workflow Foundation	Essential Windows Workflow Foundation (MicrosoftNET Development Series)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (MicrosoftN""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""T Development Series)""))))] [Transformation: Essential Windows Workflow Foundation transforms to Essential Windows Workflow Foundation (MicrosoftNET Development Series)]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Essential Windows Workflow Foundation (MicrosoftNET Development Series)->Essential Windows Workflow Foundation	Essential Windows Workflow Foundation (MicrosoftNET Development Series)	Essential Windows Workflow Foundation	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Essential Windows Workflow Foundation (MicrosoftNET Development Series) transforms to Essential Windows Workflow Foundation]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))"	"""Shukla, Dharma, Schmidt, Bob""->""Dharma Shukla, Bob Schmidt"""	"""Shukla, Dharma, Schmidt, Bob"""	"""Dharma Shukla, Bob Schmidt"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Shukla, Dharma, Schmidt, Bob"" transforms to ""Dharma Shukla, Bob Schmidt""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))"	"""Dharma Shukla, Bob Schmidt""->""Shukla, Dharma, Schmidt, Bob"""	"""Dharma Shukla, Bob Schmidt"""	"""Shukla, Dharma, Schmidt, Bob"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Dharma Shukla, Bob Schmidt"" transforms to ""Shukla, Dharma, Schmidt, Bob""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("" - ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Left Parenthesis"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Left Parenthesisâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""tory of ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphen"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Hyphenâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""2""))))))))"	Building an Object-Oriented Database System (The Morgan Kaufmann Series in Data Management Systems)->Building an Object-Oriented Database System - The Story of O2	Building an Object-Oriented Database System (The Morgan Kaufmann Series in Data Management Systems)	Building an Object-Oriented Database System - The Story of O2	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("" - ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Left Parenthesis"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Left Parenthesisâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""tory of ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphen"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Hyphenâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""2""))))))))] [Transformation: Building an Object-Oriented Database System (The Morgan Kaufmann Series in Data Management Systems) transforms to Building an Object-Oriented Database System - The Story of O2]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Hyphen""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphenâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Camel Case""), -1))), ConstStr("" Morgan Kaufmann Series in Data Management Systems)""))))"	Building an Object-Oriented Database System - The Story of O2->Building an Object-Oriented Database System (The Morgan Kaufmann Series in Data Management Systems)	Building an Object-Oriented Database System - The Story of O2	Building an Object-Oriented Database System (The Morgan Kaufmann Series in Data Management Systems)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Hyphen""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Hyphenâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Camel Case""), -1))), ConstStr("" Morgan Kaufmann Series in Data Management Systems)""))))] [Transformation: Building an Object-Oriented Database System - The Story of O2 transforms to Building an Object-Oriented Database System (The Morgan Kaufmann Series in Data Management Systems)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("";""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("";""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦ALL CAPS"", ""Îµ""), 1))), ConstStr("".,\"""")))))))))))))))"	"""Francois Bancilhon, Claude Delobel, Paris Kanellakis""->""Bancilhon, Francois;Delobel, Claude;Kanellakis, Paris C.,"""	"""Francois Bancilhon, Claude Delobel, Paris Kanellakis"""	"""Bancilhon, Francois;Delobel, Claude;Kanellakis, Paris C.,"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("";""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("";""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦ALL CAPS"", ""Îµ""), 1))), ConstStr("".,\"""")))))))))))))))] [Transformation: ""Francois Bancilhon, Claude Delobel, Paris Kanellakis"" transforms to ""Bancilhon, Francois;Delobel, Claude;Kanellakis, Paris C.,""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Semicolon""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Commaâ—¦WhiteSpace""), -1))), ConstStr(""\"""")))))))))))))"	"""Bancilhon, Francois;Delobel, Claude;Kanellakis, Paris C.,""->""Francois Bancilhon, Claude Delobel, Paris Kanellakis"""	"""Bancilhon, Francois;Delobel, Claude;Kanellakis, Paris C.,"""	"""Francois Bancilhon, Claude Delobel, Paris Kanellakis"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Semicolon""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Commaâ—¦WhiteSpace""), -1))), ConstStr(""\"""")))))))))))))] [Transformation: ""Bancilhon, Francois;Delobel, Claude;Kanellakis, Paris C.,"" transforms to ""Francois Bancilhon, Claude Delobel, Paris Kanellakis""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("" (7th Edition) (International Computer Science Series)""))"	SOFTWARE ENGINEERING->Software Engineering (7th Edition) (International Computer Science Series)	SOFTWARE ENGINEERING	Software Engineering (7th Edition) (International Computer Science Series)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("" (7th Edition) (International Computer Science Series)""))] [Transformation: SOFTWARE ENGINEERING transforms to Software Engineering (7th Edition) (International Computer Science Series)]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))))"	Software Engineering (7th Edition) (International Computer Science Series)->SOFTWARE ENGINEERING	Software Engineering (7th Edition) (International Computer Science Series)	SOFTWARE ENGINEERING	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))))] [Transformation: Software Engineering (7th Edition) (International Computer Science Series) transforms to SOFTWARE ENGINEERING]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""SOMMERVILL"": ""N/A""})"	SOMMERVILL->N/A	SOMMERVILL	N/A	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""SOMMERVILL"": ""N/A""})] [Transformation: SOMMERVILL transforms to N/A]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""N/A"": ""SOMMERVILL""})"	N/A->SOMMERVILL	N/A	SOMMERVILL	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some ""N/A"": ""SOMMERVILL""})] [Transformation: N/A transforms to SOMMERVILL]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))), ConstStr("" &amp;""))))"	"""Security Education, Awareness, and Training : SEAT from Theory to Practice""->SECURITY EDUCATION AWARENESS &amp;"	"""Security Education, Awareness, and Training : SEAT from Theory to Practice"""	SECURITY EDUCATION AWARENESS &amp;	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))), ConstStr("" &amp;""))))] [Transformation: ""Security Education, Awareness, and Training : SEAT from Theory to Practice"" transforms to SECURITY EDUCATION AWARENESS &amp;]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), ConstStr("", Awareness, and Training : SEAT from Theory to Practice\"""")))"	"SECURITY EDUCATION AWARENESS &amp;->""Security Education, Awareness, and Training : SEAT from Theory to Practice"""	SECURITY EDUCATION AWARENESS &amp;	"""Security Education, Awareness, and Training : SEAT from Theory to Practice"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), ConstStr("", Awareness, and Training : SEAT from Theory to Practice\"""")))] [Transformation: SECURITY EDUCATION AWARENESS &amp; transforms to ""Security Education, Awareness, and Training : SEAT from Theory to Practice""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"""Carl Roper, Dr. Lynn Fischer, Joseph A. Grau""->""Roper, Carl"""	"""Carl Roper, Dr. Lynn Fischer, Joseph A. Grau"""	"""Roper, Carl"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: ""Carl Roper, Dr. Lynn Fischer, Joseph A. Grau"" transforms to ""Roper, Carl""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", D""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1)))), ConstStr("". Lynn Fischer, Joseph A. Grau\"""")))))))"	"""Roper, Carl""->""Carl Roper, Dr. Lynn Fischer, Joseph A. Grau"""	"""Roper, Carl"""	"""Carl Roper, Dr. Lynn Fischer, Joseph A. Grau"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", D""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1)))), ConstStr("". Lynn Fischer, Joseph A. Grau\"""")))))))] [Transformation: ""Roper, Carl"" transforms to ""Carl Roper, Dr. Lynn Fischer, Joseph A. Grau""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦Single Quote""), 1)))), Concat(ConstStr(""dministratorandapos;""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Single Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))))"	Digital UNIX System Administrator's Guide (HP Technologies)->Digital Unix System Administratorandapos;s Guide	Digital UNIX System Administrator's Guide (HP Technologies)	Digital Unix System Administratorandapos;s Guide	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦Single Quote""), 1)))), Concat(ConstStr(""dministratorandapos;""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Single Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))))] [Transformation: Digital UNIX System Administrator's Guide (HP Technologies) transforms to Digital Unix System Administratorandapos;s Guide]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1), RelativePosition(x, -16))), Concat(ConstStr(""'""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("" (HP Technologies)""))))))))"	Digital Unix System Administratorandapos;s Guide->Digital UNIX System Administrator's Guide (HP Technologies)	Digital Unix System Administratorandapos;s Guide	Digital UNIX System Administrator's Guide (HP Technologies)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1), RelativePosition(x, -16))), Concat(ConstStr(""'""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("" (HP Technologies)""))))))))] [Transformation: Digital Unix System Administratorandapos;s Guide transforms to Digital UNIX System Administrator's Guide (HP Technologies)]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Cheek, Matthew""->Matthew Cheek"	"""Cheek, Matthew"""	Matthew Cheek	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Cheek, Matthew"" transforms to Matthew Cheek]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Matthew Cheek->""Cheek, Matthew"""	Matthew Cheek	"""Cheek, Matthew"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Matthew Cheek transforms to ""Cheek, Matthew""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), Concat(ConstStr(""/""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Right Parenthesis""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦Right Parenthesis""), 1)))), ConstStr(""\"""")))))))"	"Programming Pearls (2nd Edition) (Paperback)->""Programming Pearls, 2/e"""	Programming Pearls (2nd Edition) (Paperback)	"""Programming Pearls, 2/e"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), Concat(ConstStr(""/""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Right Parenthesis""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦Right Parenthesis""), 1)))), ConstStr(""\"""")))))))] [Transformation: Programming Pearls (2nd Edition) (Paperback) transforms to ""Programming Pearls, 2/e""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), Concat(ConstStr(""nd Edition) (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""aperback)""))))))"	"""Programming Pearls, 2/e""->Programming Pearls (2nd Edition) (Paperback)"	"""Programming Pearls, 2/e"""	Programming Pearls (2nd Edition) (Paperback)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), Concat(ConstStr(""nd Edition) (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""aperback)""))))))] [Transformation: ""Programming Pearls, 2/e"" transforms to Programming Pearls (2nd Edition) (Paperback)]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))"	"""Bentley, Jon""->Bentley"	"""Bentley, Jon"""	Bentley	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))] [Transformation: ""Bentley, Jon"" transforms to Bentley]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Jon\"""")))"	"Bentley->""Bentley, Jon"""	Bentley	"""Bentley, Jon"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("", Jon\"""")))] [Transformation: Bentley transforms to ""Bentley, Jon""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("".""))))"	The Struts Framework: Practical Guide for Java Programmers->The Struts Framework. Practical Guide for Java Programmers.	The Struts Framework: Practical Guide for Java Programmers	The Struts Framework. Practical Guide for Java Programmers.	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("".""))))] [Transformation: The Struts Framework: Practical Guide for Java Programmers transforms to The Struts Framework. Practical Guide for Java Programmers.]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("": ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1)))))"	The Struts Framework. Practical Guide for Java Programmers.->The Struts Framework: Practical Guide for Java Programmers	The Struts Framework. Practical Guide for Java Programmers.	The Struts Framework: Practical Guide for Java Programmers	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("": ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1)))))] [Transformation: The Struts Framework. Practical Guide for Java Programmers. transforms to The Struts Framework: Practical Guide for Java Programmers]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr("".\"""")))))"	"Sue Spielman->""Spielman, S."""	Sue Spielman	"""Spielman, S."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr("".\"""")))))] [Transformation: Sue Spielman transforms to ""Spielman, S.""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""ue ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Spielman, S.""->Sue Spielman"	"""Spielman, S."""	Sue Spielman	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""ue ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Spielman, S."" transforms to Sue Spielman]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))))"	Readings in Information Visualization : Using Vision to Think (Morgan Kaufmann Series in Interactive Technologies)->Readings in Information Visualization: Using Vision to Think	Readings in Information Visualization : Using Vision to Think (Morgan Kaufmann Series in Interactive Technologies)	Readings in Information Visualization: Using Vision to Think	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))))] [Transformation: Readings in Information Visualization : Using Vision to Think (Morgan Kaufmann Series in Interactive Technologies) transforms to Readings in Information Visualization: Using Vision to Think]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("" (Morgan Kaufmann Series in Interactive Technologies)""))))"	Readings in Information Visualization: Using Vision to Think->Readings in Information Visualization : Using Vision to Think (Morgan Kaufmann Series in Interactive Technologies)	Readings in Information Visualization: Using Vision to Think	Readings in Information Visualization : Using Vision to Think (Morgan Kaufmann Series in Interactive Technologies)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), ConstStr("" (Morgan Kaufmann Series in Interactive Technologies)""))))] [Transformation: Readings in Information Visualization: Using Vision to Think transforms to Readings in Information Visualization : Using Vision to Think (Morgan Kaufmann Series in Interactive Technologies)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))))))"	"""Stuart K. Card, Jock D. Mackinlay, Ben Shneiderman""->""Card, Stuart K.; Mackinlay, Jock D.; Shneiderman, Ben"""	"""Stuart K. Card, Jock D. Mackinlay, Ben Shneiderman"""	"""Card, Stuart K.; Mackinlay, Jock D.; Shneiderman, Ben"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), Concat(ConstStr("".; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))))))] [Transformation: ""Stuart K. Card, Jock D. Mackinlay, Ben Shneiderman"" transforms to ""Card, Stuart K.; Mackinlay, Jock D.; Shneiderman, Ben""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))))))"	"""Card, Stuart K.; Mackinlay, Jock D.; Shneiderman, Ben""->""Stuart K. Card, Jock D. Mackinlay, Ben Shneiderman"""	"""Card, Stuart K.; Mackinlay, Jock D.; Shneiderman, Ben"""	"""Stuart K. Card, Jock D. Mackinlay, Ben Shneiderman"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))))))] [Transformation: ""Card, Stuart K.; Mackinlay, Jock D.; Shneiderman, Ben"" transforms to ""Stuart K. Card, Jock D. Mackinlay, Ben Shneiderman""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))"	Logical Effort: Designing Fast Cmos Circuits->LOGICAL EFFORT	Logical Effort: Designing Fast Cmos Circuits	LOGICAL EFFORT	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))))] [Transformation: Logical Effort: Designing Fast Cmos Circuits transforms to LOGICAL EFFORT]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("": Designing Fast Cmos Circuits""))"	LOGICAL EFFORT->Logical Effort: Designing Fast Cmos Circuits	LOGICAL EFFORT	Logical Effort: Designing Fast Cmos Circuits	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("": Designing Fast Cmos Circuits""))] [Transformation: LOGICAL EFFORT transforms to Logical Effort: Designing Fast Cmos Circuits]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr("".\"""")))))"	"""Ivan Edward Sutherland, Robert F. Sproull, David Harris""->""Sutherland, Ivan E."""	"""Ivan Edward Sutherland, Robert F. Sproull, David Harris"""	"""Sutherland, Ivan E."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Comma""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr("".\"""")))))] [Transformation: ""Ivan Edward Sutherland, Robert F. Sproull, David Harris"" transforms to ""Sutherland, Ivan E.""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr(""dward ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", Robert F. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""proull, David Harris\"""")))))))"	"""Sutherland, Ivan E.""->""Ivan Edward Sutherland, Robert F. Sproull, David Harris"""	"""Sutherland, Ivan E."""	"""Ivan Edward Sutherland, Robert F. Sproull, David Harris"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr(""dward ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", Robert F. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""proull, David Harris\"""")))))))] [Transformation: ""Sutherland, Ivan E."" transforms to ""Ivan Edward Sutherland, Robert F. Sproull, David Harris""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))))"	Artificial Intelligence : A Guide to Intelligent Systems (Softcover)->Artificial Intelligence: A Guide To Intelligent Systems	Artificial Intelligence : A Guide to Intelligent Systems (Softcover)	Artificial Intelligence: A Guide To Intelligent Systems	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Colon""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))))] [Transformation: Artificial Intelligence : A Guide to Intelligent Systems (Softcover) transforms to Artificial Intelligence: A Guide To Intelligent Systems]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPSâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Camel Caseâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""oftcover)""))))))))))"	Artificial Intelligence: A Guide To Intelligent Systems->Artificial Intelligence : A Guide to Intelligent Systems (Softcover)	Artificial Intelligence: A Guide To Intelligent Systems	Artificial Intelligence : A Guide to Intelligent Systems (Softcover)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPSâ—¦WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Camel Caseâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), ConstStr(""oftcover)""))))))))))] [Transformation: Artificial Intelligence: A Guide To Intelligent Systems transforms to Artificial Intelligence : A Guide to Intelligent Systems (Softcover)]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Michael Negnevitsky->""Negnevitsky, Michael"""	Michael Negnevitsky	"""Negnevitsky, Michael"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Michael Negnevitsky transforms to ""Negnevitsky, Michael""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Negnevitsky, Michael""->Michael Negnevitsky"	"""Negnevitsky, Michael"""	Michael Negnevitsky	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Negnevitsky, Michael"" transforms to Michael Negnevitsky]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 19), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Number""), 1))), Concat(ConstStr("") Yukon ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Numberâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))"	Microsoft SQL Server 2005 New Features->Microsoft(r) Yukon New Features	Microsoft SQL Server 2005 New Features	Microsoft(r) Yukon New Features	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 19), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Number""), 1))), Concat(ConstStr("") Yukon ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Numberâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))] [Transformation: Microsoft SQL Server 2005 New Features transforms to Microsoft(r) Yukon New Features]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" SQL Server 2005 ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Microsoft(r) Yukon New Features->Microsoft SQL Server 2005 New Features	Microsoft(r) Yukon New Features	Microsoft SQL Server 2005 New Features	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" SQL Server 2005 ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Microsoft(r) Yukon New Features transforms to Microsoft SQL Server 2005 New Features]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Michael Otey->""Otey, Michael"""	Michael Otey	"""Otey, Michael"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Michael Otey transforms to ""Otey, Michael""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Otey, Michael""->Michael Otey"	"""Otey, Michael"""	Michael Otey	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Otey, Michael"" transforms to Michael Otey]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Lowercase word""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Lowercase word"", ""Îµ""), 1))), Concat(ConstStr("", Volume ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), ConstStr("")\"""")))))))"	"TCP/IP Illustrated : The Protocols v. 1 (APC) (Softcover)->""The Protocols (TCP/IP Illustrated, Volume 1)"""	TCP/IP Illustrated : The Protocols v. 1 (APC) (Softcover)	"""The Protocols (TCP/IP Illustrated, Volume 1)"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Lowercase word""), 1))), Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Lowercase word"", ""Îµ""), 1))), Concat(ConstStr("", Volume ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), ConstStr("")\"""")))))))] [Transformation: TCP/IP Illustrated : The Protocols v. 1 (APC) (Softcover) transforms to ""The Protocols (TCP/IP Illustrated, Volume 1)""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Left Parenthesis"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" : ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1)))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), Concat(ConstStr("" (A""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Forward Slash""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Left Parenthesisâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Forward Slash""), 1))), ConstStr("") (Softcover)"")))))))))))"	"""The Protocols (TCP/IP Illustrated, Volume 1)""->TCP/IP Illustrated : The Protocols v. 1 (APC) (Softcover)"	"""The Protocols (TCP/IP Illustrated, Volume 1)"""	TCP/IP Illustrated : The Protocols v. 1 (APC) (Softcover)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Left Parenthesis"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("" : ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1)))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Number""), 1), RegexPositionRelative(x, RegexPair(""Number"", ""Îµ""), 1))), Concat(ConstStr("" (A""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Forward Slash""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Left Parenthesisâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Caseâ—¦Forward Slash""), 1))), ConstStr("") (Softcover)"")))))))))))] [Transformation: ""The Protocols (TCP/IP Illustrated, Volume 1)"" transforms to TCP/IP Illustrated : The Protocols v. 1 (APC) (Softcover)]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	W.Richard Stevens->W. Richard Stevens	W.Richard Stevens	W. Richard Stevens	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: W.Richard Stevens transforms to W. Richard Stevens]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("".""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	W. Richard Stevens->W.Richard Stevens	W. Richard Stevens	W.Richard Stevens	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr("".""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: W. Richard Stevens transforms to W.Richard Stevens]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))"	MFC Internals: Inside the Microsoft(c) Foundation Class Architecture->Mfc Internals: Inside the Microsoft Foundation Class Architecture	MFC Internals: Inside the Microsoft(c) Foundation Class Architecture	Mfc Internals: Inside the Microsoft Foundation Class Architecture	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Left Parenthesis""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Right Parenthesisâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))] [Transformation: MFC Internals: Inside the Microsoft(c) Foundation Class Architecture transforms to Mfc Internals: Inside the Microsoft Foundation Class Architecture]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Words/dots/hyphensâ—¦WhiteSpaceâ—¦Camel Case"", ""WhiteSpace""), 1))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1)))), Concat(ConstStr("") ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Camel Caseâ—¦WhiteSpace"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))))"	Mfc Internals: Inside the Microsoft Foundation Class Architecture->MFC Internals: Inside the Microsoft(c) Foundation Class Architecture	Mfc Internals: Inside the Microsoft Foundation Class Architecture	MFC Internals: Inside the Microsoft(c) Foundation Class Architecture	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Words/dots/hyphensâ—¦WhiteSpaceâ—¦Camel Case"", ""WhiteSpace""), 1))), Concat(ConstStr(""(""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1)))), Concat(ConstStr("") ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Camel Caseâ—¦WhiteSpace"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))))] [Transformation: Mfc Internals: Inside the Microsoft Foundation Class Architecture transforms to MFC Internals: Inside the Microsoft(c) Foundation Class Architecture]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""cott\"""")))))))))"	"George Shepherd Scot Wingo->""Shepherd, George; Wingo, Scott"""	George Shepherd Scot Wingo	"""Shepherd, George; Wingo, Scott"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""cott\"""")))))))))] [Transformation: George Shepherd Scot Wingo transforms to ""Shepherd, George; Wingo, Scott""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -3))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))))))"	"""Shepherd, George; Wingo, Scott""->George Shepherd Scot Wingo"	"""Shepherd, George; Wingo, Scott"""	George Shepherd Scot Wingo	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), -1), RelativePosition(x, -3))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1)))))))))] [Transformation: ""Shepherd, George; Wingo, Scott"" transforms to George Shepherd Scot Wingo]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" Korper and Ellis E-Commerce Books ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 2))), ConstStr(""eries)""))))))"	The Internet Security Guidebook: From Planning to Deployment->The Internet Security Guidebook: From Planning to Deployment (The Korper and Ellis E-Commerce Books Series)	The Internet Security Guidebook: From Planning to Deployment	The Internet Security Guidebook: From Planning to Deployment (The Korper and Ellis E-Commerce Books Series)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("" (""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" Korper and Ellis E-Commerce Books ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 2))), ConstStr(""eries)""))))))] [Transformation: The Internet Security Guidebook: From Planning to Deployment transforms to The Internet Security Guidebook: From Planning to Deployment (The Korper and Ellis E-Commerce Books Series)]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	The Internet Security Guidebook: From Planning to Deployment (The Korper and Ellis E-Commerce Books Series)->The Internet Security Guidebook: From Planning to Deployment	The Internet Security Guidebook: From Planning to Deployment (The Korper and Ellis E-Commerce Books Series)	The Internet Security Guidebook: From Planning to Deployment	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: The Internet Security Guidebook: From Planning to Deployment (The Korper and Ellis E-Commerce Books Series) transforms to The Internet Security Guidebook: From Planning to Deployment]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))"	"""Ellis, Juanita; Speed, Tim""->""Juanita Ellis, Tim Speed"""	"""Ellis, Juanita; Speed, Tim"""	"""Juanita Ellis, Tim Speed"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Ellis, Juanita; Speed, Tim"" transforms to ""Juanita Ellis, Tim Speed""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))"	"""Juanita Ellis, Tim Speed""->""Ellis, Juanita; Speed, Tim"""	"""Juanita Ellis, Tim Speed"""	"""Ellis, Juanita; Speed, Tim"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Juanita Ellis, Tim Speed"" transforms to ""Ellis, Juanita; Speed, Tim""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))"	XQuery: The XML Query Language->XQUERY	XQuery: The XML Query Language	XQUERY	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))] [Transformation: XQuery: The XML Query Language transforms to XQUERY]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Upper Case"", ""Îµ""), 1))), ConstStr(""Query: The XML Query Language""))"	XQUERY->XQuery: The XML Query Language	XQUERY	XQuery: The XML Query Language	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Upper Case""), 1), RegexPositionRelative(x, RegexPair(""Upper Case"", ""Îµ""), 1))), ConstStr(""Query: The XML Query Language""))] [Transformation: XQUERY transforms to XQuery: The XML Query Language]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Michael Brundage->""Brundage, Michael"""	Michael Brundage	"""Brundage, Michael"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Michael Brundage transforms to ""Brundage, Michael""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Brundage, Michael""->Michael Brundage"	"""Brundage, Michael"""	Michael Brundage	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Brundage, Michael"" transforms to Michael Brundage]"
"Concat(ConstStr(""T""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 6), RelativePosition(x, 8))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x))))"	XML Schema Companion->The Xml Schema Companion	XML Schema Companion	The Xml Schema Companion	"[Program: Concat(ConstStr(""T""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 6), RelativePosition(x, 8))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x))))] [Transformation: XML Schema Companion transforms to The Xml Schema Companion]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	The Xml Schema Companion->XML Schema Companion	The Xml Schema Companion	XML Schema Companion	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: The Xml Schema Companion transforms to XML Schema Companion]"
"Concat(ConstStr(""Neil ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x)"	Bradley->Neil Bradley	Bradley	Neil Bradley	"[Program: Concat(ConstStr(""Neil ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x)] [Transformation: Bradley transforms to Neil Bradley]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))"	Neil Bradley->Bradley	Neil Bradley	Bradley	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1)))] [Transformation: Neil Bradley transforms to Bradley]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Dot""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))"	Teach Yourself Microsoft Visual Basic .Net 2003 in 21 Days->Teach Yourself Microsoft Visual BasicNet 2003 in 21 Days	Teach Yourself Microsoft Visual Basic .Net 2003 in 21 Days	Teach Yourself Microsoft Visual BasicNet 2003 in 21 Days	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Dot""), 1))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dot"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1))))] [Transformation: Teach Yourself Microsoft Visual Basic .Net 2003 in 21 Days transforms to Teach Yourself Microsoft Visual BasicNet 2003 in 21 Days]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1))), Concat(ConstStr("" .""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Teach Yourself Microsoft Visual BasicNet 2003 in 21 Days->Teach Yourself Microsoft Visual Basic .Net 2003 in 21 Days	Teach Yourself Microsoft Visual BasicNet 2003 in 21 Days	Teach Yourself Microsoft Visual Basic .Net 2003 in 21 Days	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1))), Concat(ConstStr("" .""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Caseâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Teach Yourself Microsoft Visual BasicNet 2003 in 21 Days transforms to Teach Yourself Microsoft Visual Basic .Net 2003 in 21 Days]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Holzner, Steve""->Steve Holzner"	"""Holzner, Steve"""	Steve Holzner	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Holzner, Steve"" transforms to Steve Holzner]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Steve Holzner->""Holzner, Steve"""	Steve Holzner	"""Holzner, Steve"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Steve Holzner transforms to ""Holzner, Steve""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))), ConstStr(""\"""")))"	"""Java, Java, Java: Object-Oriented Problem Solving, by Morelli, 3rd Edition""->""JAVA, JAVA, JAVA"""	"""Java, Java, Java: Object-Oriented Problem Solving, by Morelli, 3rd Edition"""	"""JAVA, JAVA, JAVA"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1)))), ConstStr(""\"""")))] [Transformation: ""Java, Java, Java: Object-Oriented Problem Solving, by Morelli, 3rd Edition"" transforms to ""JAVA, JAVA, JAVA""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1)))), ConstStr("": Object-Oriented Problem Solving, by Morelli, 3rd Edition\"""")))"	"""JAVA, JAVA, JAVA""->""Java, Java, Java: Object-Oriented Problem Solving, by Morelli, 3rd Edition"""	"""JAVA, JAVA, JAVA"""	"""Java, Java, Java: Object-Oriented Problem Solving, by Morelli, 3rd Edition"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Double Quote""), -1)))), ConstStr("": Object-Oriented Problem Solving, by Morelli, 3rd Edition\"""")))] [Transformation: ""JAVA, JAVA, JAVA"" transforms to ""Java, Java, Java: Object-Oriented Problem Solving, by Morelli, 3rd Edition""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))"	"""Morelli, Ralph/ Walde, Ralph""->MORELLI"	"""Morelli, Ralph/ Walde, Ralph"""	MORELLI	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))] [Transformation: ""Morelli, Ralph/ Walde, Ralph"" transforms to MORELLI]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), 1))), Concat(ConstStr(""alph/ Walde, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), 1))), ConstStr(""alph\"""")))))))"	"MORELLI->""Morelli, Ralph/ Walde, Ralph"""	MORELLI	"""Morelli, Ralph/ Walde, Ralph"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), 1))), Concat(ConstStr(""alph/ Walde, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Case"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Upper Caseâ—¦Upper Caseâ—¦Upper Case"", ""Îµ""), 1))), ConstStr(""alph\"""")))))))] [Transformation: MORELLI transforms to ""Morelli, Ralph/ Walde, Ralph""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)""))"	Moving Objects Databases->Moving Objects Databases (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)	Moving Objects Databases	Moving Objects Databases (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)""))] [Transformation: Moving Objects Databases transforms to Moving Objects Databases (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Moving Objects Databases (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)->Moving Objects Databases	Moving Objects Databases (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)	Moving Objects Databases	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Moving Objects Databases (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems) transforms to Moving Objects Databases]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""?""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 3), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))))"	"""Guting, Ralf Hartmut; Schneider, Markus""->""Ralf Hartmut G?ting, Markus Schneider"""	"""Guting, Ralf Hartmut; Schneider, Markus"""	"""Ralf Hartmut G?ting, Markus Schneider"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""?""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 3), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))))] [Transformation: ""Guting, Ralf Hartmut; Schneider, Markus"" transforms to ""Ralf Hartmut G?ting, Markus Schneider""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Question Mark""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Question Mark""), 1))), Concat(ConstStr(""uting, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))"	"""Ralf Hartmut G?ting, Markus Schneider""->""Guting, Ralf Hartmut; Schneider, Markus"""	"""Ralf Hartmut G?ting, Markus Schneider"""	"""Guting, Ralf Hartmut; Schneider, Markus"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦Question Mark""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Question Mark""), 1))), Concat(ConstStr(""uting, ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""; ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), ConstStr(""\"""")))))))))] [Transformation: ""Ralf Hartmut G?ting, Markus Schneider"" transforms to ""Guting, Ralf Hartmut; Schneider, Markus""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpaceâ—¦Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpaceâ—¦Camel Case"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Ampersand""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), ConstStr("";""))))))"	Oracle JDeveloper 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF->ORACLE JDEVELOPER FOR FORMS &amp;	Oracle JDeveloper 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF	ORACLE JDEVELOPER FOR FORMS &amp;	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpaceâ—¦Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Alphanumericâ—¦WhiteSpaceâ—¦Camel Case"", ""Îµ""), 1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Ampersand""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Semicolon""), 1))), ConstStr("";""))))))] [Transformation: Oracle JDeveloper 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF transforms to ORACLE JDEVELOPER FOR FORMS &amp;]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), 1)))), ConstStr(""Developer 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF""))"	ORACLE JDEVELOPER FOR FORMS &amp;->Oracle JDeveloper 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF	ORACLE JDEVELOPER FOR FORMS &amp;	Oracle JDeveloper 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Upper Case"", ""Îµ""), 1)))), ConstStr(""Developer 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF""))] [Transformation: ORACLE JDEVELOPER FOR FORMS &amp; transforms to Oracle JDeveloper 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), ConstStr("", Peter\"""")))"	"KOLETZKE/MILLS->""Koletzke, Peter"""	KOLETZKE/MILLS	"""Koletzke, Peter"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), ConstStr("", Peter\"""")))] [Transformation: KOLETZKE/MILLS transforms to ""Koletzke, Peter""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), ConstStr(""/MILLS""))"	"""Koletzke, Peter""->KOLETZKE/MILLS"	"""Koletzke, Peter"""	KOLETZKE/MILLS	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))), ConstStr(""/MILLS""))] [Transformation: ""Koletzke, Peter"" transforms to KOLETZKE/MILLS]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RelativePosition(x, 26)))), Concat(ConstStr("" -""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1), RelativePosition(x, -12)))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))))))"	"""Bulletproof Wireless Security: GSM, UMTS, 802.11 and Ad Hoc Security""->BULLETPROOF WIRELESS SECU -OS"	"""Bulletproof Wireless Security: GSM, UMTS, 802.11 and Ad Hoc Security"""	BULLETPROOF WIRELESS SECU -OS	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RelativePosition(x, 26)))), Concat(ConstStr("" -""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), -1), RelativePosition(x, -12)))), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))))))] [Transformation: ""Bulletproof Wireless Security: GSM, UMTS, 802.11 and Ad Hoc Security"" transforms to BULLETPROOF WIRELESS SECU -OS]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), ConstStr("" Security: GSM, UMTS, 802.11 and Ad Hoc Security\"""")))"	"BULLETPROOF WIRELESS SECU -OS->""Bulletproof Wireless Security: GSM, UMTS, 802.11 and Ad Hoc Security"""	BULLETPROOF WIRELESS SECU -OS	"""Bulletproof Wireless Security: GSM, UMTS, 802.11 and Ad Hoc Security"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦Alphanumeric"", ""Îµ""), 1)))), ConstStr("" Security: GSM, UMTS, 802.11 and Ad Hoc Security\"""")))] [Transformation: BULLETPROOF WIRELESS SECU -OS transforms to ""Bulletproof Wireless Security: GSM, UMTS, 802.11 and Ad Hoc Security""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x)"	Coordinating User Interfaces for Consistency->COORDINATING USER INTERFACES FOR CONSISTENCY	Coordinating User Interfaces for Consistency	COORDINATING USER INTERFACES FOR CONSISTENCY	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(x)] [Transformation: Coordinating User Interfaces for Consistency transforms to COORDINATING USER INTERFACES FOR CONSISTENCY]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))))))))"	COORDINATING USER INTERFACES FOR CONSISTENCY->Coordinating User Interfaces for Consistency	COORDINATING USER INTERFACES FOR CONSISTENCY	Coordinating User Interfaces for Consistency	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))))))))] [Transformation: COORDINATING USER INTERFACES FOR CONSISTENCY transforms to Coordinating User Interfaces for Consistency]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))"	"""Nielsen, Jakob:""->NIELSEN"	"""Nielsen, Jakob:"""	NIELSEN	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))] [Transformation: ""Nielsen, Jakob:"" transforms to NIELSEN]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("", Jakob:\"""")))"	"NIELSEN->""Nielsen, Jakob:"""	NIELSEN	"""Nielsen, Jakob:"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr("", Jakob:\"""")))] [Transformation: NIELSEN transforms to ""Nielsen, Jakob:""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))"	"""Object-Oriented Programming Using C++, by Pohl, 2nd Edition""->Object-Oriented Programming Using C++"	"""Object-Oriented Programming Using C++, by Pohl, 2nd Edition"""	Object-Oriented Programming Using C++	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))] [Transformation: ""Object-Oriented Programming Using C++, by Pohl, 2nd Edition"" transforms to Object-Oriented Programming Using C++]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", by ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""ohl, 2nd Edition\"""")))))"	"Object-Oriented Programming Using C++->""Object-Oriented Programming Using C++, by Pohl, 2nd Edition"""	Object-Oriented Programming Using C++	"""Object-Oriented Programming Using C++, by Pohl, 2nd Edition"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", by ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""ohl, 2nd Edition\"""")))))] [Transformation: Object-Oriented Programming Using C++ transforms to ""Object-Oriented Programming Using C++, by Pohl, 2nd Edition""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" , University of California, Santa Cruz\"""")))))"	"""Pohl, Ira""->""Ira Pohl , University of California, Santa Cruz"""	"""Pohl, Ira"""	"""Ira Pohl , University of California, Santa Cruz"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("" , University of California, Santa Cruz\"""")))))] [Transformation: ""Pohl, Ira"" transforms to ""Ira Pohl , University of California, Santa Cruz""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"""Ira Pohl , University of California, Santa Cruz""->""Pohl, Ira"""	"""Ira Pohl , University of California, Santa Cruz"""	"""Pohl, Ira"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""',' or 'and'""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: ""Ira Pohl , University of California, Santa Cruz"" transforms to ""Pohl, Ira""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", by ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), 1))), ConstStr(""dams\"""")))))"	"Java: An Introduction to Computing->""Java: An Introduction to Computing, by Adams"""	Java: An Introduction to Computing	"""Java: An Introduction to Computing, by Adams"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", by ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦WhiteSpace""), 1))), ConstStr(""dams\"""")))))] [Transformation: Java: An Introduction to Computing transforms to ""Java: An Introduction to Computing, by Adams""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))"	"""Java: An Introduction to Computing, by Adams""->Java: An Introduction to Computing"	"""Java: An Introduction to Computing, by Adams"""	Java: An Introduction to Computing	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))] [Transformation: ""Java: An Introduction to Computing, by Adams"" transforms to Java: An Introduction to Computing]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""/ ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), ConstStr("".\"""")))))))))"	"""Joel Adams, Larry R. Nyhoff, Jeffrey Nyhoff, Joel C. Adams, Jeffrey L. Nyhoff""->""Adams, Joel/ Nyhoff, Jeffrey L."""	"""Joel Adams, Larry R. Nyhoff, Jeffrey Nyhoff, Joel C. Adams, Jeffrey L. Nyhoff"""	"""Adams, Joel/ Nyhoff, Jeffrey L."""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr(""/ ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), -1))), ConstStr("".\"""")))))))))] [Transformation: ""Joel Adams, Larry R. Nyhoff, Jeffrey Nyhoff, Joel C. Adams, Jeffrey L. Nyhoff"" transforms to ""Adams, Joel/ Nyhoff, Jeffrey L.""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""arry R. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slashâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slashâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" C. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slashâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))))))))))))"	"""Adams, Joel/ Nyhoff, Jeffrey L.""->""Joel Adams, Larry R. Nyhoff, Jeffrey Nyhoff, Joel C. Adams, Jeffrey L. Nyhoff"""	"""Adams, Joel/ Nyhoff, Jeffrey L."""	"""Joel Adams, Larry R. Nyhoff, Jeffrey Nyhoff, Joel C. Adams, Jeffrey L. Nyhoff"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), -1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), -1))), Concat(ConstStr(""arry R. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slashâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slashâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Forward Slash""), 1))), Concat(ConstStr("" C. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Dot""), 1))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Forward Slashâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), -1))), ConstStr(""\"""")))))))))))))))))))] [Transformation: ""Adams, Joel/ Nyhoff, Jeffrey L."" transforms to ""Joel Adams, Larry R. Nyhoff, Jeffrey Nyhoff, Joel C. Adams, Jeffrey L. Nyhoff""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦Single Quote""), 1))), Concat(ConstStr(""onandapos;""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Single Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""oandapos;""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Single Quote"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))"	GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers->GUI Bloopers: Donandapos;ts and Doandapos;s for Software Developers and Web Designers	GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers	GUI Bloopers: Donandapos;ts and Doandapos;s for Software Developers and Web Designers	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase wordâ—¦Single Quote""), 1))), Concat(ConstStr(""onandapos;""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Single Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""',' or 'and'â—¦ALL CAPS"", ""Îµ""), 1))), Concat(ConstStr(""oandapos;""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Single Quote"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))] [Transformation: GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers transforms to GUI Bloopers: Donandapos;ts and Doandapos;s for Software Developers and Web Designers]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 17))), Concat(ConstStr(""'""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), 1), RelativePosition(x, 34))), Concat(ConstStr(""'""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))"	GUI Bloopers: Donandapos;ts and Doandapos;s for Software Developers and Web Designers->GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers	GUI Bloopers: Donandapos;ts and Doandapos;s for Software Developers and Web Designers	GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RelativePosition(x, 17))), Concat(ConstStr(""'""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), 1), RelativePosition(x, 34))), Concat(ConstStr(""'""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Semicolon"", ""Îµ""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))))] [Transformation: GUI Bloopers: Donandapos;ts and Doandapos;s for Software Developers and Web Designers transforms to GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1)))))"	Johnson. Jeff->Jeff Johnson	Johnson. Jeff	Jeff Johnson	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Camel Case""), 1), RegexPositionRelative(x, RegexPair(""Camel Case"", ""Îµ""), 1)))))] [Transformation: Johnson. Jeff transforms to Jeff Johnson]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	Jeff Johnson->Johnson. Jeff	Jeff Johnson	Johnson. Jeff	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("". ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: Jeff Johnson transforms to Johnson. Jeff]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))))))"	"""Essential Java Class Reference for Programmers, The (3rd Edition)""->The Essential Java Class Reference For Programmers"	"""Essential Java Class Reference for Programmers, The (3rd Edition)"""	The Essential Java Class Reference For Programmers	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""',' or 'and'"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Double Quote"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1))))))] [Transformation: ""Essential Java Class Reference for Programmers, The (3rd Edition)"" transforms to The Essential Java Class Reference For Programmers]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" (3rd ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""dition)\"""")))))))))))"	"The Essential Java Class Reference For Programmers->""Essential Java Class Reference for Programmers, The (3rd Edition)"""	The Essential Java Class Reference For Programmers	"""Essential Java Class Reference for Programmers, The (3rd Edition)"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Words/dots/hyphensâ—¦WhiteSpace""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumericâ—¦WhiteSpace""), -1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpace""), -1)))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), Concat(ConstStr("" (3rd ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""WhiteSpaceâ—¦ALL CAPS"", ""Îµ""), 1))), ConstStr(""dition)\"""")))))))))))] [Transformation: The Essential Java Class Reference For Programmers transforms to ""Essential Java Class Reference for Programmers, The (3rd Edition)""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"Brian Durney->""Durney, Brian"""	Brian Durney	"""Durney, Brian"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: Brian Durney transforms to ""Durney, Brian""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))"	"""Durney, Brian""->Brian Durney"	"""Durney, Brian"""	Brian Durney	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1)))))] [Transformation: ""Durney, Brian"" transforms to Brian Durney]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Efficient C++: Performance Programming Techniques->Efficient C++ Performance Programming Techniques	Efficient C++: Performance Programming Techniques	Efficient C++ Performance Programming Techniques	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Colon""), 1))), Concat(ConstStr("" ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Colonâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Efficient C++: Performance Programming Techniques transforms to Efficient C++ Performance Programming Techniques]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Plus"", ""Îµ""), -1))), Concat(ConstStr("": ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))"	Efficient C++ Performance Programming Techniques->Efficient C++: Performance Programming Techniques	Efficient C++ Performance Programming Techniques	Efficient C++: Performance Programming Techniques	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Plus"", ""Îµ""), -1))), Concat(ConstStr("": ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Plusâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Line Separator""), -1)))))] [Transformation: Efficient C++ Performance Programming Techniques transforms to Efficient C++: Performance Programming Techniques]"
"Concat(ConstStr(""Dov ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))"	"""Bulka, Mayhew,""->Dov Bulka"	"""Bulka, Mayhew,"""	Dov Bulka	"[Program: Concat(ConstStr(""Dov ""), let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))))] [Transformation: ""Bulka, Mayhew,"" transforms to Dov Bulka]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr("", Mayhew,\"""")))"	"Dov Bulka->""Bulka, Mayhew,"""	Dov Bulka	"""Bulka, Mayhew,"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), ConstStr("", Mayhew,\"""")))] [Transformation: Dov Bulka transforms to ""Bulka, Mayhew,""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (The Morgan Kaufmann Series in Computer Graphics)""))"	Curves and Surfaces for CAGD: A Practical Guide->Curves and Surfaces for CAGD: A Practical Guide (The Morgan Kaufmann Series in Computer Graphics)	Curves and Surfaces for CAGD: A Practical Guide	Curves and Surfaces for CAGD: A Practical Guide (The Morgan Kaufmann Series in Computer Graphics)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (The Morgan Kaufmann Series in Computer Graphics)""))] [Transformation: Curves and Surfaces for CAGD: A Practical Guide transforms to Curves and Surfaces for CAGD: A Practical Guide (The Morgan Kaufmann Series in Computer Graphics)]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Curves and Surfaces for CAGD: A Practical Guide (The Morgan Kaufmann Series in Computer Graphics)->Curves and Surfaces for CAGD: A Practical Guide	Curves and Surfaces for CAGD: A Practical Guide (The Morgan Kaufmann Series in Computer Graphics)	Curves and Surfaces for CAGD: A Practical Guide	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Curves and Surfaces for CAGD: A Practical Guide (The Morgan Kaufmann Series in Computer Graphics) transforms to Curves and Surfaces for CAGD: A Practical Guide]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))"	"""Gerald E. Farin,""->""Farin, Gerald"""	"""Gerald E. Farin,"""	"""Farin, Gerald"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr(""\"""")))))] [Transformation: ""Gerald E. Farin,"" transforms to ""Farin, Gerald""]"
"Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1), RelativePosition(x, -6)))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("",\"""")))))))"	"""Farin, Gerald""->""Gerald E. Farin,"""	"""Farin, Gerald"""	"""Gerald E. Farin,"""	"[Program: Concat(ConstStr(""\""""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), -1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), -1))), Concat(ConstStr("" ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Lowercase word""), -1), RelativePosition(x, -6)))), Concat(ConstStr("". ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Alphanumeric"", ""Îµ""), 1))), ConstStr("",\"""")))))))] [Transformation: ""Farin, Gerald"" transforms to ""Gerald E. Farin,""]"
"Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (2nd Edition) (Softcover)""))"	Computer Systems Design and Architecture->Computer Systems Design and Architecture (2nd Edition) (Softcover)	Computer Systems Design and Architecture	Computer Systems Design and Architecture (2nd Edition) (Softcover)	"[Program: Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, ConstStr("" (2nd Edition) (Softcover)""))] [Transformation: Computer Systems Design and Architecture transforms to Computer Systems Design and Architecture (2nd Edition) (Softcover)]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))"	Computer Systems Design and Architecture (2nd Edition) (Softcover)->Computer Systems Design and Architecture	Computer Systems Design and Architecture (2nd Edition) (Softcover)	Computer Systems Design and Architecture	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""Alphanumeric""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""WhiteSpaceâ—¦Left Parenthesis""), 1)))] [Transformation: Computer Systems Design and Architecture (2nd Edition) (Softcover) transforms to Computer Systems Design and Architecture]"
"Concat(ConstStr(""\""Vincent P. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""arry F. Jordan\"""")))))"	"Heuring->""Vincent P. Heuring, Harry F. Jordan"""	Heuring	"""Vincent P. Heuring, Harry F. Jordan"""	"[Program: Concat(ConstStr(""\""Vincent P. ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr("", ""), Concat(let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Îµ"", ""ALL CAPS""), 1), RegexPositionRelative(x, RegexPair(""ALL CAPS"", ""Îµ""), 1))), ConstStr(""arry F. Jordan\"""")))))] [Transformation: Heuring transforms to ""Vincent P. Heuring, Harry F. Jordan""]"
"let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))"	"""Vincent P. Heuring, Harry F. Jordan""->Heuring"	"""Vincent P. Heuring, Harry F. Jordan"""	Heuring	"[Program: let columnName = ""0"" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair(""Dotâ—¦WhiteSpace"", ""Îµ""), 1), RegexPositionRelative(x, RegexPair(""Îµ"", ""Comma""), 1)))] [Transformation: ""Vincent P. Heuring, Harry F. Jordan"" transforms to Heuring]"
