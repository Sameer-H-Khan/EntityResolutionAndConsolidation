Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)
  Transformation: Computers as Theatre -> Computers As Theatre
  Transformation: CONSTRAINT PROCESSING -> Constraint Processing
  Transformation: "DECHTER, RINA" -> "Dechter, Rina"
  Transformation: APPLIED SOFTWARE ARCHITECTURE -> Applied Software Architecture
  Transformation: COMER -> Comer
  Transformation: Socially Responsible IT Management -> Socially Responsible It Management
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))))
  Transformation: Computers As Theatre -> Computers as Theatre
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))
  Transformation: Brenda Laurel -> "Laurel, Brenda"
  Transformation: Pete Loshin -> "Loshin, Pete"
  Transformation: Jef Raskin -> "Raskin, Jef"
  Transformation: David Loshin -> "Loshin, David"
  Transformation: Wayne Wolf -> "Wolf, Wayne"
  Transformation: Michael Erbschloe -> "Erbschloe, Michael"
  Transformation: Joel Henry -> "Henry, Joel"
  Transformation: Alan Dickman -> "Dickman, Alan"
  Transformation: David Harris -> "Harris, David"
  Transformation: Ian Sommerville -> "Sommerville, Ian"
  Transformation: Gary McGraw -> "McGraw, Gary"
  Transformation: William Wheeler -> "Wheeler, William"
  Transformation: Gilbert Held -> "Held, Gilbert"
  Transformation: Patrick Holmay -> "Holmay, Patrick"
  Transformation: "Pankaj Jalote, P. Jalote" -> "Jalote, Pankaj"
  Transformation: Ken Henderson -> "Henderson, Ken"
  Transformation: Brian Arkills -> "Arkills, Brian"
  Transformation: Matthew Cheek -> "Cheek, Matthew"
  Transformation: Michael Negnevitsky -> "Negnevitsky, Michael"
  Transformation: Michael Otey -> "Otey, Michael"
  Transformation: Michael Brundage -> "Brundage, Michael"
  Transformation: Steve Holzner -> "Holzner, Steve"
  Transformation: Brian Durney -> "Durney, Brian"
  Transformation: "Gerald E. Farin," -> "Farin, Gerald"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: "Laurel, Brenda" -> Brenda Laurel
  Transformation: "Loshin, Pete" -> Pete Loshin
  Transformation: "Raskin, Jef" -> Jef Raskin
  Transformation: "Pascal, Fabian," -> Fabian Pascal
  Transformation: "Loshin, David" -> David Loshin
  Transformation: "Wolf, Wayne" -> Wayne Wolf
  Transformation: "Erbschloe, Michael" -> Michael Erbschloe
  Transformation: "Henry, Joel" -> Joel Henry
  Transformation: "Dickman, Alan" -> Alan Dickman
  Transformation: "Harris, David" -> David Harris
  Transformation: "Sommerville, Ian" -> Ian Sommerville
  Transformation: "McGraw, Gary" -> Gary McGraw
  Transformation: "Wheeler, William" -> William Wheeler
  Transformation: "Held, Gilbert" -> Gilbert Held
  Transformation: "Holmay, Patrick" -> Patrick Holmay
  Transformation: "Henderson, Ken" -> Ken Henderson
  Transformation: "Arkills, Brian" -> Brian Arkills
  Transformation: "Cheek, Matthew" -> Matthew Cheek
  Transformation: "Negnevitsky, Michael" -> Michael Negnevitsky
  Transformation: "Otey, Michael" -> Michael Otey
  Transformation: "Brundage, Michael" -> Michael Brundage
  Transformation: "Holzner, Steve" -> Steve Holzner
  Transformation: "Durney, Brian" -> Brian Durney
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Alphanumeric"), -1))), Concat(ConstStr(" : "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" and Correcting System Problems (HP "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("echnologies)"))))))))))
  Transformation: Tru64 Unix Troubleshooting Diagnosing &amp; -> Tru64 UNIX Troubleshooting : Diagnosing and Correcting System Problems (HP Technologies)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), ConstStr(" &amp;"))))
  Transformation: Tru64 UNIX Troubleshooting : Diagnosing and Correcting System Problems (HP Technologies) -> Tru64 Unix Troubleshooting Diagnosing &amp;
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(", Steven Hancock\"")))))
  Transformation: "Moore, Martin L" -> "Martin Moore, Steven Hancock"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" L\"")))))
  Transformation: "Martin Moore, Steven Hancock" -> "Moore, Martin L"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (The Addison-Wesley Signature Series)"))
  Transformation: Refactoring Databases: Evolutionary Database Design -> Refactoring Databases: Evolutionary Database Design (The Addison-Wesley Signature Series)
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))
  Transformation: Refactoring Databases: Evolutionary Database Design (The Addison-Wesley Signature Series) -> Refactoring Databases: Evolutionary Database Design
  Transformation: Managing Gigabytes: Compressing and Indexing Documents and Images (The Morgan. -> Managing Gigabytes: Compressing and Indexing Documents and Images
  Transformation: JDBC: Practical Guide for Java Programmers (The Practical Guides) -> JDBC: Practical Guide for Java Programmers
  Transformation: Designing Applications with MSMQ: Message Queuing for Developers (The Addison-Wesley Microsoft Technology Series) -> Designing Applications with MSMQ: Message Queuing for Developers
  Transformation: Software Engineering (6th Edition) -> Software Engineering
  Transformation: Software Security: Building Security In (Addison-Wesley Software Security Series) -> Software Security: Building Security In
  Transformation: Data Model Patterns: A Metadata Map (the Morgan Kaufmann Series In Data Management Systems) -> Data Model Patterns: A Metadata Map
  Transformation: The Craft of Information Visualization: Readings and Reflections (The Morgan Kaufmann Series in Interactive Technologies) -> The Craft of Information Visualization: Readings and Reflections
  Transformation: Understanding Data Communications (7th Edition) -> Understanding Data Communications
  Transformation: CMM in Practice: Processes for Executing Software Projects at Infosys (The SEI Series in Software Engineering) -> CMM in Practice: Processes for Executing Software Projects at Infosys
  Transformation: Evolutionary Computation in Bioinformatics (The Morgan Kaufmann Series in Artificial Intelligence) -> Evolutionary Computation in Bioinformatics
  Transformation: Trucluster Server Handbook (Hp Technologies) -> Trucluster Server Handbook
  Transformation: Essential Windows Workflow Foundation (MicrosoftNET Development Series) -> Essential Windows Workflow Foundation
  Transformation: The Internet Security Guidebook: From Planning to Deployment (The Korper and Ellis E-Commerce Books Series) -> The Internet Security Guidebook: From Planning to Deployment
  Transformation: Moving Objects Databases (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems) -> Moving Objects Databases
  Transformation: Curves and Surfaces for CAGD: A Practical Guide (The Morgan Kaufmann Series in Computer Graphics) -> Curves and Surfaces for CAGD: A Practical Guide
  Transformation: Computer Systems Design and Architecture (2nd Edition) (Softcover) -> Computer Systems Design and Architecture
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" W. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" J. "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))))))
  Transformation: "Ambler, Scott; Sadalage, Pramodkumar" -> Scott W. Ambler; Pramodkumar J. Sadalage
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1))), ConstStr("\"")))))))))
  Transformation: Scott W. Ambler; Pramodkumar J. Sadalage -> "Ambler, Scott; Sadalage, Pramodkumar"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("\""))))))
  Transformation: The ACE Programmer's Guide: Practical Design Patterns for Network and Systems Programming -> "ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))))))
  Transformation: "ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming" -> The ACE Programmer's Guide: Practical Design Patterns for Network and Systems Programming
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr("."), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ALL CAPS◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))))))
  Transformation: Stephen D. Huston; James CE Johnson; Umar Syyid -> "Huston, Stephen D.Johnson, James CESyyid, Umar"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("Dot◦Camel Case", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))))))))))
  Transformation: "Huston, Stephen D.Johnson, James CESyyid, Umar" -> Stephen D. Huston; James CE Johnson; Umar Syyid
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), ConstStr(" (Softcover) (CD-ROM)"))
  Transformation: "Kernel Projects for Linux, by Nutt" -> Kernel Projects for Linux (Softcover) (CD-ROM)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), ConstStr(", by Nutt\"")))
  Transformation: Kernel Projects for Linux (Softcover) (CD-ROM) -> "Kernel Projects for Linux, by Nutt"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: "Nutt, Gary J" -> Gary Nutt
  Transformation: "Watson, Ian D" -> Ian Watson
  Transformation: "Lenk, John D" -> John Lenk
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" J\"")))))
  Transformation: Gary Nutt -> "Nutt, Gary J"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 4)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))))
  Transformation: Practical Model-Based Testing: A Tools Approach -> PRAC MODEL-BASED TESTING
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), 1))), ConstStr("ractical Model-Based Testing: A Tools Approach"))
  Transformation: PRAC MODEL-BASED TESTING -> Practical Model-Based Testing: A Tools Approach
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), ConstStr("\"")))
  Transformation: "Utting, Mark Legeard, Bruno" -> "Utting, Mark"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr(" Legeard, Bruno\"")))
  Transformation: "Utting, Mark" -> "Utting, Mark Legeard, Bruno"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), ConstStr("."))
  Transformation: "Open Source Web Development with LAMP: Using Linux, Apache, MySQL, Perl, and PHP" -> Open Source Web Development With Lamp.
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), ConstStr(" with LAMP: Using Linux, Apache, MySQL, Perl, and PHP\"")))
  Transformation: Open Source Web Development With Lamp. -> "Open Source Web Development with LAMP: Using Linux, Apache, MySQL, Perl, and PHP"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("/ "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr(".\"")))))
  Transformation: "Lee, James B.; Ware, Brent" -> "Lee, James/ Ware, Brent."
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\"")))))))
  Transformation: "Lee, James/ Ware, Brent." -> "Lee, James B.; Ware, Brent"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -8)))))))))))
  Transformation: "C++ For C Programmers, Third Edition (3rd Edition)" -> C++ for C Programmers 3ed
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))), Concat(ConstStr(", Third Edition ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), ConstStr("rd Edition)\"")))))
  Transformation: C++ for C Programmers 3ed -> "C++ For C Programmers, Third Edition (3rd Edition)"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))))))
  Transformation: "Essential .NET, Volume I: The Common Language Runtime" -> EssentialNET. Volume I: The Common Language Runtime
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" ."), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("\"")))))))
  Transformation: EssentialNET. Volume I: The Common Language Runtime -> "Essential .NET, Volume I: The Common Language Runtime"
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))
  Transformation: Don Box -> Box
  Transformation: "Bernard M. Moret, Addison-Wesley, B. M. E. Moret" -> Moret
  Transformation: Neil Bradley -> Bradley
Program: Concat(ConstStr("Don "), let columnName = "0" in let x = ChooseInput(vs, columnName) in x)
  Transformation: Box -> Don Box
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1))), Concat(ConstStr("ames "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))))
  Transformation: Micro Java(TM) Game Development -> Micro Java Games Development
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RelativePosition(x, -2), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(") "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RelativePosition(x, -14))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))))))))
  Transformation: Micro Java Games Development -> Micro Java(TM) Game Development
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("erhosek, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))))))
  Transformation: David Fox;Roman Verhovsek -> "Fox, David; Verhovsek, Roman; Verhosek, Roman"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(";"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1)))))))))
  Transformation: "Fox, David; Verhovsek, Roman; Verhosek, Roman" -> David Fox;Roman Verhovsek
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: SQL Queries for Mere Mortals: A Hands-On Guide to Data Manipulation in SQL -> SQL Queries for Mere Mortals A Hands-On Guide to Data Manipulation in SQL
  Transformation: Efficient C++: Performance Programming Techniques -> Efficient C++ Performance Programming Techniques
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦ALL CAPS◦WhiteSpace"), 1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: SQL Queries for Mere Mortals A Hands-On Guide to Data Manipulation in SQL -> SQL Queries for Mere Mortals: A Hands-On Guide to Data Manipulation in SQL
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))
  Transformation: "Hernandez, Michael J.; Viescas, John; Viescas, John L." -> John Viescas
Program: Concat(ConstStr("\"Hernandez, Michael "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" L.\"")))))))))))
  Transformation: John Viescas -> "Hernandez, Michael J.; Viescas, John; Viescas, John L."
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(": A User's Guide"))
  Transformation: Linux System Administration -> Linux System Administration: A User's Guide
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))
  Transformation: Linux System Administration: A User's Guide -> Linux System Administration
  Transformation: Database Administration: The Complete Guide to Practices and Procedures -> Database Administration
  Transformation: Applying Knowledge Management: Techniques for Building Corporate Memories -> Applying Knowledge Management
  Transformation: Subdivision Methods for Geometric Design: A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics) -> Subdivision Methods for Geometric Design
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Marcel\"")))
  Transformation: Gagne -> "Gagne, Marcel"
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))
  Transformation: "Gagne, Marcel" -> Gagne
  Transformation: "Venugopal, Sesh" -> Venugopal
  Transformation: "Rucker, Rudy" -> Rucker
  Transformation: "Ritchey, Ferris" -> Ritchey
  Transformation: "Stiller, Evelyn; Leblanc, Cathie" -> Stiller
  Transformation: "Sprankle, Maureen" -> Sprankle
  Transformation: "Chow, RandyJohnson, Theodore" -> Chow
  Transformation: "Bentley, Jon" -> Bentley
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" '"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))))))
  Transformation: "Java(TM) Programming Language, The (4th Edition) (The Java Series)" -> The 'java Programming Language
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("Single Quote◦Alphanumeric", "ε"), 1)))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("M) "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" (4th Edition) ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("Single Quote◦Alphanumeric", "ε"), 1)))), ConstStr(" Series)\"")))))))))))))
  Transformation: The 'java Programming Language -> "Java(TM) Programming Language, The (4th Edition) (The Java Series)"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -2), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))))))
  Transformation: Ken Arnold James Gosling David Holmes -> "Arnold, Ken; Gosling, James; Holmes, David"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Semicolon"), -1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))))))))))
  Transformation: "Arnold, Ken; Gosling, James; Holmes, David" -> Ken Arnold James Gosling David Holmes
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(", Vol. 4\"")))
  Transformation: Neural Network Systems Techniques and Applications - Industrial and Manufacturing Systems -> "Industrial and Manufacturing Systems, Vol. 4"
Program: Concat(ConstStr("Neural Network "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" Techniques "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" Applications - "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))))))))
  Transformation: "Industrial and Manufacturing Systems, Vol. 4" -> Neural Network Systems Techniques and Applications - Industrial and Manufacturing Systems
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))
  Transformation: "Leondes, Cornelius T.," -> "Leondes, Cornelius T."
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".,\"")))
  Transformation: "Leondes, Cornelius T." -> "Leondes, Cornelius T.,"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" : A Structured Approach, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Right Parenthesis"), 1)))), ConstStr(", pb, 1990\"")))))
  Transformation: Business Programming Logic (4th Edition) -> "Business Programming Logic : A Structured Approach, 4th edition, pb, 1990"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number◦Words/dots/hyphens"), 1), RegexPositionRelative(x, RegexPair("Number◦Words/dots/hyphens", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1)))), ConstStr(")"))))))
  Transformation: "Business Programming Logic : A Structured Approach, 4th edition, pb, 1990" -> Business Programming Logic (4th Edition)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr("/Longhurst"))
  Transformation: Jay Singelmann -> Singelmann/Longhurst
Program: Concat(ConstStr("Jay "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))
  Transformation: Singelmann/Longhurst -> Jay Singelmann
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(": The Complete Guide to Practices and Procedures"))
  Transformation: Database Administration -> Database Administration: The Complete Guide to Practices and Procedures
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: "Mullins, Craig S." -> Craig S. Mullins
  Transformation: "Speegle, Gregory D." -> Gregory D. Speegle
  Transformation: "Welch-Abernathy, Dameon D." -> Dameon D. Welch-Abernathy
  Transformation: "Young, Douglas A." -> Douglas A. Young
  Transformation: "Lazzaro, Joseph J." -> Joseph J. Lazzaro
  Transformation: "Rubin, Aviel D." -> Aviel D. Rubin
  Transformation: "Coplien, James O.," -> James O. Coplien
  Transformation: "Enderton, Herbert B." -> Herbert B. Enderton
  Transformation: "Lippman, Stanley B." -> Stanley B. Lippman
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))
  Transformation: Craig S. Mullins -> "Mullins, Craig S."
  Transformation: Gregory D. Speegle -> "Speegle, Gregory D."
  Transformation: Dameon D. Welch-Abernathy -> "Welch-Abernathy, Dameon D."
  Transformation: Douglas A. Young -> "Young, Douglas A."
  Transformation: Joseph J. Lazzaro -> "Lazzaro, Joseph J."
  Transformation: Aviel D. Rubin -> "Rubin, Aviel D."
  Transformation: Herbert B. Enderton -> "Enderton, Herbert B."
  Transformation: Stanley B. Lippman -> "Lippman, Stanley B."
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))
  Transformation: Real 802.11 Security: Wi-Fi Protected Access and 802.11i -> REAL 802.11 SECURITY
  Transformation: Computers As Components: Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K -> COMPUTERS AS COMPONENTS
  Transformation: Logical Effort: Designing Fast Cmos Circuits -> LOGICAL EFFORT
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), Concat(ConstStr(": Wi-Fi Protected "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦WhiteSpace"), 1))), Concat(ConstStr("ccess and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case◦Upper Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case"), -1)))))))))
  Transformation: REAL 802.11 SECURITY -> Real 802.11 Security: Wi-Fi Protected Access and 802.11i
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))
  Transformation: "Jon Edney, William A. Arbaugh" -> "Edney, Jon"
  Transformation: "David Makofske, Michael J. Donahoo, Kenneth L. Calvert" -> "Makofske, David"
  Transformation: "Carl Roper, Dr. Lynn Fischer, Joseph A. Grau" -> "Roper, Carl"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(", William A. Arbaugh\"")))))
  Transformation: "Edney, Jon" -> "Jon Edney, William A. Arbaugh"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x), Concat(ConstStr("-W/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))))))
  Transformation: C++ By Dissection -> C++ BY DISSECTION-W/CD
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Hyphen"), 1))))
  Transformation: C++ BY DISSECTION-W/CD -> C++ By Dissection
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))
  Transformation: Ira Pohl -> POHL
  Transformation: Jon Juarez -> JUAREZ
Program: Concat(ConstStr("Ira "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x))
  Transformation: POHL -> Ira Pohl
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))))
  Transformation: "Non-Photorealistic Computer Graphics: Modeling, Rendering and Animation" -> "Non-Photorealistic Computer Graphics, Modeling, Rendering, and Animation"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Comma◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))))
  Transformation: "Non-Photorealistic Computer Graphics, Modeling, Rendering, and Animation" -> "Non-Photorealistic Computer Graphics: Modeling, Rendering and Animation"
Program: Concat(ConstStr("\"By (author) "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" By (author) "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))
  Transformation: "Strothotte, Thomas; Schlechtweg, Stefan" -> "By (author) Strothotte, Thomas By (author) Schlechtweg, Stefan"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))
  Transformation: "By (author) Strothotte, Thomas By (author) Schlechtweg, Stefan" -> "Strothotte, Thomas; Schlechtweg, Stefan"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), -1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), -1)))))))))
  Transformation: Smart Client Deployment with ClickOnce(TM): Deploying Windows Forms Applications with ClickOnce(TM) -> Smart Client Deployment with Clickonce: Deploying Windows Forms Applications with Clickonce
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -5))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RelativePosition(x, -5), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), Concat(ConstStr("(TM)"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RelativePosition(x, -5))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RelativePosition(x, -5), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), ConstStr("(TM)"))))))))
  Transformation: Smart Client Deployment with Clickonce: Deploying Windows Forms Applications with Clickonce -> Smart Client Deployment with ClickOnce(TM): Deploying Windows Forms Applications with ClickOnce(TM)
Program: Concat(ConstStr("\"Mackenzie, Duncan; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))
  Transformation: "Noyes, Brian" -> "Mackenzie, Duncan; Noyes, Brian"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))
  Transformation: "Mackenzie, Duncan; Noyes, Brian" -> "Noyes, Brian"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("organ."))))
  Transformation: Managing Gigabytes: Compressing and Indexing Documents and Images -> Managing Gigabytes: Compressing and Indexing Documents and Images (The Morgan.
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "0": "Ian Witten"})
  Transformation: 0 -> Ian Witten
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "Ian Witten": "0"})
  Transformation: Ian Witten -> 0
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x)
  Transformation: Constraint Processing -> CONSTRAINT PROCESSING
  Transformation: "Dechter, Rina" -> "DECHTER, RINA"
  Transformation: Applied Software Architecture -> APPLIED SOFTWARE ARCHITECTURE
  Transformation: Comer -> COMER
  Transformation: Coordinating User Interfaces for Consistency -> COORDINATING USER INTERFACES FOR CONSISTENCY
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(": Techniques for Building Corporate "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("emories"))))
  Transformation: Applying Knowledge Management -> Applying Knowledge Management: Techniques for Building Corporate Memories
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" D\"")))))
  Transformation: Ian Watson -> "Watson, Ian D"
  Transformation: John Lenk -> "Lenk, John D"
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))
  Transformation: "TCP/IP Clearly Explained, Fourth Edition (The Morgan Kaufmann Series in Networking)" -> TCP/IP Clearly Explained
  Transformation: "Defend I.T.: Security by Example, by Gupta" -> Defend I.T.: Security by Example
  Transformation: "Pattern Recognition, Third Edition" -> Pattern Recognition
  Transformation: "Software Project Management: A Real-World Guide to Success, by Henry" -> Software Project Management: A Real-World Guide to Success
  Transformation: "Adapting PCs for Disabilities, by Joseph J. Lazzaro" -> Adapting PCs for Disabilities
  Transformation: "On to C++, by Winston" -> On to C++
  Transformation: "Object-Oriented Programming Using C++, by Pohl, 2nd Edition" -> Object-Oriented Programming Using C++
  Transformation: "Java: An Introduction to Computing, by Adams" -> Java: An Introduction to Computing
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Fourth Edition (The Morgan Kaufmann Series in Networking)\"")))
  Transformation: TCP/IP Clearly Explained -> "TCP/IP Clearly Explained, Fourth Edition (The Morgan Kaufmann Series in Networking)"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Number◦WhiteSpace◦ALL CAPS", "ε"), 1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1))), ConstStr("M D")))
  Transformation: SimNet XPert Release 4 Combined PageOut Edition -> SIMNET XPERT RELEASE 4 COM D
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case"), -1)))), ConstStr("ombined PageOut Edition"))))
  Transformation: SIMNET XPERT RELEASE 4 COM D -> SimNet XPert Release 4 Combined PageOut Edition
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr("\"")))))
  Transformation: Triad Interactive -> "Triad, Interactive"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))
  Transformation: "Triad, Interactive" -> Triad Interactive
  Transformation: Marvin V. Zelkowitz -> Marvin Zelkowitz
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("Colon", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))
  Transformation: The Humane Interface :New Directions for Designing Interactive Systems -> The Humane Interface: New Directions for Designing Interactive Systems
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("Colon", "ε"), -1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))
  Transformation: The Humane Interface: New Directions for Designing Interactive Systems -> The Humane Interface :New Directions for Designing Interactive Systems
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("uides)"))))
  Transformation: JDBC: Practical Guide for Java Programmers -> JDBC: Practical Guide for Java Programmers (The Practical Guides)
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Hyphen"), 1))))
  Transformation: "Essential Check Point FireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide" -> ESSENTIAL CHECK POINT FIREWALL
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), -1)))), ConstStr("ireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide\"")))
  Transformation: ESSENTIAL CHECK POINT FIREWALL -> "Essential Check Point FireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Practical Issues in Database Management - A Reference for the Thinking Practitioner -> Practical Issues in Database Management: A Reference for the Thinking Practitioner
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" - "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Practical Issues in Database Management: A Reference for the Thinking Practitioner -> Practical Issues in Database Management - A Reference for the Thinking Practitioner
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(",\"")))))
  Transformation: Fabian Pascal -> "Pascal, Fabian,"
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1)))
  Transformation: Fundamentals of Thermal-Fluid Sciences(2nd edition) -> Fundamentals of Thermal-Fluid Sciences
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("(2nd edition)"))
  Transformation: Fundamentals of Thermal-Fluid Sciences -> Fundamentals of Thermal-Fluid Sciences(2nd edition)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr("&nbsp;&nbsp;"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace◦Alphanumeric", "ε"), -1)))))
  Transformation: "Yunus A. Cengel, Robert H. Turner, Yunus Cengel, Robert Turn" -> Yunus A. Cengel&nbsp;&nbsp;Robert H. Turner
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Ampersand"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Ampersand"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("Semicolon◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -3))), ConstStr("\"")))))))))))))
  Transformation: Yunus A. Cengel&nbsp;&nbsp;Robert H. Turner -> "Yunus A. Cengel, Robert H. Turner, Yunus Cengel, Robert Turn"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Comma"), 1))), Concat(ConstStr("offmeister, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))
  Transformation: "Christine Hofmeister, Robert Nord, Dilip Soni" -> "Hoffmeister, Christine"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("ofmeister, Robert Nord, Dilip Soni\"")))))
  Transformation: "Hoffmeister, Christine" -> "Christine Hofmeister, Robert Nord, Dilip Soni"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "Camel Case◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Words/dots/hyphens◦WhiteSpace◦Words/dots/hyphens"), -1), RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), -1))))))))
  Transformation: Data Structures from the Outside In : An Object Oriented Approach with Java 5. 0 -> Data Structures Outside In With Java
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" from the "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), ConstStr(" : An Object Oriented Approach with Java 5. 0"))))
  Transformation: Data Structures Outside In With Java -> Data Structures from the Outside In : An Object Oriented Approach with Java 5. 0
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Sesh\"")))
  Transformation: Venugopal -> "Venugopal, Sesh"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1)))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Words/dots/hyphens◦WhiteSpace◦Number"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Comma◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))))))))
  Transformation: "INSIDE WINDOWS STORAGE. Server Storage Technologies for Windows 2000, Windows Server 2003, and Beyond" -> "Inside Windows Storage: Server Storage Technologies for Windows Server 2003, Windows 2000 and Beyond"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "WhiteSpace◦Words/dots/hyphens"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in let sharedParsedNumber = ParseNumber(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), -1), RegexPositionRelative(x, RegexPair("Number", "ε"), -1))), "(',', , , '.', , False)") in let sharedNumberFormat = "(, , , , , (, , , '.', , False))" in RangeConcat(RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(0, 4, Down)"), sharedNumberFormat), RangeConcat(RangeConstStr(", Windows Server "), RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(3, 4, UpOrNext)"), sharedNumberFormat))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Number◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))))))
  Transformation: "Inside Windows Storage: Server Storage Technologies for Windows Server 2003, Windows 2000 and Beyond" -> "INSIDE WINDOWS STORAGE. Server Storage Technologies for Windows 2000, Windows Server 2003, and Beyond"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))))))
  Transformation: "Naik, Dilip C" -> Dilip C. Naik Dilip Naik
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\"")))))
  Transformation: Dilip C. Naik Dilip Naik -> "Naik, Dilip C"
  Transformation: David C. Hay -> "Hay, David C"
  Transformation: Stephen A. Rago -> "Rago, Stephen A"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr("."), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Computer Accounting with Microsoft Great Plains 8. 0 w/ Software CD -> Computer Accounting with Microsoft Great Plains 8.0 w/ Software CD
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Computer Accounting with Microsoft Great Plains 8.0 w/ Software CD -> Computer Accounting with Microsoft Great Plains 8. 0 w/ Software CD
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))
  Transformation: "Yacht, Carol; Crosson, Susan" -> "Carol Yacht, Susan Crosson"
  Transformation: "Chan, Patrick; Dang, Lan-Ahn" -> "Patrick Chan, Lan-Ahn Dang"
  Transformation: "Ellis, Juanita; Speed, Tim" -> "Juanita Ellis, Tim Speed"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))
  Transformation: "Carol Yacht, Susan Crosson" -> "Yacht, Carol; Crosson, Susan"
  Transformation: "Patrick Chan, Lan-Ahn Dang" -> "Chan, Patrick; Dang, Lan-Ahn"
  Transformation: "Juanita Ellis, Tim Speed" -> "Ellis, Juanita; Speed, Tim"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr(" Gupta\"")))))
  Transformation: Defend I.T.: Security by Example -> "Defend I.T.: Security by Example, by Gupta"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("/ "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))
  Transformation: Ajay Gupta; Scott Laliberte -> "Gupta, Ajay/ Laliberte, Scott"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))))))
  Transformation: "Gupta, Ajay/ Laliberte, Scott" -> Ajay Gupta; Scott Laliberte
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), ConstStr(", pb, 2003\"")))
  Transformation: Business Intelligence: The Savvy Manager's Guide (The Savvy Manager's Guides) -> "Business Intelligence: The Savvy Manager's Guide, pb, 2003"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("uides)"))))
  Transformation: "Business Intelligence: The Savvy Manager's Guide, pb, 2003" -> Business Intelligence: The Savvy Manager's Guide (The Savvy Manager's Guides)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" : "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1)))), Concat(ConstStr("honeandapos;"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, -9), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1), RelativePosition(x, 10))), ConstStr(" Society"))))))))))
  Transformation: Mobile Connection the Cell Phones Impact -> The Mobile Connection : The Cell Phoneandapos;s Impact on Society
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦ALL CAPS", "ε"), -1))), Concat(ConstStr("hones "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Lowercase word"), 1)))))))))
  Transformation: The Mobile Connection : The Cell Phoneandapos;s Impact on Society -> Mobile Connection the Cell Phones Impact
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RelativePosition(x, -5))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: "Ling, Richard" -> Rich Ling
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("ichard\"")))))
  Transformation: Rich Ling -> "Ling, Richard"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Third Edition\"")))
  Transformation: Pattern Recognition -> "Pattern Recognition, Third Edition"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Plus"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Plus"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(" (with CD-ROM)"))))))))))
  Transformation: Principles Of Computer Security: Security+ And Beyond -> Principles of Computer Security: Security + and Beyond (with CD-ROM)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Plus"), 1)))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Plus"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1)))))
  Transformation: Principles of Computer Security: Security + and Beyond (with CD-ROM) -> Principles Of Computer Security: Security+ And Beyond
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))
  Transformation: "Conklin, Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck" -> CONKLIN
  Transformation: "Sherman, William R.; Craig, Alan B." -> SHERMAN
  Transformation: "Smith, Colin" -> SMITH
  Transformation: XQuery: The XML Query Language -> XQUERY
  Transformation: "Morelli, Ralph/ Walde, Ralph" -> MORELLI
  Transformation: "Nielsen, Jakob:" -> NIELSEN
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck\"")))
  Transformation: CONKLIN -> "Conklin, Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" 1/"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 5), RelativePosition(x, 6)))))
  Transformation: Business Data Communications -> Business Data Communications 1/e
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))
  Transformation: Business Data Communications 1/e -> Business Data Communications
Program: Concat(ConstStr("FOROUZA"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))))
  Transformation: None -> FOROUZAN
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), -1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), -1))), ConstStr("one"))
  Transformation: FOROUZAN -> None
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))
  Transformation: Essentials of Computer Architecture -> ESSENTIALS COMPUTER ARCHITECTURE
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" of "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))
  Transformation: ESSENTIALS COMPUTER ARCHITECTURE -> Essentials of Computer Architecture
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Software Engineering and Computer Games -> Software Engineering &amp; Computer Games
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" and "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Software Engineering &amp; Computer Games -> Software Engineering and Computer Games
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("udy\"")))))
  Transformation: Rucker -> "Rucker, Rudy"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" Student Edition with "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("D-R"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("\""))))))))))))
  Transformation: "Microsoft Office Access 2003: A Professional Approach, by Juarez, Comprehensive" -> "Microsoft Office Access 2003 : A Professional Approach, Comprehensive Student Edition with CD-ROM"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", by Juarez, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), ConstStr("\""))))))
  Transformation: "Microsoft Office Access 2003 : A Professional Approach, Comprehensive Student Edition with CD-ROM" -> "Microsoft Office Access 2003: A Professional Approach, by Juarez, Comprehensive"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), 1))), Concat(ConstStr("on "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)))
  Transformation: JUAREZ -> Jon Juarez
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(" - "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(" Edition"))))))))))
  Transformation: "The X Window System: Programming and Applications with XT, OSF/Motif" -> The X Window System Programming and Applications with Xt - OSF Motif Edition
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Alphanumeric◦',' or 'and'"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦',' or 'and'"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace◦Hyphen"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case◦Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1))), Concat(ConstStr("/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))))
  Transformation: The X Window System Programming and Applications with Xt - OSF Motif Edition -> "The X Window System: Programming and Applications with XT, OSF/Motif"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(": Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K"))
  Transformation: COMPUTERS AS COMPONENTS -> Computers As Components: Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Hash", "ε"), 1))))
  Transformation: TCP/IP Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series) -> TCP/IP SOCKETS IN C#
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), 1))), ConstStr(" Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)"))
  Transformation: TCP/IP SOCKETS IN C# -> TCP/IP Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("ichael J. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("onahoo, Kenneth L. Calvert\"")))))))))
  Transformation: "Makofske, David" -> "David Makofske, Michael J. Donahoo, Kenneth L. Calvert"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: 3D User Interfaces: Theory and Practice -> 3D User Interfaces : Theory and Practice
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))
  Transformation: 3D User Interfaces : Theory and Practice -> 3D User Interfaces: Theory and Practice
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))
  Transformation: Doug A. Bowman;Ernst Kruijff;Joseph J. LaViola;Ivan Poupyrev -> "Bowman, Doug A."
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(";Ernst Kruijff;Joseph J. L"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1)))), ConstStr("Viola;Ivan Poupyrev"))))))
  Transformation: "Bowman, Doug A." -> Doug A. Bowman;Ernst Kruijff;Joseph J. LaViola;Ivan Poupyrev
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Socially Responsible It Management -> Socially Responsible IT Management
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in let sharedParsedNumber = ParseNumber(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), "(',', , , '.', , False)") in let sharedNumberFormat = "(, , , , , (, , , '.', , False))" in RangeConcat(RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(0, 1, Down)"), sharedNumberFormat), RangeConcat(RangeConstStr(", BK&amp;CD-ROM, pb, "), RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(0, 1, UpOrNext)"), sharedNumberFormat))), ConstStr("\"")))))
  Transformation: "Excel 2000: A Professional Approach, by Tobias, Level 2: Expert" -> "Excel 2000, BK&amp;CD-ROM, pb, 2001"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), ConstStr(": A Professional Approach, by Tobias, Level 2: Expert\"")))
  Transformation: "Excel 2000, BK&amp;CD-ROM, pb, 2001" -> "Excel 2000: A Professional Approach, by Tobias, Level 2: Expert"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", by Henry\"")))
  Transformation: Software Project Management: A Real-World Guide to Success -> "Software Project Management: A Real-World Guide to Success, by Henry"
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))
  Transformation: The AIX Survival Guide -> AIX SURVIVAL GUIDE
Program: Concat(ConstStr("The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))
  Transformation: AIX SURVIVAL GUIDE -> The AIX Survival Guide
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("NDRE"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("\""))))))))
  Transformation: A. Siegert -> "SIEGERT, ANDREAS"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))))
  Transformation: "SIEGERT, ANDREAS" -> A. Siegert
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", by Joseph J. Lazzaro\"")))
  Transformation: Adapting PCs for Disabilities -> "Adapting PCs for Disabilities, by Joseph J. Lazzaro"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 25))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))
  Transformation: Clustering Windows Servers: A Road Map for Enterprise Solutions -> Clustering Windows Server: A Road Map for Enterprise Solutions
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Colon"), 1))), Concat(ConstStr("ervers: "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Clustering Windows Server: A Road Map for Enterprise Solutions -> Clustering Windows Servers: A Road Map for Enterprise Solutions
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: "Mauler, Gary &amp; Milton Beebe" -> Gary Mauler
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" &amp; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("ilton Beebe\"")))))))
  Transformation: Gary Mauler -> "Mauler, Gary &amp; Milton Beebe"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), ConstStr(")\"")))))))))))))))
  Transformation: "Advances In Computers, Volume 62: Advances In Software Engineering (advances In Computers)" -> "Advances in Computers (Advances in Computers, 62)"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(", Volume "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" Software Engineering (advances "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))), ConstStr(")\"")))))))))
  Transformation: "Advances in Computers (Advances in Computers, 62)" -> "Advances In Computers, Volume 62: Advances In Software Engineering (advances In Computers)"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" V. "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))
  Transformation: Marvin Zelkowitz -> Marvin V. Zelkowitz
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (The Addison-Wesley Microsoft Technology Series)"))
  Transformation: Designing Applications with MSMQ: Message Queuing for Developers -> Designing Applications with MSMQ: Message Queuing for Developers (The Addison-Wesley Microsoft Technology Series)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Skew-Tolerant Circuit Design -> Skew Tolerant Circuit Design
  Transformation: White-Hat Security Arsenal: Tackling the Threats -> White Hat Security Arsenal: Tackling the Threats
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("-"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Skew Tolerant Circuit Design -> Skew-Tolerant Circuit Design
  Transformation: White Hat Security Arsenal: Tackling the Threats -> White-Hat Security Arsenal: Tackling the Threats
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (6th "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("dition)"))))
  Transformation: Software Engineering -> Software Engineering (6th Edition)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" - "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), ConstStr(" B"))))
  Transformation: Virtual Private Networks: Technologies and Solutions -> Virtual Private Networks - Technologies And Solutions B
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Words/dots/hyphens◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Camel Case"), -1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1)))))))))
  Transformation: Virtual Private Networks - Technologies And Solutions B -> Virtual Private Networks: Technologies and Solutions
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(","), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(",\"")))))
  Transformation: Ruixi Yuan; W. Timothy Strayer -> "Yuan,Strayer,"
Program: Concat(ConstStr("Ruixi "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; W. Timothy "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))))
  Transformation: "Yuan,Strayer," -> Ruixi Yuan; W. Timothy Strayer
Program: Concat(ConstStr("The "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))))
  Transformation: Statistical Imagination (w/CD) -> The Statistical Imagination
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (w/CD)"))
  Transformation: The Statistical Imagination -> Statistical Imagination (w/CD)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Ferris\"")))
  Transformation: Ritchey -> "Ritchey, Ferris"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (Addison-Wesley "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("eries)"))))))
  Transformation: Software Security: Building Security In -> Software Security: Building Security In (Addison-Wesley Software Security Series)
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))
  Transformation: "Understanding Virtual Reality: Interface, Application, and Design" -> UNDERSTANDING VIRTUAL REALITY
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(": Interface, Application, and Design\"")))
  Transformation: UNDERSTANDING VIRTUAL REALITY -> "Understanding Virtual Reality: Interface, Application, and Design"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", William R.; Craig, Alan B.\"")))
  Transformation: SHERMAN -> "Sherman, William R.; Craig, Alan B."
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (the Morgan Kaufmann Series In Data Management Systems)"))
  Transformation: Data Model Patterns: A Metadata Map -> Data Model Patterns: A Metadata Map (the Morgan Kaufmann Series In Data Management Systems)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: "Hay, David C" -> David C. Hay
  Transformation: "Rago, Stephen A" -> Stephen A. Rago
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", by Winston\"")))
  Transformation: On to C++ -> "On to C++, by Winston"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))
  Transformation: Patrick Henry Winston -> "Winston, Patrick Henry"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: "Winston, Patrick Henry" -> Patrick Henry Winston
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("."))
  Transformation: Cryptography Decrypted -> Cryptography Decrypted.
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1)))
  Transformation: Cryptography Decrypted. -> Cryptography Decrypted
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot◦Semicolon"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))))))))
  Transformation: "Mel, H.X.; Burnett, Doris; Baker, Doris M." -> "H. X. Mel, Doris Burnett, Doris M. Baker"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("."), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Lowercase word◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), -1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), ConstStr(".\"")))))))))))))
  Transformation: "H. X. Mel, Doris Burnett, Doris M. Baker" -> "Mel, H.X.; Burnett, Doris; Baker, Doris M."
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), -1)))), Concat(ConstStr("echnology in the "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), -1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case◦Upper Case", "ε"), -1))), ConstStr("nterprise: Pdas, Blackberries, and Mobile Devices\"")))))
  Transformation: INTEGRATING WIRELESS TECHNOLOG -> "Integrating Wireless Technology in the Enterprise: Pdas, Blackberries, and Mobile Devices"
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RelativePosition(x, 31))))
  Transformation: "Integrating Wireless Technology in the Enterprise: Pdas, Blackberries, and Mobile Devices" -> INTEGRATING WIRELESS TECHNOLOG
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" Morgan Kaufmann Series in Interactive Technologies)"))))
  Transformation: The Craft of Information Visualization: Readings and Reflections -> The Craft of Information Visualization: Readings and Reflections (The Morgan Kaufmann Series in Interactive Technologies)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("\"")))))
  Transformation: Benjamin B. Bederson Ben Shneiderman -> "Benjamin B. Bederson, Ben Shneiderman"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1)))))
  Transformation: "Benjamin B. Bederson, Ben Shneiderman" -> Benjamin B. Bederson Ben Shneiderman
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Upper Case◦Upper Case"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))))))))
  Transformation: Bluetooth Application Programming with the Java APIs (The Morgan Kaufmann Series in Networking) -> Bluetooth Application Programming With the Java Apis
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Lowercase word"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦Lowercase word", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1))), ConstStr("PIs (The Morgan Kaufmann Series in Networking)"))))))
  Transformation: Bluetooth Application Programming With the Java Apis -> Bluetooth Application Programming with the Java APIs (The Morgan Kaufmann Series in Networking)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" J.; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("imothy J.\"")))))))))))))))
  Transformation: "C Bala Kumar, Paul Kline, Tim Thompson" -> "Kumar, C. Bala; Kline, Paul J.; Thompson, Timothy J."
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Camel Case", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'◦Camel Case"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RelativePosition(x, -9))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))))))))
  Transformation: "Kumar, C. Bala; Kline, Paul J.; Thompson, Timothy J." -> "C Bala Kumar, Paul Kline, Tim Thompson"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" 5 "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ALL CAPS◦WhiteSpace", "ε"), 1), RelativePosition(x, -8)))))))
  Transformation: UNIX(R) System V Network Programming -> Unix System 5 Network Prog
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1), RelativePosition(x, -3)))), Concat(ConstStr(") "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" V "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Number◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1))), ConstStr("rogramming"))))))))
  Transformation: Unix System 5 Network Prog -> UNIX(R) System V Network Programming
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (7th Edition)"))
  Transformation: Understanding Data Communications -> Understanding Data Communications (7th Edition)
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))
  Transformation: The Theory of Computation -> Theory of Computation
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 3))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in x))
  Transformation: Theory of Computation -> The Theory of Computation
Program: Concat(ConstStr("\"Bernard "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", Addison-Wesley, B. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(". E. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("\"")))))))))
  Transformation: Moret -> "Bernard M. Moret, Addison-Wesley, B. M. E. Moret"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Camel Case"), -1))), Concat(ConstStr("/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr("onverters (Edn "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("eries for "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), ConstStr(" Engineers)"))))))))
  Transformation: Simplified Design of Voltage Frequency C -> Simplified Design of Voltage/Frequency Converters (Edn Series for Design Engineers)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace◦Left Parenthesis"), 1)))))
  Transformation: Simplified Design of Voltage/Frequency Converters (Edn Series for Design Engineers) -> Simplified Design of Voltage Frequency C
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))
  Transformation: "Genetic Algorithms in Search, Optimization, and Machine Learning" -> Genetic Algorithms
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" in Search, Optimization, and Machine Learning\"")))
  Transformation: Genetic Algorithms -> "Genetic Algorithms in Search, Optimization, and Machine Learning"
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))
  Transformation: The OpenVMS User's Guide (HP Technologies) -> OpenVMS User's Guide
Program: Concat(ConstStr("The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (HP Technologies)")))
  Transformation: OpenVMS User's Guide -> The OpenVMS User's Guide (HP Technologies)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Plus"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr("lus "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr("lus "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))))
  Transformation: Advanced C++ Programming Styles and Idioms -> Advanced C Plus Plus Programming Styles and Idioms
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("++ "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Advanced C Plus Plus Programming Styles and Idioms -> Advanced C++ Programming Styles and Idioms
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".,\"")))))
  Transformation: James O. Coplien -> "Coplien, James O.,"
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 50)))
  Transformation: Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in Data Management Systems) -> Database Transaction Models for Advanced Applicati
Program: Concat(ConstStr("Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 4))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace◦Lowercase word"), 1))), ConstStr("anagement Systems)")))))
  Transformation: Database Transaction Models for Advanced Applicati -> Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in Data Management Systems)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(". ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("dt)\"")))))
  Transformation: "Elmargarmid, Ahmed K.; Elmagarmid, Ahmed K." -> "Elmagarmid, Ahmed K. (Edt)"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("lmargarmid, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))))
  Transformation: "Elmagarmid, Ahmed K. (Edt)" -> "Elmargarmid, Ahmed K.; Elmagarmid, Ahmed K."
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("econd Edition\"")))))
  Transformation: A Mathematical Introduction to Logic (Softcover) -> "A Mathematical Introduction to Logic, Second Edition"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦ALL CAPS", "ε"), 1))), ConstStr("oftcover)"))))
  Transformation: "A Mathematical Introduction to Logic, Second Edition" -> A Mathematical Introduction to Logic (Softcover)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "Lowercase word◦WhiteSpace◦ALL CAPS"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr("eries "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), 1), RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "Lowercase word◦WhiteSpace◦ALL CAPS"), 1))), ConstStr("ngineering)"))))))))))))))
  Transformation: CMM in Practice: Processes for Executing Software Projects at Infosys -> CMM in Practice: Processes for Executing Software Projects at Infosys (The SEI Series in Software Engineering)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))))
  Transformation: "Jalote, Pankaj" -> "Pankaj Jalote, P. Jalote"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))
  Transformation: Netspionage : The Global Threats to Information -> Netspionage: The Global Threats to Information
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Netspionage: The Global Threats to Information -> Netspionage : The Global Threats to Information
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), ConstStr("\"")))))))))
  Transformation: "William C. Boni, Gerald L. Kovacich" -> "Boni, William C.; Kovacich, Gerald"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" L. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))
  Transformation: "Boni, William C.; Kovacich, Gerald" -> "William C. Boni, Gerald L. Kovacich"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RelativePosition(x, -6))))))
  Transformation: Photoshop and Dreamweaver Integration -> PHOTOSHOP &amp; DREAMWEAVER INTEGR
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Upper Case"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦Upper Case", "ε"), 1)))), ConstStr("ntegration"))))
  Transformation: PHOTOSHOP &amp; DREAMWEAVER INTEGR -> Photoshop and Dreamweaver Integration
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", Colin\"")))
  Transformation: SMITH -> "Smith, Colin"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))))
  Transformation: "The Java Developers Almanac 1.4, Volume 2: Examples and Quick Reference (4th Edition)" -> The Java Developers Almanac 1.4: Examples and Quick Reference
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(", Volume "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in let sharedParsedDt = ParsePartialDateTime(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), ["H"]) in let sharedDtFormat = "H" in DtRangeConcat(RangeFormatDateTime(RangeRoundDateTime(sharedParsedDt, "({Hour=2, Minute=0, Second=0, Millisecond=0, HourInPeriod=2, Period=0}, 3, Hour, Down, , 0)"), sharedDtFormat), DtRangeConcat(DtRangeConstStr(": Examples and Quick Reference ("), RangeFormatDateTime(RangeRoundDateTime(sharedParsedDt, "({Hour=2, Minute=0, Second=0, Millisecond=0, HourInPeriod=2, Period=0}, 3, Hour, UpOrNext, Hour, 1)"), sharedDtFormat))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 2)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦',' or 'and'"), 1))), ConstStr("dition)\""))))))))
  Transformation: The Java Developers Almanac 1.4: Examples and Quick Reference -> "The Java Developers Almanac 1.4, Volume 2: Examples and Quick Reference (4th Edition)"
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1)))
  Transformation: The Guru's Guide to SQL Server Architecture and Internals -> The Guru's Guide to SQL Server Architecture
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" and Internals"))
  Transformation: The Guru's Guide to SQL Server Architecture -> The Guru's Guide to SQL Server Architecture and Internals
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1), RelativePosition(x, -8)))), ConstStr("ssential C++"))
  Transformation: Idioms of the Greek New Testament -> Essential C++
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RelativePosition(x, 6), RelativePosition(x, 7)))), ConstStr("dioms of the Greek New Testament"))
  Transformation: Essential C++ -> Idioms of the Greek New Testament
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))))
  Transformation: Project-Based Software Engineering: An Object-Oriented Approach -> Project Based Software Engineering
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("-"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(": An Object-Oriented Approach"))))
  Transformation: Project Based Software Engineering -> Project-Based Software Engineering: An Object-Oriented Approach
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Evelyn; Leblanc, Cathie\"")))
  Transformation: Stiller -> "Stiller, Evelyn; Leblanc, Cathie"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Problem Solving And Programming Concepts -> Problem Solving &amp; Programming Concepts
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" And "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Problem Solving &amp; Programming Concepts -> Problem Solving And Programming Concepts
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Maureen\"")))
  Transformation: Sprankle -> "Sprankle, Maureen"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -9)))))))))
  Transformation: "Mpls Network Management: Mibs, Tools, and Techniques" -> Mpls Network Management Mibs Tools &amp; Tec
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(", and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("echniques\"")))))))))
  Transformation: Mpls Network Management Mibs Tools &amp; Tec -> "Mpls Network Management: Mibs, Tools, and Techniques"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\"")))
  Transformation: "Nadeau, Thomas D." -> "Nadeau, Thomas D"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr(".\"")))
  Transformation: "Nadeau, Thomas D" -> "Nadeau, Thomas D."
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -2), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" [Hardcover] by.\"")))))))))
  Transformation: Discrete Mathematics With Combinatorics Second Edition -> "Discrete Mathematics with Combinatorics, Second Edition [Hardcover] by."
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Bracket"), 1)))))
  Transformation: "Discrete Mathematics with Combinatorics, Second Edition [Hardcover] by." -> Discrete Mathematics With Combinatorics Second Edition
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "\"Anderson, James A.\"": "0"})
  Transformation: "Anderson, James A." -> 0
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "0": "\"Anderson, James A.\""})
  Transformation: 0 -> "Anderson, James A."
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -2))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("nalysis"))))))
  Transformation: Distributed Operating Systems &amp; Algorithms -> Distributed Operating Systems and Algorithm Analysis
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(" &amp; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("lgorithms"))))
  Transformation: Distributed Operating Systems and Algorithm Analysis -> Distributed Operating Systems &amp; Algorithms
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", RandyJohnson, Theodore\"")))
  Transformation: Chow -> "Chow, RandyJohnson, Theodore"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(": A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)"))
  Transformation: Subdivision Methods for Geometric Design -> Subdivision Methods for Geometric Design: A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; Henrik "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("eimer"))))))
  Transformation: "Warren, Joe" -> Joe Warren; Henrik Weimer
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))
  Transformation: Joe Warren; Henrik Weimer -> "Warren, Joe"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The Morgan Kaufmann Series "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr(" Artificial Intelligence)"))))
  Transformation: Evolutionary Computation in Bioinformatics -> Evolutionary Computation in Bioinformatics (The Morgan Kaufmann Series in Artificial Intelligence)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("~David W. Corne"))
  Transformation: Gary B. Fogel -> Gary B. Fogel~David W. Corne
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Tilde"), 1)))
  Transformation: Gary B. Fogel~David W. Corne -> Gary B. Fogel
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("p "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("echnologies)"))))))
  Transformation: Trucluster Server Handbook -> Trucluster Server Handbook (Hp Technologies)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: "Fafrak, Scott; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad" -> Scott Fafrak
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad\"")))))
  Transformation: Scott Fafrak -> "Fafrak, Scott; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1)))))))
  Transformation: HackNotes(tm) Windows Security Portable Reference -> Windows Security Portable Reference: Hack Notes
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr("(tm) "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))))
  Transformation: Windows Security Portable Reference: Hack Notes -> HackNotes(tm) Windows Security Portable Reference
Program: Concat(ConstStr("\"Viotto, Kate"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Double Quote"), 1), RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1))))
  Transformation: "O'Dea, Michael" -> "Viotto, Kate"
Program: Concat(ConstStr("\"O'Dea, Michael"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Double Quote"), 1), RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1))))
  Transformation: "Viotto, Kate" -> "O'Dea, Michael"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" - "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))
  Transformation: The Oracle(R) Designer/2000 Handbook -> The Oracle Designer - 2000 Handbook
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1), RelativePosition(x, 6)))), Concat(ConstStr(") "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr("/"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))))
  Transformation: The Oracle Designer - 2000 Handbook -> The Oracle(R) Designer/2000 Handbook
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr(",\"")))))
  Transformation: Carrie Anderson David Wendelken -> "Wendelken, David,"
Program: Concat(ConstStr("Carrie Anderson "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))))
  Transformation: "Wendelken, David," -> Carrie Anderson David Wendelken
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), ConstStr(" -OS"))
  Transformation: LDAP Directories Explained: An Introduction and Analysis -> LDAP DIRECTORIES EXPLAINED -OS
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), ConstStr(": An Introduction and Analysis"))))
  Transformation: LDAP DIRECTORIES EXPLAINED -OS -> LDAP Directories Explained: An Introduction and Analysis
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))))
  Transformation: Advanced Use Case Modeling : Software Systems (Paperback) -> Advanced Use Case Modeling: Software Systems
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (Paperback)"))))
  Transformation: Advanced Use Case Modeling: Software Systems -> Advanced Use Case Modeling : Software Systems (Paperback)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))
  Transformation: "Frank Armour , Granville Miller" -> "Armour, Frank, Miller, Granville"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" , "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))
  Transformation: "Armour, Frank, Miller, Granville" -> "Frank Armour , Granville Miller"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Juniper Networks(R) Field Guide and Reference -> Juniper Networks Field Guide and Reference
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr(") "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))
  Transformation: Juniper Networks Field Guide and Reference -> Juniper Networks(R) Field Guide and Reference
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: "Garrett, AvivaDrenan, GaryMorris, CrisJuniper&reg; Networks" -> Aviva Garrett
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("Drenan, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("aryMorris, CrisJuniper&reg; Networks\"")))))))
  Transformation: Aviva Garrett -> "Garrett, AvivaDrenan, GaryMorris, CrisJuniper&reg; Networks"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (MicrosoftN"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("T Development Series)"))))
  Transformation: Essential Windows Workflow Foundation -> Essential Windows Workflow Foundation (MicrosoftNET Development Series)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))
  Transformation: "Shukla, Dharma, Schmidt, Bob" -> "Dharma Shukla, Bob Schmidt"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))
  Transformation: "Dharma Shukla, Bob Schmidt" -> "Shukla, Dharma, Schmidt, Bob"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" - "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("Left Parenthesis◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("tory of "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("Hyphen◦ALL CAPS", "ε"), 1))), ConstStr("2"))))))))
  Transformation: Building an Object-Oriented Database System (The Morgan Kaufmann Series in Data Management Systems) -> Building an Object-Oriented Database System - The Story of O2
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Camel Case"), -1))), ConstStr(" Morgan Kaufmann Series in Data Management Systems)"))))
  Transformation: Building an Object-Oriented Database System - The Story of O2 -> Building an Object-Oriented Database System (The Morgan Kaufmann Series in Data Management Systems)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(";"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), Concat(ConstStr(";"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦ALL CAPS", "ε"), 1))), ConstStr(".,\"")))))))))))))))
  Transformation: "Francois Bancilhon, Claude Delobel, Paris Kanellakis" -> "Bancilhon, Francois;Delobel, Claude;Kanellakis, Paris C.,"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Semicolon"), -1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma◦WhiteSpace"), -1))), ConstStr("\"")))))))))))))
  Transformation: "Bancilhon, Francois;Delobel, Claude;Kanellakis, Paris C.," -> "Francois Bancilhon, Claude Delobel, Paris Kanellakis"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(" (7th Edition) (International Computer Science Series)"))
  Transformation: SOFTWARE ENGINEERING -> Software Engineering (7th Edition) (International Computer Science Series)
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))))
  Transformation: Software Engineering (7th Edition) (International Computer Science Series) -> SOFTWARE ENGINEERING
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "SOMMERVILL": "N/A"})
  Transformation: SOMMERVILL -> N/A
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "N/A": "SOMMERVILL"})
  Transformation: N/A -> SOMMERVILL
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))), ConstStr(" &amp;"))))
  Transformation: "Security Education, Awareness, and Training : SEAT from Theory to Practice" -> SECURITY EDUCATION AWARENESS &amp;
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), ConstStr(", Awareness, and Training : SEAT from Theory to Practice\"")))
  Transformation: SECURITY EDUCATION AWARENESS &amp; -> "Security Education, Awareness, and Training : SEAT from Theory to Practice"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", D"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1)))), ConstStr(". Lynn Fischer, Joseph A. Grau\"")))))))
  Transformation: "Roper, Carl" -> "Carl Roper, Dr. Lynn Fischer, Joseph A. Grau"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Single Quote"), 1)))), Concat(ConstStr("dministratorandapos;"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))))
  Transformation: Digital UNIX System Administrator's Guide (HP Technologies) -> Digital Unix System Administratorandapos;s Guide
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RelativePosition(x, -16))), Concat(ConstStr("'"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (HP Technologies)"))))))))
  Transformation: Digital Unix System Administratorandapos;s Guide -> Digital UNIX System Administrator's Guide (HP Technologies)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr("/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Right Parenthesis"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Right Parenthesis"), 1)))), ConstStr("\"")))))))
  Transformation: Programming Pearls (2nd Edition) (Paperback) -> "Programming Pearls, 2/e"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr("nd Edition) ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("aperback)"))))))
  Transformation: "Programming Pearls, 2/e" -> Programming Pearls (2nd Edition) (Paperback)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Jon\"")))
  Transformation: Bentley -> "Bentley, Jon"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("."))))
  Transformation: The Struts Framework: Practical Guide for Java Programmers -> The Struts Framework. Practical Guide for Java Programmers.
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1)))))
  Transformation: The Struts Framework. Practical Guide for Java Programmers. -> The Struts Framework: Practical Guide for Java Programmers
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr(".\"")))))
  Transformation: Sue Spielman -> "Spielman, S."
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("ue "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: "Spielman, S." -> Sue Spielman
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))))
  Transformation: Readings in Information Visualization : Using Vision to Think (Morgan Kaufmann Series in Interactive Technologies) -> Readings in Information Visualization: Using Vision to Think
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (Morgan Kaufmann Series in Interactive Technologies)"))))
  Transformation: Readings in Information Visualization: Using Vision to Think -> Readings in Information Visualization : Using Vision to Think (Morgan Kaufmann Series in Interactive Technologies)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))))))
  Transformation: "Stuart K. Card, Jock D. Mackinlay, Ben Shneiderman" -> "Card, Stuart K.; Mackinlay, Jock D.; Shneiderman, Ben"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))))))
  Transformation: "Card, Stuart K.; Mackinlay, Jock D.; Shneiderman, Ben" -> "Stuart K. Card, Jock D. Mackinlay, Ben Shneiderman"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(": Designing Fast Cmos Circuits"))
  Transformation: LOGICAL EFFORT -> Logical Effort: Designing Fast Cmos Circuits
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr(".\"")))))
  Transformation: "Ivan Edward Sutherland, Robert F. Sproull, David Harris" -> "Sutherland, Ivan E."
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr("dward "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", Robert F. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("proull, David Harris\"")))))))
  Transformation: "Sutherland, Ivan E." -> "Ivan Edward Sutherland, Robert F. Sproull, David Harris"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))))
  Transformation: Artificial Intelligence : A Guide to Intelligent Systems (Softcover) -> Artificial Intelligence: A Guide To Intelligent Systems
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("oftcover)"))))))))))
  Transformation: Artificial Intelligence: A Guide To Intelligent Systems -> Artificial Intelligence : A Guide to Intelligent Systems (Softcover)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 19), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Number"), 1))), Concat(ConstStr(") Yukon "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Number◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))
  Transformation: Microsoft SQL Server 2005 New Features -> Microsoft(r) Yukon New Features
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" SQL Server 2005 "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Microsoft(r) Yukon New Features -> Microsoft SQL Server 2005 New Features
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Lowercase word"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1))), Concat(ConstStr(", Volume "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), ConstStr(")\"")))))))
  Transformation: TCP/IP Illustrated : The Protocols v. 1 (APC) (Softcover) -> "The Protocols (TCP/IP Illustrated, Volume 1)"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" : "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1)))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr(" (A"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Forward Slash"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Forward Slash"), 1))), ConstStr(") (Softcover)")))))))))))
  Transformation: "The Protocols (TCP/IP Illustrated, Volume 1)" -> TCP/IP Illustrated : The Protocols v. 1 (APC) (Softcover)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: W.Richard Stevens -> W. Richard Stevens
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("."), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: W. Richard Stevens -> W.Richard Stevens
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))
  Transformation: MFC Internals: Inside the Microsoft(c) Foundation Class Architecture -> Mfc Internals: Inside the Microsoft Foundation Class Architecture
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Words/dots/hyphens◦WhiteSpace◦Camel Case", "WhiteSpace"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1)))), Concat(ConstStr(") "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case◦WhiteSpace", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))))
  Transformation: Mfc Internals: Inside the Microsoft Foundation Class Architecture -> MFC Internals: Inside the Microsoft(c) Foundation Class Architecture
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("cott\"")))))))))
  Transformation: George Shepherd Scot Wingo -> "Shepherd, George; Wingo, Scott"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -3))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))))))
  Transformation: "Shepherd, George; Wingo, Scott" -> George Shepherd Scot Wingo
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" Korper and Ellis E-Commerce Books "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 2))), ConstStr("eries)"))))))
  Transformation: The Internet Security Guidebook: From Planning to Deployment -> The Internet Security Guidebook: From Planning to Deployment (The Korper and Ellis E-Commerce Books Series)
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), 1))), ConstStr("Query: The XML Query Language"))
  Transformation: XQUERY -> XQuery: The XML Query Language
Program: Concat(ConstStr("T"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 6), RelativePosition(x, 8))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x))))
  Transformation: XML Schema Companion -> The Xml Schema Companion
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: The Xml Schema Companion -> XML Schema Companion
Program: Concat(ConstStr("Neil "), let columnName = "0" in let x = ChooseInput(vs, columnName) in x)
  Transformation: Bradley -> Neil Bradley
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Dot"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))
  Transformation: Teach Yourself Microsoft Visual Basic .Net 2003 in 21 Days -> Teach Yourself Microsoft Visual BasicNet 2003 in 21 Days
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1))), Concat(ConstStr(" ."), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Teach Yourself Microsoft Visual BasicNet 2003 in 21 Days -> Teach Yourself Microsoft Visual Basic .Net 2003 in 21 Days
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), ConstStr("\"")))
  Transformation: "Java, Java, Java: Object-Oriented Problem Solving, by Morelli, 3rd Edition" -> "JAVA, JAVA, JAVA"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1)))), ConstStr(": Object-Oriented Problem Solving, by Morelli, 3rd Edition\"")))
  Transformation: "JAVA, JAVA, JAVA" -> "Java, Java, Java: Object-Oriented Problem Solving, by Morelli, 3rd Edition"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1))), Concat(ConstStr("alph/ Walde, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1))), ConstStr("alph\"")))))))
  Transformation: MORELLI -> "Morelli, Ralph/ Walde, Ralph"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)"))
  Transformation: Moving Objects Databases -> Moving Objects Databases (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("?"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 3), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))))
  Transformation: "Guting, Ralf Hartmut; Schneider, Markus" -> "Ralf Hartmut G?ting, Markus Schneider"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Question Mark"), 1), RegexPositionRelative(x, RegexPair("ε", "Question Mark"), 1))), Concat(ConstStr("uting, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))
  Transformation: "Ralf Hartmut G?ting, Markus Schneider" -> "Guting, Ralf Hartmut; Schneider, Markus"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦Camel Case", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Ampersand"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), ConstStr(";"))))))
  Transformation: Oracle JDeveloper 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF -> ORACLE JDEVELOPER FOR FORMS &amp;
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1)))), ConstStr("Developer 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF"))
  Transformation: ORACLE JDEVELOPER FOR FORMS &amp; -> Oracle JDeveloper 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), ConstStr(", Peter\"")))
  Transformation: KOLETZKE/MILLS -> "Koletzke, Peter"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), ConstStr("/MILLS"))
  Transformation: "Koletzke, Peter" -> KOLETZKE/MILLS
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RelativePosition(x, 26)))), Concat(ConstStr(" -"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1), RelativePosition(x, -12)))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))))))
  Transformation: "Bulletproof Wireless Security: GSM, UMTS, 802.11 and Ad Hoc Security" -> BULLETPROOF WIRELESS SECU -OS
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), ConstStr(" Security: GSM, UMTS, 802.11 and Ad Hoc Security\"")))
  Transformation: BULLETPROOF WIRELESS SECU -OS -> "Bulletproof Wireless Security: GSM, UMTS, 802.11 and Ad Hoc Security"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))))))
  Transformation: COORDINATING USER INTERFACES FOR CONSISTENCY -> Coordinating User Interfaces for Consistency
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", Jakob:\"")))
  Transformation: NIELSEN -> "Nielsen, Jakob:"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", by "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("ohl, 2nd Edition\"")))))
  Transformation: Object-Oriented Programming Using C++ -> "Object-Oriented Programming Using C++, by Pohl, 2nd Edition"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" , University of California, Santa Cruz\"")))))
  Transformation: "Pohl, Ira" -> "Ira Pohl , University of California, Santa Cruz"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))
  Transformation: "Ira Pohl , University of California, Santa Cruz" -> "Pohl, Ira"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", by "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), 1))), ConstStr("dams\"")))))
  Transformation: Java: An Introduction to Computing -> "Java: An Introduction to Computing, by Adams"
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("/ "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), ConstStr(".\"")))))))))
  Transformation: "Joel Adams, Larry R. Nyhoff, Jeffrey Nyhoff, Joel C. Adams, Jeffrey L. Nyhoff" -> "Adams, Joel/ Nyhoff, Jeffrey L."
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("arry R. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" C. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))))))))))))
  Transformation: "Adams, Joel/ Nyhoff, Jeffrey L." -> "Joel Adams, Larry R. Nyhoff, Jeffrey Nyhoff, Joel C. Adams, Jeffrey L. Nyhoff"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Single Quote"), 1))), Concat(ConstStr("onandapos;"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦ALL CAPS", "ε"), 1))), Concat(ConstStr("oandapos;"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))
  Transformation: GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers -> GUI Bloopers: Donandapos;ts and Doandapos;s for Software Developers and Web Designers
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 17))), Concat(ConstStr("'"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RelativePosition(x, 34))), Concat(ConstStr("'"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))
  Transformation: GUI Bloopers: Donandapos;ts and Doandapos;s for Software Developers and Web Designers -> GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))))
  Transformation: Johnson. Jeff -> Jeff Johnson
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))
  Transformation: Jeff Johnson -> Johnson. Jeff
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))))))
  Transformation: "Essential Java Class Reference for Programmers, The (3rd Edition)" -> The Essential Java Class Reference For Programmers
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" (3rd "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("dition)\"")))))))))))
  Transformation: The Essential Java Class Reference For Programmers -> "Essential Java Class Reference for Programmers, The (3rd Edition)"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Plus", "ε"), -1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))
  Transformation: Efficient C++ Performance Programming Techniques -> Efficient C++: Performance Programming Techniques
Program: Concat(ConstStr("Dov "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))
  Transformation: "Bulka, Mayhew," -> Dov Bulka
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(", Mayhew,\"")))
  Transformation: Dov Bulka -> "Bulka, Mayhew,"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (The Morgan Kaufmann Series in Computer Graphics)"))
  Transformation: Curves and Surfaces for CAGD: A Practical Guide -> Curves and Surfaces for CAGD: A Practical Guide (The Morgan Kaufmann Series in Computer Graphics)
Program: Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1), RelativePosition(x, -6)))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(",\"")))))))
  Transformation: "Farin, Gerald" -> "Gerald E. Farin,"
Program: Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (2nd Edition) (Softcover)"))
  Transformation: Computer Systems Design and Architecture -> Computer Systems Design and Architecture (2nd Edition) (Softcover)
Program: Concat(ConstStr("\"Vincent P. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("arry F. Jordan\"")))))
  Transformation: Heuring -> "Vincent P. Heuring, Harry F. Jordan"
Program: let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))
  Transformation: "Vincent P. Heuring, Harry F. Jordan" -> Heuring
