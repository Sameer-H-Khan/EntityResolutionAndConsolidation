let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)==>Computers as Theatre->Computers As Theatre
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))))==>Computers As Theatre->Computers as Theatre
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Brenda Laurel->"Laurel, Brenda"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Laurel, Brenda"->Brenda Laurel
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Alphanumeric"), -1))), Concat(ConstStr(" : "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" and Correcting System Problems (HP "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("echnologies)"))))))))))==>Tru64 Unix Troubleshooting Diagnosing &amp;->Tru64 UNIX Troubleshooting : Diagnosing and Correcting System Problems (HP Technologies)
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), ConstStr(" &amp;"))))==>Tru64 UNIX Troubleshooting : Diagnosing and Correcting System Problems (HP Technologies)->Tru64 Unix Troubleshooting Diagnosing &amp;
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(", Steven Hancock\"")))))==>"Moore, Martin L"->"Martin Moore, Steven Hancock"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" L\"")))))==>"Martin Moore, Steven Hancock"->"Moore, Martin L"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (The Addison-Wesley Signature Series)"))==>Refactoring Databases: Evolutionary Database Design->Refactoring Databases: Evolutionary Database Design (The Addison-Wesley Signature Series)
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Refactoring Databases: Evolutionary Database Design (The Addison-Wesley Signature Series)->Refactoring Databases: Evolutionary Database Design
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" W. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" J. "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))))))==>"Ambler, Scott; Sadalage, Pramodkumar"->Scott W. Ambler; Pramodkumar J. Sadalage
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1))), ConstStr("\"")))))))))==>Scott W. Ambler; Pramodkumar J. Sadalage->"Ambler, Scott; Sadalage, Pramodkumar"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("\""))))))==>The ACE Programmer's Guide: Practical Design Patterns for Network and Systems Programming->"ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))))))==>"ACE Programmer's Guide, The: Practical Design Patterns for Network and Systems Programming"->The ACE Programmer's Guide: Practical Design Patterns for Network and Systems Programming
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr("."), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ALL CAPS◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))))))==>Stephen D. Huston; James CE Johnson; Umar Syyid->"Huston, Stephen D.Johnson, James CESyyid, Umar"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("Dot◦Camel Case", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))))))))))==>"Huston, Stephen D.Johnson, James CESyyid, Umar"->Stephen D. Huston; James CE Johnson; Umar Syyid
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), ConstStr(" (Softcover) (CD-ROM)"))==>"Kernel Projects for Linux, by Nutt"->Kernel Projects for Linux (Softcover) (CD-ROM)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), ConstStr(", by Nutt\"")))==>Kernel Projects for Linux (Softcover) (CD-ROM)->"Kernel Projects for Linux, by Nutt"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Nutt, Gary J"->Gary Nutt
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" J\"")))))==>Gary Nutt->"Nutt, Gary J"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 4)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))))==>Practical Model-Based Testing: A Tools Approach->PRAC MODEL-BASED TESTING
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), 1))), ConstStr("ractical Model-Based Testing: A Tools Approach"))==>PRAC MODEL-BASED TESTING->Practical Model-Based Testing: A Tools Approach
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), ConstStr("\"")))==>"Utting, Mark Legeard, Bruno"->"Utting, Mark"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr(" Legeard, Bruno\"")))==>"Utting, Mark"->"Utting, Mark Legeard, Bruno"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), ConstStr("."))==>"Open Source Web Development with LAMP: Using Linux, Apache, MySQL, Perl, and PHP"->Open Source Web Development With Lamp.
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), ConstStr(" with LAMP: Using Linux, Apache, MySQL, Perl, and PHP\"")))==>Open Source Web Development With Lamp.->"Open Source Web Development with LAMP: Using Linux, Apache, MySQL, Perl, and PHP"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("/ "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr(".\"")))))==>"Lee, James B.; Ware, Brent"->"Lee, James/ Ware, Brent."
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\"")))))))==>"Lee, James/ Ware, Brent."->"Lee, James B.; Ware, Brent"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -8)))))))))))==>"C++ For C Programmers, Third Edition (3rd Edition)"->C++ for C Programmers 3ed
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))), Concat(ConstStr(", Third Edition ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), ConstStr("rd Edition)\"")))))==>C++ for C Programmers 3ed->"C++ For C Programmers, Third Edition (3rd Edition)"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))))))==>"Essential .NET, Volume I: The Common Language Runtime"->EssentialNET. Volume I: The Common Language Runtime
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" ."), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("\"")))))))==>EssentialNET. Volume I: The Common Language Runtime->"Essential .NET, Volume I: The Common Language Runtime"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))==>Don Box->Box
Concat(ConstStr("Don "), let columnName = "0" in let x = ChooseInput(vs, columnName) in x)==>Box->Don Box
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1))), Concat(ConstStr("ames "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))))==>Micro Java(TM) Game Development->Micro Java Games Development
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RelativePosition(x, -2), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(") "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RelativePosition(x, -14))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))))))))==>Micro Java Games Development->Micro Java(TM) Game Development
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("erhosek, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))))))==>David Fox;Roman Verhovsek->"Fox, David; Verhovsek, Roman; Verhosek, Roman"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(";"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1)))))))))==>"Fox, David; Verhovsek, Roman; Verhosek, Roman"->David Fox;Roman Verhovsek
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>SQL Queries for Mere Mortals: A Hands-On Guide to Data Manipulation in SQL->SQL Queries for Mere Mortals A Hands-On Guide to Data Manipulation in SQL
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦ALL CAPS◦WhiteSpace"), 1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>SQL Queries for Mere Mortals A Hands-On Guide to Data Manipulation in SQL->SQL Queries for Mere Mortals: A Hands-On Guide to Data Manipulation in SQL
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))==>"Hernandez, Michael J.; Viescas, John; Viescas, John L."->John Viescas
Concat(ConstStr("\"Hernandez, Michael "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" L.\"")))))))))))==>John Viescas->"Hernandez, Michael J.; Viescas, John; Viescas, John L."
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(": A User's Guide"))==>Linux System Administration->Linux System Administration: A User's Guide
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))==>Linux System Administration: A User's Guide->Linux System Administration
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Marcel\"")))==>Gagne->"Gagne, Marcel"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))==>"Gagne, Marcel"->Gagne
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" '"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))))))==>"Java(TM) Programming Language, The (4th Edition) (The Java Series)"->The 'java Programming Language
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("Single Quote◦Alphanumeric", "ε"), 1)))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("M) "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" (4th Edition) ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("Single Quote◦Alphanumeric", "ε"), 1)))), ConstStr(" Series)\"")))))))))))))==>The 'java Programming Language->"Java(TM) Programming Language, The (4th Edition) (The Java Series)"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -2), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))))))==>Ken Arnold James Gosling David Holmes->"Arnold, Ken; Gosling, James; Holmes, David"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Semicolon"), -1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))))))))))==>"Arnold, Ken; Gosling, James; Holmes, David"->Ken Arnold James Gosling David Holmes
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(", Vol. 4\"")))==>Neural Network Systems Techniques and Applications - Industrial and Manufacturing Systems->"Industrial and Manufacturing Systems, Vol. 4"
Concat(ConstStr("Neural Network "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" Techniques "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" Applications - "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))))))))==>"Industrial and Manufacturing Systems, Vol. 4"->Neural Network Systems Techniques and Applications - Industrial and Manufacturing Systems
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))==>"Leondes, Cornelius T.,"->"Leondes, Cornelius T."
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".,\"")))==>"Leondes, Cornelius T."->"Leondes, Cornelius T.,"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" : A Structured Approach, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Right Parenthesis"), 1)))), ConstStr(", pb, 1990\"")))))==>Business Programming Logic (4th Edition)->"Business Programming Logic : A Structured Approach, 4th edition, pb, 1990"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number◦Words/dots/hyphens"), 1), RegexPositionRelative(x, RegexPair("Number◦Words/dots/hyphens", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1)))), ConstStr(")"))))))==>"Business Programming Logic : A Structured Approach, 4th edition, pb, 1990"->Business Programming Logic (4th Edition)
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr("/Longhurst"))==>Jay Singelmann->Singelmann/Longhurst
Concat(ConstStr("Jay "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))==>Singelmann/Longhurst->Jay Singelmann
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))==>Database Administration: The Complete Guide to Practices and Procedures->Database Administration
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(": The Complete Guide to Practices and Procedures"))==>Database Administration->Database Administration: The Complete Guide to Practices and Procedures
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Mullins, Craig S."->Craig S. Mullins
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))==>Craig S. Mullins->"Mullins, Craig S."
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))==>Real 802.11 Security: Wi-Fi Protected Access and 802.11i->REAL 802.11 SECURITY
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), Concat(ConstStr(": Wi-Fi Protected "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦WhiteSpace"), 1))), Concat(ConstStr("ccess and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case◦Upper Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case"), -1)))))))))==>REAL 802.11 SECURITY->Real 802.11 Security: Wi-Fi Protected Access and 802.11i
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>"Jon Edney, William A. Arbaugh"->"Edney, Jon"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(", William A. Arbaugh\"")))))==>"Edney, Jon"->"Jon Edney, William A. Arbaugh"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x), Concat(ConstStr("-W/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))))))==>C++ By Dissection->C++ BY DISSECTION-W/CD
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Hyphen"), 1))))==>C++ BY DISSECTION-W/CD->C++ By Dissection
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))==>Ira Pohl->POHL
Concat(ConstStr("Ira "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x))==>POHL->Ira Pohl
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))))==>"Non-Photorealistic Computer Graphics: Modeling, Rendering and Animation"->"Non-Photorealistic Computer Graphics, Modeling, Rendering, and Animation"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Comma◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))))==>"Non-Photorealistic Computer Graphics, Modeling, Rendering, and Animation"->"Non-Photorealistic Computer Graphics: Modeling, Rendering and Animation"
Concat(ConstStr("\"By (author) "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" By (author) "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))==>"Strothotte, Thomas; Schlechtweg, Stefan"->"By (author) Strothotte, Thomas By (author) Schlechtweg, Stefan"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))==>"By (author) Strothotte, Thomas By (author) Schlechtweg, Stefan"->"Strothotte, Thomas; Schlechtweg, Stefan"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), -1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), -1)))))))))==>Smart Client Deployment with ClickOnce(TM): Deploying Windows Forms Applications with ClickOnce(TM)->Smart Client Deployment with Clickonce: Deploying Windows Forms Applications with Clickonce
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -5))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RelativePosition(x, -5), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), Concat(ConstStr("(TM)"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RelativePosition(x, -5))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RelativePosition(x, -5), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), ConstStr("(TM)"))))))))==>Smart Client Deployment with Clickonce: Deploying Windows Forms Applications with Clickonce->Smart Client Deployment with ClickOnce(TM): Deploying Windows Forms Applications with ClickOnce(TM)
Concat(ConstStr("\"Mackenzie, Duncan; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))==>"Noyes, Brian"->"Mackenzie, Duncan; Noyes, Brian"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))==>"Mackenzie, Duncan; Noyes, Brian"->"Noyes, Brian"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Managing Gigabytes: Compressing and Indexing Documents and Images (The Morgan.->Managing Gigabytes: Compressing and Indexing Documents and Images
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("organ."))))==>Managing Gigabytes: Compressing and Indexing Documents and Images->Managing Gigabytes: Compressing and Indexing Documents and Images (The Morgan.
let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "0": "Ian Witten"})==>0->Ian Witten
let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "Ian Witten": "0"})==>Ian Witten->0
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x)==>Constraint Processing->CONSTRAINT PROCESSING
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)==>CONSTRAINT PROCESSING->Constraint Processing
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x)==>"Dechter, Rina"->"DECHTER, RINA"
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)==>"DECHTER, RINA"->"Dechter, Rina"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(": Techniques for Building Corporate "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("emories"))))==>Applying Knowledge Management->Applying Knowledge Management: Techniques for Building Corporate Memories
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))==>Applying Knowledge Management: Techniques for Building Corporate Memories->Applying Knowledge Management
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Watson, Ian D"->Ian Watson
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" D\"")))))==>Ian Watson->"Watson, Ian D"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))==>"TCP/IP Clearly Explained, Fourth Edition (The Morgan Kaufmann Series in Networking)"->TCP/IP Clearly Explained
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Fourth Edition (The Morgan Kaufmann Series in Networking)\"")))==>TCP/IP Clearly Explained->"TCP/IP Clearly Explained, Fourth Edition (The Morgan Kaufmann Series in Networking)"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Pete Loshin->"Loshin, Pete"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Loshin, Pete"->Pete Loshin
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Number◦WhiteSpace◦ALL CAPS", "ε"), 1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1))), ConstStr("M D")))==>SimNet XPert Release 4 Combined PageOut Edition->SIMNET XPERT RELEASE 4 COM D
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case"), -1)))), ConstStr("ombined PageOut Edition"))))==>SIMNET XPERT RELEASE 4 COM D->SimNet XPert Release 4 Combined PageOut Edition
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr("\"")))))==>Triad Interactive->"Triad, Interactive"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))==>"Triad, Interactive"->Triad Interactive
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("Colon", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))==>The Humane Interface :New Directions for Designing Interactive Systems->The Humane Interface: New Directions for Designing Interactive Systems
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("Colon", "ε"), -1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))==>The Humane Interface: New Directions for Designing Interactive Systems->The Humane Interface :New Directions for Designing Interactive Systems
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Raskin, Jef"->Jef Raskin
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Jef Raskin->"Raskin, Jef"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>JDBC: Practical Guide for Java Programmers (The Practical Guides)->JDBC: Practical Guide for Java Programmers
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("uides)"))))==>JDBC: Practical Guide for Java Programmers->JDBC: Practical Guide for Java Programmers (The Practical Guides)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))==>Gregory D. Speegle->"Speegle, Gregory D."
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Speegle, Gregory D."->Gregory D. Speegle
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Hyphen"), 1))))==>"Essential Check Point FireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide"->ESSENTIAL CHECK POINT FIREWALL
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), -1)))), ConstStr("ireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide\"")))==>ESSENTIAL CHECK POINT FIREWALL->"Essential Check Point FireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))==>Dameon D. Welch-Abernathy->"Welch-Abernathy, Dameon D."
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Welch-Abernathy, Dameon D."->Dameon D. Welch-Abernathy
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Practical Issues in Database Management - A Reference for the Thinking Practitioner->Practical Issues in Database Management: A Reference for the Thinking Practitioner
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" - "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Practical Issues in Database Management: A Reference for the Thinking Practitioner->Practical Issues in Database Management - A Reference for the Thinking Practitioner
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Pascal, Fabian,"->Fabian Pascal
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(",\"")))))==>Fabian Pascal->"Pascal, Fabian,"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1)))==>Fundamentals of Thermal-Fluid Sciences(2nd edition)->Fundamentals of Thermal-Fluid Sciences
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("(2nd edition)"))==>Fundamentals of Thermal-Fluid Sciences->Fundamentals of Thermal-Fluid Sciences(2nd edition)
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr("&nbsp;&nbsp;"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace◦Alphanumeric", "ε"), -1)))))==>"Yunus A. Cengel, Robert H. Turner, Yunus Cengel, Robert Turn"->Yunus A. Cengel&nbsp;&nbsp;Robert H. Turner
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Ampersand"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Ampersand"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("Semicolon◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -3))), ConstStr("\"")))))))))))))==>Yunus A. Cengel&nbsp;&nbsp;Robert H. Turner->"Yunus A. Cengel, Robert H. Turner, Yunus Cengel, Robert Turn"
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x)==>Applied Software Architecture->APPLIED SOFTWARE ARCHITECTURE
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)==>APPLIED SOFTWARE ARCHITECTURE->Applied Software Architecture
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Comma"), 1))), Concat(ConstStr("offmeister, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>"Christine Hofmeister, Robert Nord, Dilip Soni"->"Hoffmeister, Christine"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("ofmeister, Robert Nord, Dilip Soni\"")))))==>"Hoffmeister, Christine"->"Christine Hofmeister, Robert Nord, Dilip Soni"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "Camel Case◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Words/dots/hyphens◦WhiteSpace◦Words/dots/hyphens"), -1), RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), -1))))))))==>Data Structures from the Outside In : An Object Oriented Approach with Java 5. 0->Data Structures Outside In With Java
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" from the "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), ConstStr(" : An Object Oriented Approach with Java 5. 0"))))==>Data Structures Outside In With Java->Data Structures from the Outside In : An Object Oriented Approach with Java 5. 0
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))==>"Venugopal, Sesh"->Venugopal
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Sesh\"")))==>Venugopal->"Venugopal, Sesh"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1)))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Words/dots/hyphens◦WhiteSpace◦Number"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Comma◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))))))))==>"INSIDE WINDOWS STORAGE. Server Storage Technologies for Windows 2000, Windows Server 2003, and Beyond"->"Inside Windows Storage: Server Storage Technologies for Windows Server 2003, Windows 2000 and Beyond"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "WhiteSpace◦Words/dots/hyphens"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in let sharedParsedNumber = ParseNumber(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), -1), RegexPositionRelative(x, RegexPair("Number", "ε"), -1))), "(',', , , '.', , False)") in let sharedNumberFormat = "(, , , , , (, , , '.', , False))" in RangeConcat(RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(0, 4, Down)"), sharedNumberFormat), RangeConcat(RangeConstStr(", Windows Server "), RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(3, 4, UpOrNext)"), sharedNumberFormat))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Number◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\"")))))))))==>"Inside Windows Storage: Server Storage Technologies for Windows Server 2003, Windows 2000 and Beyond"->"INSIDE WINDOWS STORAGE. Server Storage Technologies for Windows 2000, Windows Server 2003, and Beyond"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))))))==>"Naik, Dilip C"->Dilip C. Naik Dilip Naik
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\"")))))==>Dilip C. Naik Dilip Naik->"Naik, Dilip C"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr("."), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Computer Accounting with Microsoft Great Plains 8. 0 w/ Software CD->Computer Accounting with Microsoft Great Plains 8.0 w/ Software CD
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Computer Accounting with Microsoft Great Plains 8.0 w/ Software CD->Computer Accounting with Microsoft Great Plains 8. 0 w/ Software CD
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))==>"Yacht, Carol; Crosson, Susan"->"Carol Yacht, Susan Crosson"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))==>"Carol Yacht, Susan Crosson"->"Yacht, Carol; Crosson, Susan"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr(" Gupta\"")))))==>Defend I.T.: Security by Example->"Defend I.T.: Security by Example, by Gupta"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))==>"Defend I.T.: Security by Example, by Gupta"->Defend I.T.: Security by Example
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("/ "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))==>Ajay Gupta; Scott Laliberte->"Gupta, Ajay/ Laliberte, Scott"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))))))==>"Gupta, Ajay/ Laliberte, Scott"->Ajay Gupta; Scott Laliberte
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), ConstStr(", pb, 2003\"")))==>Business Intelligence: The Savvy Manager's Guide (The Savvy Manager's Guides)->"Business Intelligence: The Savvy Manager's Guide, pb, 2003"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("uides)"))))==>"Business Intelligence: The Savvy Manager's Guide, pb, 2003"->Business Intelligence: The Savvy Manager's Guide (The Savvy Manager's Guides)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>David Loshin->"Loshin, David"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Loshin, David"->David Loshin
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" : "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1)))), Concat(ConstStr("honeandapos;"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, -9), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1), RelativePosition(x, 10))), ConstStr(" Society"))))))))))==>Mobile Connection the Cell Phones Impact->The Mobile Connection : The Cell Phoneandapos;s Impact on Society
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦ALL CAPS", "ε"), -1))), Concat(ConstStr("hones "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Lowercase word"), 1)))))))))==>The Mobile Connection : The Cell Phoneandapos;s Impact on Society->Mobile Connection the Cell Phones Impact
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RelativePosition(x, -5))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Ling, Richard"->Rich Ling
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("ichard\"")))))==>Rich Ling->"Ling, Richard"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Third Edition\"")))==>Pattern Recognition->"Pattern Recognition, Third Edition"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))==>"Pattern Recognition, Third Edition"->Pattern Recognition
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Plus"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Plus"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(" (with CD-ROM)"))))))))))==>Principles Of Computer Security: Security+ And Beyond->Principles of Computer Security: Security + and Beyond (with CD-ROM)
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Plus"), 1)))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Plus"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1)))))==>Principles of Computer Security: Security + and Beyond (with CD-ROM)->Principles Of Computer Security: Security+ And Beyond
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))==>"Conklin, Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck"->CONKLIN
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck\"")))==>CONKLIN->"Conklin, Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" 1/"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 5), RelativePosition(x, 6)))))==>Business Data Communications->Business Data Communications 1/e
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))==>Business Data Communications 1/e->Business Data Communications
Concat(ConstStr("FOROUZA"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))))==>None->FOROUZAN
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), -1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), -1))), ConstStr("one"))==>FOROUZAN->None
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))==>Essentials of Computer Architecture->ESSENTIALS COMPUTER ARCHITECTURE
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" of "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))==>ESSENTIALS COMPUTER ARCHITECTURE->Essentials of Computer Architecture
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x)==>Comer->COMER
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)==>COMER->Comer
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Software Engineering and Computer Games->Software Engineering &amp; Computer Games
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" and "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Software Engineering &amp; Computer Games->Software Engineering and Computer Games
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))==>"Rucker, Rudy"->Rucker
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("udy\"")))))==>Rucker->"Rucker, Rudy"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" Student Edition with "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("D-R"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("\""))))))))))))==>"Microsoft Office Access 2003: A Professional Approach, by Juarez, Comprehensive"->"Microsoft Office Access 2003 : A Professional Approach, Comprehensive Student Edition with CD-ROM"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", by Juarez, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), ConstStr("\""))))))==>"Microsoft Office Access 2003 : A Professional Approach, Comprehensive Student Edition with CD-ROM"->"Microsoft Office Access 2003: A Professional Approach, by Juarez, Comprehensive"
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))==>Jon Juarez->JUAREZ
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), 1))), Concat(ConstStr("on "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)))==>JUAREZ->Jon Juarez
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(" - "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(" Edition"))))))))))==>"The X Window System: Programming and Applications with XT, OSF/Motif"->The X Window System Programming and Applications with Xt - OSF Motif Edition
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Alphanumeric◦',' or 'and'"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦',' or 'and'"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace◦Hyphen"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case◦Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1))), Concat(ConstStr("/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))))==>The X Window System Programming and Applications with Xt - OSF Motif Edition->"The X Window System: Programming and Applications with XT, OSF/Motif"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Young, Douglas A."->Douglas A. Young
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))==>Douglas A. Young->"Young, Douglas A."
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))==>Computers As Components: Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K->COMPUTERS AS COMPONENTS
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(": Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K"))==>COMPUTERS AS COMPONENTS->Computers As Components: Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Wayne Wolf->"Wolf, Wayne"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Wolf, Wayne"->Wayne Wolf
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Hash", "ε"), 1))))==>TCP/IP Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)->TCP/IP SOCKETS IN C#
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), 1))), ConstStr(" Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)"))==>TCP/IP SOCKETS IN C#->TCP/IP Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>"David Makofske, Michael J. Donahoo, Kenneth L. Calvert"->"Makofske, David"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("ichael J. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("onahoo, Kenneth L. Calvert\"")))))))))==>"Makofske, David"->"David Makofske, Michael J. Donahoo, Kenneth L. Calvert"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>3D User Interfaces: Theory and Practice->3D User Interfaces : Theory and Practice
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))==>3D User Interfaces : Theory and Practice->3D User Interfaces: Theory and Practice
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))==>Doug A. Bowman;Ernst Kruijff;Joseph J. LaViola;Ivan Poupyrev->"Bowman, Doug A."
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(";Ernst Kruijff;Joseph J. L"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1)))), ConstStr("Viola;Ivan Poupyrev"))))))==>"Bowman, Doug A."->Doug A. Bowman;Ernst Kruijff;Joseph J. LaViola;Ivan Poupyrev
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Socially Responsible It Management->Socially Responsible IT Management
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)==>Socially Responsible IT Management->Socially Responsible It Management
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Erbschloe, Michael"->Michael Erbschloe
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Michael Erbschloe->"Erbschloe, Michael"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in let sharedParsedNumber = ParseNumber(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), "(',', , , '.', , False)") in let sharedNumberFormat = "(, , , , , (, , , '.', , False))" in RangeConcat(RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(0, 1, Down)"), sharedNumberFormat), RangeConcat(RangeConstStr(", BK&amp;CD-ROM, pb, "), RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(0, 1, UpOrNext)"), sharedNumberFormat))), ConstStr("\"")))))==>"Excel 2000: A Professional Approach, by Tobias, Level 2: Expert"->"Excel 2000, BK&amp;CD-ROM, pb, 2001"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), ConstStr(": A Professional Approach, by Tobias, Level 2: Expert\"")))==>"Excel 2000, BK&amp;CD-ROM, pb, 2001"->"Excel 2000: A Professional Approach, by Tobias, Level 2: Expert"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", by Henry\"")))==>Software Project Management: A Real-World Guide to Success->"Software Project Management: A Real-World Guide to Success, by Henry"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))==>"Software Project Management: A Real-World Guide to Success, by Henry"->Software Project Management: A Real-World Guide to Success
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Joel Henry->"Henry, Joel"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Henry, Joel"->Joel Henry
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))==>The AIX Survival Guide->AIX SURVIVAL GUIDE
Concat(ConstStr("The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))==>AIX SURVIVAL GUIDE->The AIX Survival Guide
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("NDRE"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("\""))))))))==>A. Siegert->"SIEGERT, ANDREAS"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))))==>"SIEGERT, ANDREAS"->A. Siegert
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", by Joseph J. Lazzaro\"")))==>Adapting PCs for Disabilities->"Adapting PCs for Disabilities, by Joseph J. Lazzaro"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))==>"Adapting PCs for Disabilities, by Joseph J. Lazzaro"->Adapting PCs for Disabilities
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))==>Joseph J. Lazzaro->"Lazzaro, Joseph J."
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Lazzaro, Joseph J."->Joseph J. Lazzaro
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 25))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))==>Clustering Windows Servers: A Road Map for Enterprise Solutions->Clustering Windows Server: A Road Map for Enterprise Solutions
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Colon"), 1))), Concat(ConstStr("ervers: "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Clustering Windows Server: A Road Map for Enterprise Solutions->Clustering Windows Servers: A Road Map for Enterprise Solutions
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Mauler, Gary &amp; Milton Beebe"->Gary Mauler
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" &amp; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("ilton Beebe\"")))))))==>Gary Mauler->"Mauler, Gary &amp; Milton Beebe"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), ConstStr(")\"")))))))))))))))==>"Advances In Computers, Volume 62: Advances In Software Engineering (advances In Computers)"->"Advances in Computers (Advances in Computers, 62)"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(", Volume "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" Software Engineering (advances "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))), ConstStr(")\"")))))))))==>"Advances in Computers (Advances in Computers, 62)"->"Advances In Computers, Volume 62: Advances In Software Engineering (advances In Computers)"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" V. "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))==>Marvin Zelkowitz->Marvin V. Zelkowitz
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))==>Marvin V. Zelkowitz->Marvin Zelkowitz
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Designing Applications with MSMQ: Message Queuing for Developers (The Addison-Wesley Microsoft Technology Series)->Designing Applications with MSMQ: Message Queuing for Developers
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (The Addison-Wesley Microsoft Technology Series)"))==>Designing Applications with MSMQ: Message Queuing for Developers->Designing Applications with MSMQ: Message Queuing for Developers (The Addison-Wesley Microsoft Technology Series)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Alan Dickman->"Dickman, Alan"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Dickman, Alan"->Alan Dickman
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Skew-Tolerant Circuit Design->Skew Tolerant Circuit Design
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("-"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Skew Tolerant Circuit Design->Skew-Tolerant Circuit Design
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>David Harris->"Harris, David"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Harris, David"->David Harris
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Software Engineering (6th Edition)->Software Engineering
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (6th "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("dition)"))))==>Software Engineering->Software Engineering (6th Edition)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Ian Sommerville->"Sommerville, Ian"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Sommerville, Ian"->Ian Sommerville
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" - "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), ConstStr(" B"))))==>Virtual Private Networks: Technologies and Solutions->Virtual Private Networks - Technologies And Solutions B
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Words/dots/hyphens◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Camel Case"), -1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1)))))))))==>Virtual Private Networks - Technologies And Solutions B->Virtual Private Networks: Technologies and Solutions
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(","), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(",\"")))))==>Ruixi Yuan; W. Timothy Strayer->"Yuan,Strayer,"
Concat(ConstStr("Ruixi "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; W. Timothy "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))))==>"Yuan,Strayer,"->Ruixi Yuan; W. Timothy Strayer
Concat(ConstStr("The "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))))==>Statistical Imagination (w/CD)->The Statistical Imagination
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (w/CD)"))==>The Statistical Imagination->Statistical Imagination (w/CD)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Ferris\"")))==>Ritchey->"Ritchey, Ferris"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))==>"Ritchey, Ferris"->Ritchey
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Software Security: Building Security In (Addison-Wesley Software Security Series)->Software Security: Building Security In
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (Addison-Wesley "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("eries)"))))))==>Software Security: Building Security In->Software Security: Building Security In (Addison-Wesley Software Security Series)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Gary McGraw->"McGraw, Gary"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"McGraw, Gary"->Gary McGraw
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))==>"Understanding Virtual Reality: Interface, Application, and Design"->UNDERSTANDING VIRTUAL REALITY
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(": Interface, Application, and Design\"")))==>UNDERSTANDING VIRTUAL REALITY->"Understanding Virtual Reality: Interface, Application, and Design"
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))==>"Sherman, William R.; Craig, Alan B."->SHERMAN
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", William R.; Craig, Alan B.\"")))==>SHERMAN->"Sherman, William R.; Craig, Alan B."
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Data Model Patterns: A Metadata Map (the Morgan Kaufmann Series In Data Management Systems)->Data Model Patterns: A Metadata Map
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (the Morgan Kaufmann Series In Data Management Systems)"))==>Data Model Patterns: A Metadata Map->Data Model Patterns: A Metadata Map (the Morgan Kaufmann Series In Data Management Systems)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\"")))))==>David C. Hay->"Hay, David C"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Hay, David C"->David C. Hay
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", by Winston\"")))==>On to C++->"On to C++, by Winston"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))==>"On to C++, by Winston"->On to C++
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))==>Patrick Henry Winston->"Winston, Patrick Henry"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Winston, Patrick Henry"->Patrick Henry Winston
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("."))==>Cryptography Decrypted->Cryptography Decrypted.
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1)))==>Cryptography Decrypted.->Cryptography Decrypted
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot◦Semicolon"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))))))))==>"Mel, H.X.; Burnett, Doris; Baker, Doris M."->"H. X. Mel, Doris Burnett, Doris M. Baker"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("."), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Lowercase word◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), -1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), ConstStr(".\"")))))))))))))==>"H. X. Mel, Doris Burnett, Doris M. Baker"->"Mel, H.X.; Burnett, Doris; Baker, Doris M."
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), -1)))), Concat(ConstStr("echnology in the "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), -1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case◦Upper Case", "ε"), -1))), ConstStr("nterprise: Pdas, Blackberries, and Mobile Devices\"")))))==>INTEGRATING WIRELESS TECHNOLOG->"Integrating Wireless Technology in the Enterprise: Pdas, Blackberries, and Mobile Devices"
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RelativePosition(x, 31))))==>"Integrating Wireless Technology in the Enterprise: Pdas, Blackberries, and Mobile Devices"->INTEGRATING WIRELESS TECHNOLOG
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Wheeler, William"->William Wheeler
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>William Wheeler->"Wheeler, William"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>The Craft of Information Visualization: Readings and Reflections (The Morgan Kaufmann Series in Interactive Technologies)->The Craft of Information Visualization: Readings and Reflections
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" Morgan Kaufmann Series in Interactive Technologies)"))))==>The Craft of Information Visualization: Readings and Reflections->The Craft of Information Visualization: Readings and Reflections (The Morgan Kaufmann Series in Interactive Technologies)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("\"")))))==>Benjamin B. Bederson Ben Shneiderman->"Benjamin B. Bederson, Ben Shneiderman"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1)))))==>"Benjamin B. Bederson, Ben Shneiderman"->Benjamin B. Bederson Ben Shneiderman
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Upper Case◦Upper Case"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))))))))==>Bluetooth Application Programming with the Java APIs (The Morgan Kaufmann Series in Networking)->Bluetooth Application Programming With the Java Apis
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Lowercase word"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦Lowercase word", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1))), ConstStr("PIs (The Morgan Kaufmann Series in Networking)"))))))==>Bluetooth Application Programming With the Java Apis->Bluetooth Application Programming with the Java APIs (The Morgan Kaufmann Series in Networking)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" J.; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("imothy J.\"")))))))))))))))==>"C Bala Kumar, Paul Kline, Tim Thompson"->"Kumar, C. Bala; Kline, Paul J.; Thompson, Timothy J."
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Camel Case", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'◦Camel Case"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RelativePosition(x, -9))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))))))))==>"Kumar, C. Bala; Kline, Paul J.; Thompson, Timothy J."->"C Bala Kumar, Paul Kline, Tim Thompson"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" 5 "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ALL CAPS◦WhiteSpace", "ε"), 1), RelativePosition(x, -8)))))))==>UNIX(R) System V Network Programming->Unix System 5 Network Prog
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1), RelativePosition(x, -3)))), Concat(ConstStr(") "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" V "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Number◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1))), ConstStr("rogramming"))))))))==>Unix System 5 Network Prog->UNIX(R) System V Network Programming
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\"")))))==>Stephen A. Rago->"Rago, Stephen A"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Rago, Stephen A"->Stephen A. Rago
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Understanding Data Communications (7th Edition)->Understanding Data Communications
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (7th Edition)"))==>Understanding Data Communications->Understanding Data Communications (7th Edition)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Gilbert Held->"Held, Gilbert"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Held, Gilbert"->Gilbert Held
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))==>The Theory of Computation->Theory of Computation
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 3))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in x))==>Theory of Computation->The Theory of Computation
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))==>"Bernard M. Moret, Addison-Wesley, B. M. E. Moret"->Moret
Concat(ConstStr("\"Bernard "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", Addison-Wesley, B. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(". E. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("\"")))))))))==>Moret->"Bernard M. Moret, Addison-Wesley, B. M. E. Moret"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Camel Case"), -1))), Concat(ConstStr("/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr("onverters (Edn "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("eries for "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), ConstStr(" Engineers)"))))))))==>Simplified Design of Voltage Frequency C->Simplified Design of Voltage/Frequency Converters (Edn Series for Design Engineers)
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace◦Left Parenthesis"), 1)))))==>Simplified Design of Voltage/Frequency Converters (Edn Series for Design Engineers)->Simplified Design of Voltage Frequency C
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Lenk, John D"->John Lenk
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" D\"")))))==>John Lenk->"Lenk, John D"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))==>"Genetic Algorithms in Search, Optimization, and Machine Learning"->Genetic Algorithms
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" in Search, Optimization, and Machine Learning\"")))==>Genetic Algorithms->"Genetic Algorithms in Search, Optimization, and Machine Learning"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>White-Hat Security Arsenal: Tackling the Threats->White Hat Security Arsenal: Tackling the Threats
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("-"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>White Hat Security Arsenal: Tackling the Threats->White-Hat Security Arsenal: Tackling the Threats
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))==>Aviel D. Rubin->"Rubin, Aviel D."
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Rubin, Aviel D."->Aviel D. Rubin
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>The OpenVMS User's Guide (HP Technologies)->OpenVMS User's Guide
Concat(ConstStr("The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (HP Technologies)")))==>OpenVMS User's Guide->The OpenVMS User's Guide (HP Technologies)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Patrick Holmay->"Holmay, Patrick"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Holmay, Patrick"->Patrick Holmay
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Plus"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr("lus "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr("lus "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))))==>Advanced C++ Programming Styles and Idioms->Advanced C Plus Plus Programming Styles and Idioms
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("++ "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Advanced C Plus Plus Programming Styles and Idioms->Advanced C++ Programming Styles and Idioms
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".,\"")))))==>James O. Coplien->"Coplien, James O.,"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Coplien, James O.,"->James O. Coplien
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 50)))==>Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in Data Management Systems)->Database Transaction Models for Advanced Applicati
Concat(ConstStr("Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 4))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace◦Lowercase word"), 1))), ConstStr("anagement Systems)")))))==>Database Transaction Models for Advanced Applicati->Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in Data Management Systems)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(". ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("dt)\"")))))==>"Elmargarmid, Ahmed K.; Elmagarmid, Ahmed K."->"Elmagarmid, Ahmed K. (Edt)"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("lmargarmid, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))))==>"Elmagarmid, Ahmed K. (Edt)"->"Elmargarmid, Ahmed K.; Elmagarmid, Ahmed K."
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("econd Edition\"")))))==>A Mathematical Introduction to Logic (Softcover)->"A Mathematical Introduction to Logic, Second Edition"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦ALL CAPS", "ε"), 1))), ConstStr("oftcover)"))))==>"A Mathematical Introduction to Logic, Second Edition"->A Mathematical Introduction to Logic (Softcover)
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Enderton, Herbert B."->Herbert B. Enderton
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))==>Herbert B. Enderton->"Enderton, Herbert B."
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>CMM in Practice: Processes for Executing Software Projects at Infosys (The SEI Series in Software Engineering)->CMM in Practice: Processes for Executing Software Projects at Infosys
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "Lowercase word◦WhiteSpace◦ALL CAPS"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr("eries "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), 1), RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "Lowercase word◦WhiteSpace◦ALL CAPS"), 1))), ConstStr("ngineering)"))))))))))))))==>CMM in Practice: Processes for Executing Software Projects at Infosys->CMM in Practice: Processes for Executing Software Projects at Infosys (The SEI Series in Software Engineering)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>"Pankaj Jalote, P. Jalote"->"Jalote, Pankaj"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))))==>"Jalote, Pankaj"->"Pankaj Jalote, P. Jalote"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))==>Netspionage : The Global Threats to Information->Netspionage: The Global Threats to Information
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Netspionage: The Global Threats to Information->Netspionage : The Global Threats to Information
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), ConstStr("\"")))))))))==>"William C. Boni, Gerald L. Kovacich"->"Boni, William C.; Kovacich, Gerald"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" L. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))==>"Boni, William C.; Kovacich, Gerald"->"William C. Boni, Gerald L. Kovacich"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RelativePosition(x, -6))))))==>Photoshop and Dreamweaver Integration->PHOTOSHOP &amp; DREAMWEAVER INTEGR
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Upper Case"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦Upper Case", "ε"), 1)))), ConstStr("ntegration"))))==>PHOTOSHOP &amp; DREAMWEAVER INTEGR->Photoshop and Dreamweaver Integration
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", Colin\"")))==>SMITH->"Smith, Colin"
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))==>"Smith, Colin"->SMITH
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))))==>"The Java Developers Almanac 1.4, Volume 2: Examples and Quick Reference (4th Edition)"->The Java Developers Almanac 1.4: Examples and Quick Reference
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(", Volume "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in let sharedParsedDt = ParsePartialDateTime(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), ["H"]) in let sharedDtFormat = "H" in DtRangeConcat(RangeFormatDateTime(RangeRoundDateTime(sharedParsedDt, "({Hour=2, Minute=0, Second=0, Millisecond=0, HourInPeriod=2, Period=0}, 3, Hour, Down, , 0)"), sharedDtFormat), DtRangeConcat(DtRangeConstStr(": Examples and Quick Reference ("), RangeFormatDateTime(RangeRoundDateTime(sharedParsedDt, "({Hour=2, Minute=0, Second=0, Millisecond=0, HourInPeriod=2, Period=0}, 3, Hour, UpOrNext, Hour, 1)"), sharedDtFormat))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 2)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦',' or 'and'"), 1))), ConstStr("dition)\""))))))))==>The Java Developers Almanac 1.4: Examples and Quick Reference->"The Java Developers Almanac 1.4, Volume 2: Examples and Quick Reference (4th Edition)"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))==>"Patrick Chan, Lan-Ahn Dang"->"Chan, Patrick; Dang, Lan-Ahn"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))==>"Chan, Patrick; Dang, Lan-Ahn"->"Patrick Chan, Lan-Ahn Dang"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1)))==>The Guru's Guide to SQL Server Architecture and Internals->The Guru's Guide to SQL Server Architecture
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" and Internals"))==>The Guru's Guide to SQL Server Architecture->The Guru's Guide to SQL Server Architecture and Internals
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Ken Henderson->"Henderson, Ken"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Henderson, Ken"->Ken Henderson
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1), RelativePosition(x, -8)))), ConstStr("ssential C++"))==>Idioms of the Greek New Testament->Essential C++
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RelativePosition(x, 6), RelativePosition(x, 7)))), ConstStr("dioms of the Greek New Testament"))==>Essential C++->Idioms of the Greek New Testament
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\"")))))==>Stanley B. Lippman->"Lippman, Stanley B."
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Lippman, Stanley B."->Stanley B. Lippman
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))))==>Project-Based Software Engineering: An Object-Oriented Approach->Project Based Software Engineering
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("-"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(": An Object-Oriented Approach"))))==>Project Based Software Engineering->Project-Based Software Engineering: An Object-Oriented Approach
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))==>"Stiller, Evelyn; Leblanc, Cathie"->Stiller
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Evelyn; Leblanc, Cathie\"")))==>Stiller->"Stiller, Evelyn; Leblanc, Cathie"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Problem Solving And Programming Concepts->Problem Solving &amp; Programming Concepts
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" And "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Problem Solving &amp; Programming Concepts->Problem Solving And Programming Concepts
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))==>"Sprankle, Maureen"->Sprankle
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Maureen\"")))==>Sprankle->"Sprankle, Maureen"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -9)))))))))==>"Mpls Network Management: Mibs, Tools, and Techniques"->Mpls Network Management Mibs Tools &amp; Tec
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(", and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("echniques\"")))))))))==>Mpls Network Management Mibs Tools &amp; Tec->"Mpls Network Management: Mibs, Tools, and Techniques"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\"")))==>"Nadeau, Thomas D."->"Nadeau, Thomas D"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr(".\"")))==>"Nadeau, Thomas D"->"Nadeau, Thomas D."
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -2), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" [Hardcover] by.\"")))))))))==>Discrete Mathematics With Combinatorics Second Edition->"Discrete Mathematics with Combinatorics, Second Edition [Hardcover] by."
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Bracket"), 1)))))==>"Discrete Mathematics with Combinatorics, Second Edition [Hardcover] by."->Discrete Mathematics With Combinatorics Second Edition
let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "\"Anderson, James A.\"": "0"})==>"Anderson, James A."->0
let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "0": "\"Anderson, James A.\""})==>0->"Anderson, James A."
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -2))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("nalysis"))))))==>Distributed Operating Systems &amp; Algorithms->Distributed Operating Systems and Algorithm Analysis
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(" &amp; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("lgorithms"))))==>Distributed Operating Systems and Algorithm Analysis->Distributed Operating Systems &amp; Algorithms
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", RandyJohnson, Theodore\"")))==>Chow->"Chow, RandyJohnson, Theodore"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))==>"Chow, RandyJohnson, Theodore"->Chow
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(": A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)"))==>Subdivision Methods for Geometric Design->Subdivision Methods for Geometric Design: A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))==>Subdivision Methods for Geometric Design: A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)->Subdivision Methods for Geometric Design
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; Henrik "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("eimer"))))))==>"Warren, Joe"->Joe Warren; Henrik Weimer
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Joe Warren; Henrik Weimer->"Warren, Joe"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The Morgan Kaufmann Series "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr(" Artificial Intelligence)"))))==>Evolutionary Computation in Bioinformatics->Evolutionary Computation in Bioinformatics (The Morgan Kaufmann Series in Artificial Intelligence)
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Evolutionary Computation in Bioinformatics (The Morgan Kaufmann Series in Artificial Intelligence)->Evolutionary Computation in Bioinformatics
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("~David W. Corne"))==>Gary B. Fogel->Gary B. Fogel~David W. Corne
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Tilde"), 1)))==>Gary B. Fogel~David W. Corne->Gary B. Fogel
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Trucluster Server Handbook (Hp Technologies)->Trucluster Server Handbook
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("p "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("echnologies)"))))))==>Trucluster Server Handbook->Trucluster Server Handbook (Hp Technologies)
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Fafrak, Scott; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad"->Scott Fafrak
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad\"")))))==>Scott Fafrak->"Fafrak, Scott; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1)))))))==>HackNotes(tm) Windows Security Portable Reference->Windows Security Portable Reference: Hack Notes
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr("(tm) "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))))==>Windows Security Portable Reference: Hack Notes->HackNotes(tm) Windows Security Portable Reference
Concat(ConstStr("\"Viotto, Kate"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Double Quote"), 1), RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1))))==>"O'Dea, Michael"->"Viotto, Kate"
Concat(ConstStr("\"O'Dea, Michael"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Double Quote"), 1), RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1))))==>"Viotto, Kate"->"O'Dea, Michael"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" - "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))==>The Oracle(R) Designer/2000 Handbook->The Oracle Designer - 2000 Handbook
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1), RelativePosition(x, 6)))), Concat(ConstStr(") "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr("/"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))))==>The Oracle Designer - 2000 Handbook->The Oracle(R) Designer/2000 Handbook
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr(",\"")))))==>Carrie Anderson David Wendelken->"Wendelken, David,"
Concat(ConstStr("Carrie Anderson "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))))==>"Wendelken, David,"->Carrie Anderson David Wendelken
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), ConstStr(" -OS"))==>LDAP Directories Explained: An Introduction and Analysis->LDAP DIRECTORIES EXPLAINED -OS
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), ConstStr(": An Introduction and Analysis"))))==>LDAP DIRECTORIES EXPLAINED -OS->LDAP Directories Explained: An Introduction and Analysis
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Brian Arkills->"Arkills, Brian"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Arkills, Brian"->Brian Arkills
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))))==>Advanced Use Case Modeling : Software Systems (Paperback)->Advanced Use Case Modeling: Software Systems
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (Paperback)"))))==>Advanced Use Case Modeling: Software Systems->Advanced Use Case Modeling : Software Systems (Paperback)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))==>"Frank Armour , Granville Miller"->"Armour, Frank, Miller, Granville"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" , "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))==>"Armour, Frank, Miller, Granville"->"Frank Armour , Granville Miller"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Juniper Networks(R) Field Guide and Reference->Juniper Networks Field Guide and Reference
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr(") "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))==>Juniper Networks Field Guide and Reference->Juniper Networks(R) Field Guide and Reference
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Garrett, AvivaDrenan, GaryMorris, CrisJuniper&reg; Networks"->Aviva Garrett
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("Drenan, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("aryMorris, CrisJuniper&reg; Networks\"")))))))==>Aviva Garrett->"Garrett, AvivaDrenan, GaryMorris, CrisJuniper&reg; Networks"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (MicrosoftN"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("T Development Series)"))))==>Essential Windows Workflow Foundation->Essential Windows Workflow Foundation (MicrosoftNET Development Series)
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Essential Windows Workflow Foundation (MicrosoftNET Development Series)->Essential Windows Workflow Foundation
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))==>"Shukla, Dharma, Schmidt, Bob"->"Dharma Shukla, Bob Schmidt"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))==>"Dharma Shukla, Bob Schmidt"->"Shukla, Dharma, Schmidt, Bob"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" - "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("Left Parenthesis◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("tory of "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("Hyphen◦ALL CAPS", "ε"), 1))), ConstStr("2"))))))))==>Building an Object-Oriented Database System (The Morgan Kaufmann Series in Data Management Systems)->Building an Object-Oriented Database System - The Story of O2
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Camel Case"), -1))), ConstStr(" Morgan Kaufmann Series in Data Management Systems)"))))==>Building an Object-Oriented Database System - The Story of O2->Building an Object-Oriented Database System (The Morgan Kaufmann Series in Data Management Systems)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(";"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), Concat(ConstStr(";"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦ALL CAPS", "ε"), 1))), ConstStr(".,\"")))))))))))))))==>"Francois Bancilhon, Claude Delobel, Paris Kanellakis"->"Bancilhon, Francois;Delobel, Claude;Kanellakis, Paris C.,"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Semicolon"), -1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma◦WhiteSpace"), -1))), ConstStr("\"")))))))))))))==>"Bancilhon, Francois;Delobel, Claude;Kanellakis, Paris C.,"->"Francois Bancilhon, Claude Delobel, Paris Kanellakis"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(" (7th Edition) (International Computer Science Series)"))==>SOFTWARE ENGINEERING->Software Engineering (7th Edition) (International Computer Science Series)
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))))==>Software Engineering (7th Edition) (International Computer Science Series)->SOFTWARE ENGINEERING
let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "SOMMERVILL": "N/A"})==>SOMMERVILL->N/A
let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "N/A": "SOMMERVILL"})==>N/A->SOMMERVILL
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))), ConstStr(" &amp;"))))==>"Security Education, Awareness, and Training : SEAT from Theory to Practice"->SECURITY EDUCATION AWARENESS &amp;
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), ConstStr(", Awareness, and Training : SEAT from Theory to Practice\"")))==>SECURITY EDUCATION AWARENESS &amp;->"Security Education, Awareness, and Training : SEAT from Theory to Practice"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>"Carl Roper, Dr. Lynn Fischer, Joseph A. Grau"->"Roper, Carl"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", D"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1)))), ConstStr(". Lynn Fischer, Joseph A. Grau\"")))))))==>"Roper, Carl"->"Carl Roper, Dr. Lynn Fischer, Joseph A. Grau"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Single Quote"), 1)))), Concat(ConstStr("dministratorandapos;"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))))==>Digital UNIX System Administrator's Guide (HP Technologies)->Digital Unix System Administratorandapos;s Guide
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RelativePosition(x, -16))), Concat(ConstStr("'"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (HP Technologies)"))))))))==>Digital Unix System Administratorandapos;s Guide->Digital UNIX System Administrator's Guide (HP Technologies)
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Cheek, Matthew"->Matthew Cheek
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Matthew Cheek->"Cheek, Matthew"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr("/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Right Parenthesis"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Right Parenthesis"), 1)))), ConstStr("\"")))))))==>Programming Pearls (2nd Edition) (Paperback)->"Programming Pearls, 2/e"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr("nd Edition) ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("aperback)"))))))==>"Programming Pearls, 2/e"->Programming Pearls (2nd Edition) (Paperback)
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))==>"Bentley, Jon"->Bentley
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Jon\"")))==>Bentley->"Bentley, Jon"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("."))))==>The Struts Framework: Practical Guide for Java Programmers->The Struts Framework. Practical Guide for Java Programmers.
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1)))))==>The Struts Framework. Practical Guide for Java Programmers.->The Struts Framework: Practical Guide for Java Programmers
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr(".\"")))))==>Sue Spielman->"Spielman, S."
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("ue "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Spielman, S."->Sue Spielman
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))))==>Readings in Information Visualization : Using Vision to Think (Morgan Kaufmann Series in Interactive Technologies)->Readings in Information Visualization: Using Vision to Think
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (Morgan Kaufmann Series in Interactive Technologies)"))))==>Readings in Information Visualization: Using Vision to Think->Readings in Information Visualization : Using Vision to Think (Morgan Kaufmann Series in Interactive Technologies)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))))))==>"Stuart K. Card, Jock D. Mackinlay, Ben Shneiderman"->"Card, Stuart K.; Mackinlay, Jock D.; Shneiderman, Ben"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))))))==>"Card, Stuart K.; Mackinlay, Jock D.; Shneiderman, Ben"->"Stuart K. Card, Jock D. Mackinlay, Ben Shneiderman"
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))==>Logical Effort: Designing Fast Cmos Circuits->LOGICAL EFFORT
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(": Designing Fast Cmos Circuits"))==>LOGICAL EFFORT->Logical Effort: Designing Fast Cmos Circuits
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr(".\"")))))==>"Ivan Edward Sutherland, Robert F. Sproull, David Harris"->"Sutherland, Ivan E."
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr("dward "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", Robert F. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("proull, David Harris\"")))))))==>"Sutherland, Ivan E."->"Ivan Edward Sutherland, Robert F. Sproull, David Harris"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))))==>Artificial Intelligence : A Guide to Intelligent Systems (Softcover)->Artificial Intelligence: A Guide To Intelligent Systems
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("oftcover)"))))))))))==>Artificial Intelligence: A Guide To Intelligent Systems->Artificial Intelligence : A Guide to Intelligent Systems (Softcover)
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Michael Negnevitsky->"Negnevitsky, Michael"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Negnevitsky, Michael"->Michael Negnevitsky
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 19), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Number"), 1))), Concat(ConstStr(") Yukon "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Number◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))==>Microsoft SQL Server 2005 New Features->Microsoft(r) Yukon New Features
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" SQL Server 2005 "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Microsoft(r) Yukon New Features->Microsoft SQL Server 2005 New Features
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Michael Otey->"Otey, Michael"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Otey, Michael"->Michael Otey
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Lowercase word"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1))), Concat(ConstStr(", Volume "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), ConstStr(")\"")))))))==>TCP/IP Illustrated : The Protocols v. 1 (APC) (Softcover)->"The Protocols (TCP/IP Illustrated, Volume 1)"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" : "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1)))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr(" (A"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Forward Slash"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Forward Slash"), 1))), ConstStr(") (Softcover)")))))))))))==>"The Protocols (TCP/IP Illustrated, Volume 1)"->TCP/IP Illustrated : The Protocols v. 1 (APC) (Softcover)
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>W.Richard Stevens->W. Richard Stevens
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("."), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>W. Richard Stevens->W.Richard Stevens
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))==>MFC Internals: Inside the Microsoft(c) Foundation Class Architecture->Mfc Internals: Inside the Microsoft Foundation Class Architecture
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Words/dots/hyphens◦WhiteSpace◦Camel Case", "WhiteSpace"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1)))), Concat(ConstStr(") "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case◦WhiteSpace", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))))==>Mfc Internals: Inside the Microsoft Foundation Class Architecture->MFC Internals: Inside the Microsoft(c) Foundation Class Architecture
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("cott\"")))))))))==>George Shepherd Scot Wingo->"Shepherd, George; Wingo, Scott"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -3))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))))))))==>"Shepherd, George; Wingo, Scott"->George Shepherd Scot Wingo
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" Korper and Ellis E-Commerce Books "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 2))), ConstStr("eries)"))))))==>The Internet Security Guidebook: From Planning to Deployment->The Internet Security Guidebook: From Planning to Deployment (The Korper and Ellis E-Commerce Books Series)
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>The Internet Security Guidebook: From Planning to Deployment (The Korper and Ellis E-Commerce Books Series)->The Internet Security Guidebook: From Planning to Deployment
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))==>"Ellis, Juanita; Speed, Tim"->"Juanita Ellis, Tim Speed"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))==>"Juanita Ellis, Tim Speed"->"Ellis, Juanita; Speed, Tim"
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))==>XQuery: The XML Query Language->XQUERY
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), 1))), ConstStr("Query: The XML Query Language"))==>XQUERY->XQuery: The XML Query Language
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Michael Brundage->"Brundage, Michael"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Brundage, Michael"->Michael Brundage
Concat(ConstStr("T"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 6), RelativePosition(x, 8))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x))))==>XML Schema Companion->The Xml Schema Companion
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>The Xml Schema Companion->XML Schema Companion
Concat(ConstStr("Neil "), let columnName = "0" in let x = ChooseInput(vs, columnName) in x)==>Bradley->Neil Bradley
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))==>Neil Bradley->Bradley
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Dot"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))==>Teach Yourself Microsoft Visual Basic .Net 2003 in 21 Days->Teach Yourself Microsoft Visual BasicNet 2003 in 21 Days
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1))), Concat(ConstStr(" ."), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Teach Yourself Microsoft Visual BasicNet 2003 in 21 Days->Teach Yourself Microsoft Visual Basic .Net 2003 in 21 Days
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Holzner, Steve"->Steve Holzner
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Steve Holzner->"Holzner, Steve"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), ConstStr("\"")))==>"Java, Java, Java: Object-Oriented Problem Solving, by Morelli, 3rd Edition"->"JAVA, JAVA, JAVA"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1)))), ConstStr(": Object-Oriented Problem Solving, by Morelli, 3rd Edition\"")))==>"JAVA, JAVA, JAVA"->"Java, Java, Java: Object-Oriented Problem Solving, by Morelli, 3rd Edition"
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))==>"Morelli, Ralph/ Walde, Ralph"->MORELLI
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1))), Concat(ConstStr("alph/ Walde, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1))), ConstStr("alph\"")))))))==>MORELLI->"Morelli, Ralph/ Walde, Ralph"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)"))==>Moving Objects Databases->Moving Objects Databases (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Moving Objects Databases (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)->Moving Objects Databases
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("?"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 3), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))))==>"Guting, Ralf Hartmut; Schneider, Markus"->"Ralf Hartmut G?ting, Markus Schneider"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Question Mark"), 1), RegexPositionRelative(x, RegexPair("ε", "Question Mark"), 1))), Concat(ConstStr("uting, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))==>"Ralf Hartmut G?ting, Markus Schneider"->"Guting, Ralf Hartmut; Schneider, Markus"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦Camel Case", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Ampersand"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), ConstStr(";"))))))==>Oracle JDeveloper 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF->ORACLE JDEVELOPER FOR FORMS &amp;
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1)))), ConstStr("Developer 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF"))==>ORACLE JDEVELOPER FOR FORMS &amp;->Oracle JDeveloper 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), ConstStr(", Peter\"")))==>KOLETZKE/MILLS->"Koletzke, Peter"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), ConstStr("/MILLS"))==>"Koletzke, Peter"->KOLETZKE/MILLS
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RelativePosition(x, 26)))), Concat(ConstStr(" -"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1), RelativePosition(x, -12)))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))))))==>"Bulletproof Wireless Security: GSM, UMTS, 802.11 and Ad Hoc Security"->BULLETPROOF WIRELESS SECU -OS
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), ConstStr(" Security: GSM, UMTS, 802.11 and Ad Hoc Security\"")))==>BULLETPROOF WIRELESS SECU -OS->"Bulletproof Wireless Security: GSM, UMTS, 802.11 and Ad Hoc Security"
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x)==>Coordinating User Interfaces for Consistency->COORDINATING USER INTERFACES FOR CONSISTENCY
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))))))==>COORDINATING USER INTERFACES FOR CONSISTENCY->Coordinating User Interfaces for Consistency
let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))==>"Nielsen, Jakob:"->NIELSEN
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", Jakob:\"")))==>NIELSEN->"Nielsen, Jakob:"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))==>"Object-Oriented Programming Using C++, by Pohl, 2nd Edition"->Object-Oriented Programming Using C++
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", by "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("ohl, 2nd Edition\"")))))==>Object-Oriented Programming Using C++->"Object-Oriented Programming Using C++, by Pohl, 2nd Edition"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" , University of California, Santa Cruz\"")))))==>"Pohl, Ira"->"Ira Pohl , University of California, Santa Cruz"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>"Ira Pohl , University of California, Santa Cruz"->"Pohl, Ira"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", by "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), 1))), ConstStr("dams\"")))))==>Java: An Introduction to Computing->"Java: An Introduction to Computing, by Adams"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))==>"Java: An Introduction to Computing, by Adams"->Java: An Introduction to Computing
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("/ "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), ConstStr(".\"")))))))))==>"Joel Adams, Larry R. Nyhoff, Jeffrey Nyhoff, Joel C. Adams, Jeffrey L. Nyhoff"->"Adams, Joel/ Nyhoff, Jeffrey L."
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("arry R. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" C. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\"")))))))))))))))))))==>"Adams, Joel/ Nyhoff, Jeffrey L."->"Joel Adams, Larry R. Nyhoff, Jeffrey Nyhoff, Joel C. Adams, Jeffrey L. Nyhoff"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Single Quote"), 1))), Concat(ConstStr("onandapos;"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦ALL CAPS", "ε"), 1))), Concat(ConstStr("oandapos;"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))==>GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers->GUI Bloopers: Donandapos;ts and Doandapos;s for Software Developers and Web Designers
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 17))), Concat(ConstStr("'"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RelativePosition(x, 34))), Concat(ConstStr("'"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))))==>GUI Bloopers: Donandapos;ts and Doandapos;s for Software Developers and Web Designers->GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))))==>Johnson. Jeff->Jeff Johnson
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>Jeff Johnson->Johnson. Jeff
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))))))==>"Essential Java Class Reference for Programmers, The (3rd Edition)"->The Essential Java Class Reference For Programmers
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" (3rd "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("dition)\"")))))))))))==>The Essential Java Class Reference For Programmers->"Essential Java Class Reference for Programmers, The (3rd Edition)"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>Brian Durney->"Durney, Brian"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))==>"Durney, Brian"->Brian Durney
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Efficient C++: Performance Programming Techniques->Efficient C++ Performance Programming Techniques
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Plus", "ε"), -1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))==>Efficient C++ Performance Programming Techniques->Efficient C++: Performance Programming Techniques
Concat(ConstStr("Dov "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))==>"Bulka, Mayhew,"->Dov Bulka
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(", Mayhew,\"")))==>Dov Bulka->"Bulka, Mayhew,"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (The Morgan Kaufmann Series in Computer Graphics)"))==>Curves and Surfaces for CAGD: A Practical Guide->Curves and Surfaces for CAGD: A Practical Guide (The Morgan Kaufmann Series in Computer Graphics)
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Curves and Surfaces for CAGD: A Practical Guide (The Morgan Kaufmann Series in Computer Graphics)->Curves and Surfaces for CAGD: A Practical Guide
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\"")))))==>"Gerald E. Farin,"->"Farin, Gerald"
Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1), RelativePosition(x, -6)))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(",\"")))))))==>"Farin, Gerald"->"Gerald E. Farin,"
Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (2nd Edition) (Softcover)"))==>Computer Systems Design and Architecture->Computer Systems Design and Architecture (2nd Edition) (Softcover)
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))==>Computer Systems Design and Architecture (2nd Edition) (Softcover)->Computer Systems Design and Architecture
Concat(ConstStr("\"Vincent P. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("arry F. Jordan\"")))))==>Heuring->"Vincent P. Heuring, Harry F. Jordan"
let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))==>"Vincent P. Heuring, Harry F. Jordan"->Heuring
