[let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" J\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" D\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" L\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(",\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(","), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(",\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" D\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".,\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr(",\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" V. "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Alphanumeric"), -1))), Concat(ConstStr(" : "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" and Correcting System Problems (HP "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("echnologies)")))))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Words/dots/hyphens◦WhiteSpace◦Camel Case", "WhiteSpace"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1)))), Concat(ConstStr(") "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case◦WhiteSpace", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1), RelativePosition(x, -3)))), Concat(ConstStr(") "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" V "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Number◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1))), ConstStr("rogramming")))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), ConstStr(" &amp;")))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(", Steven Hancock\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (The Addison-Wesley Signature Series)")); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Tilde"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" W. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" J. "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(";"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("erhosek, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr("."), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ALL CAPS◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot◦Semicolon"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Camel Case", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'◦Camel Case"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RelativePosition(x, -9))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" J.; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("imothy J.\""))))))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("ichael J. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("onahoo, Kenneth L. Calvert\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(";"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), Concat(ConstStr(";"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦ALL CAPS", "ε"), 1))), ConstStr(".,\""))))))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -2), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Semicolon"), -1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("/ "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" L. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" , "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Semicolon"), -1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma◦WhiteSpace"), -1))), ConstStr("\""))))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("cott\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("?"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 3), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("/ "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), ConstStr(".\""))))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -3))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(", and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("echniques\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -2), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" [Hardcover] by.\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" (3rd "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("dition)\""))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), ConstStr("\""))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Ampersand"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Ampersand"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("Semicolon◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -3))), ConstStr("\""))))))))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("\"")))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1)))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("Dot◦Camel Case", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))))))))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), ConstStr(" (Softcover) (CD-ROM)")); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), ConstStr(", by Nutt\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 4)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), 1))), ConstStr("ractical Model-Based Testing: A Tools Approach")); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), ConstStr("\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr(" Legeard, Bruno\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), ConstStr(".")); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), ConstStr(" with LAMP: Using Linux, Apache, MySQL, Perl, and PHP\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("/ "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr(".\""))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\""))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -8))))))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))), Concat(ConstStr(", Third Edition ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), ConstStr("rd Edition)\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1)))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" ."), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr("\""))))))); ]

[Concat(ConstStr("Don "), let columnName = "0" in let x = ChooseInput(vs, columnName) in x); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1))), Concat(ConstStr("ames "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RelativePosition(x, -2), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(") "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RelativePosition(x, -14))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("Colon", "ε"), -1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("Colon", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(".")))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" - "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦ALL CAPS◦WhiteSpace"), 1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))))); ]

[Concat(ConstStr("\"Hernandez, Michael "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" L.\""))))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(": A User's Guide")); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Marcel\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" '"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("Single Quote◦Alphanumeric", "ε"), 1)))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("M) "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" (4th Edition) ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("Single Quote◦Alphanumeric", "ε"), 1)))), ConstStr(" Series)\""))))))))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(", Vol. 4\""))); ]

[Concat(ConstStr("Neural Network "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" Techniques "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" Applications - "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".,\""))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr("\""))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr(".\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" : A Structured Approach, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Right Parenthesis"), 1)))), ConstStr(", pb, 1990\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number◦Words/dots/hyphens"), 1), RegexPositionRelative(x, RegexPair("Number◦Words/dots/hyphens", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1)))), ConstStr(")")))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(" - "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(" Edition")))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr("/Longhurst")); ]

[Concat(ConstStr("Jay "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(": The Complete Guide to Practices and Procedures")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), Concat(ConstStr(": Wi-Fi Protected "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦WhiteSpace"), 1))), Concat(ConstStr("ccess and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case◦Upper Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case"), -1))))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(", William A. Arbaugh\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x), Concat(ConstStr("-W/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1)))))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Hyphen"), 1)))); ]

[Concat(ConstStr("Ira "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\""))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Comma◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\""))))))); ]

[Concat(ConstStr("\"By (author) "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" By (author) "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\""))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), -1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), -1))))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -5))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RelativePosition(x, -5), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), Concat(ConstStr("(TM)"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RelativePosition(x, -5))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RelativePosition(x, -5), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), ConstStr("(TM)")))))))); ]

[Concat(ConstStr("\"Mackenzie, Duncan; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("organ.")))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "0": "Ian Witten"}); let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "Ian Witten": "0"}); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(x); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(": Techniques for Building Corporate "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("emories")))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))); let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Fourth Edition (The Morgan Kaufmann Series in Networking)\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Number◦WhiteSpace◦ALL CAPS", "ε"), 1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1))), ConstStr("M D"))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1)))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case"), -1)))), ConstStr("ombined PageOut Edition")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("uides)")))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Hyphen"), 1)))); let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), -1)))), ConstStr("ireWall-1 NG: An Installation, Configuration, and Troubleshooting Guide\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("(2nd edition)")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr("&nbsp;&nbsp;"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace◦Alphanumeric", "ε"), -1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Comma"), 1))), Concat(ConstStr("offmeister, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("ofmeister, Robert Nord, Dilip Soni\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "Camel Case◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Words/dots/hyphens◦WhiteSpace◦Words/dots/hyphens"), -1), RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), -1)))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Upper Case◦Upper Case"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" from the "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1))), ConstStr(" : An Object Oriented Approach with Java 5. 0")))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Sesh\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1)))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Words/dots/hyphens◦WhiteSpace◦Number"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Comma◦WhiteSpace", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\""))))))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "WhiteSpace◦Words/dots/hyphens"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in let sharedParsedNumber = ParseNumber(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), -1), RegexPositionRelative(x, RegexPair("Number", "ε"), -1))), "(',', , , '.', , False)") in let sharedNumberFormat = "(, , , , , (, , , '.', , False))" in RangeConcat(RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(0, 4, Down)"), sharedNumberFormat), RangeConcat(RangeConstStr(", Windows Server "), RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(3, 4, UpOrNext)"), sharedNumberFormat))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Number◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), ConstStr("\""))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr("."), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr(" Gupta\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))))))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("arry R. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" C. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), ConstStr("\""))))))))))))))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), ConstStr(", pb, 2003\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("uides)")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Lowercase word", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" : "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1)))), Concat(ConstStr("honeandapos;"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, -9), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1), RelativePosition(x, 10))), ConstStr(" Society")))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦ALL CAPS", "ε"), -1))), Concat(ConstStr("hones "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Lowercase word"), 1))))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RelativePosition(x, -16))), Concat(ConstStr("'"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (HP Technologies)")))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1), RelativePosition(x, 6)))), Concat(ConstStr(") "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr("/"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Words/dots/hyphens◦WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("oftcover)")))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RelativePosition(x, -5))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("ichard\""))))); Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr(".\""))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Third Edition\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Plus"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Plus"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(" (with CD-ROM)")))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Plus"), 1)))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Plus"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", Art; Davis, Roger; Williams, Dwayne; Cothren, Chuck\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" 1/"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 5), RelativePosition(x, 6))))); ]

[Concat(ConstStr("FOROUZA"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), -1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), -1))), ConstStr("one")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" of "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" and "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" And "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("udy\""))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" Student Edition with "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("D-R"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("\"")))))))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", by Juarez, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), 1))), ConstStr("\"")))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), 1))), Concat(ConstStr("on "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Alphanumeric◦',' or 'and'"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦',' or 'and'"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace◦Hyphen"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Upper Case◦Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1))), Concat(ConstStr("/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\"")))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(": Principles Of Embedded Computing System Design (the Morgan Kaufmann Series In Computer Architecture And Design) (the Morgan K")); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Hash", "ε"), 1)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), 1))), ConstStr(" Sockets in C# : Practical Guide for Programmers (Morgan Kaufmann Practical Guides Series)")); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(";Ernst Kruijff;Joseph J. L"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1)))), ConstStr("Viola;Ivan Poupyrev")))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in let sharedParsedNumber = ParseNumber(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), "(',', , , '.', , False)") in let sharedNumberFormat = "(, , , , , (, , , '.', , False))" in RangeConcat(RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(0, 1, Down)"), sharedNumberFormat), RangeConcat(RangeConstStr(", BK&amp;CD-ROM, pb, "), RangeFormatNumber(RangeRoundNumber(sharedParsedNumber, "(0, 1, UpOrNext)"), sharedNumberFormat))), ConstStr("\""))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), ConstStr(": A Professional Approach, by Tobias, Level 2: Expert\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", by Henry\""))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))); ]

[Concat(ConstStr("The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1)))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("NDRE"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("\"")))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", by Joseph J. Lazzaro\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 25))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Colon"), 1))), Concat(ConstStr("ervers: "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" &amp; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("ilton Beebe\""))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), ConstStr(")\""))))))))))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(", Volume "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" Software Engineering (advances "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))), ConstStr(")\""))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (The Addison-Wesley Microsoft Technology Series)")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("-"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("-"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (6th "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("dition)")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" - "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))), ConstStr(" B")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Words/dots/hyphens◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Camel Case"), -1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), -1))))))))); ]

[Concat(ConstStr("Ruixi "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; W. Timothy "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1)))))); ]

[Concat(ConstStr("The "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (w/CD)")); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Ferris\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (Addison-Wesley "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("eries)")))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(": Interface, Application, and Design\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", William R.; Craig, Alan B.\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (the Morgan Kaufmann Series In Data Management Systems)")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", by Winston\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(".")); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("."), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Lowercase word◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦Alphanumeric", "ε"), -1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), ConstStr(".\""))))))))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), -1)))), Concat(ConstStr("echnology in the "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), -1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case◦Upper Case", "ε"), -1))), ConstStr("nterprise: Pdas, Blackberries, and Mobile Devices\""))))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RelativePosition(x, 31)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" Morgan Kaufmann Series in Interactive Technologies)")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 2))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Lowercase word"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦Lowercase word", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1))), ConstStr("PIs (The Morgan Kaufmann Series in Networking)")))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" 5 "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ALL CAPS◦WhiteSpace", "ε"), 1), RelativePosition(x, -8))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (7th Edition)")); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 3))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in x)); ]

[Concat(ConstStr("\"Bernard "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", Addison-Wesley, B. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(". E. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("\""))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Camel Case"), -1))), Concat(ConstStr("/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr("onverters (Edn "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("eries for "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), ConstStr(" Engineers)")))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace◦Left Parenthesis"), 1))))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" in Search, Optimization, and Machine Learning\""))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))); ]

[Concat(ConstStr("The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (HP Technologies)"))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Plus"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr("lus "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr("lus "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("++ "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 50))); ]

[Concat(ConstStr("Database Transaction Models for Advanced Applications (The Morgan Kaufmann Series in "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 4))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace◦Lowercase word"), 1))), ConstStr("anagement Systems)"))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))), Concat(ConstStr(". ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("dt)\""))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("lmargarmid, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(".; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), ConstStr(".\""))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("econd Edition\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦ALL CAPS", "ε"), 1))), ConstStr("oftcover)")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "Lowercase word◦WhiteSpace◦ALL CAPS"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦ALL CAPS", "ε"), 1))), Concat(ConstStr("eries "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), 1), RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), -1), RegexPositionRelative(x, RegexPair("Camel Case◦WhiteSpace◦Camel Case", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "Lowercase word◦WhiteSpace◦ALL CAPS"), 1))), ConstStr("ngineering)")))))))))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("\""))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RelativePosition(x, -6)))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Upper Case"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦Upper Case", "ε"), 1)))), ConstStr("ntegration")))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", Colin\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(", Volume "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in let sharedParsedDt = ParsePartialDateTime(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), ["H"]) in let sharedDtFormat = "H" in DtRangeConcat(RangeFormatDateTime(RangeRoundDateTime(sharedParsedDt, "({Hour=2, Minute=0, Second=0, Millisecond=0, HourInPeriod=2, Period=0}, 3, Hour, Down, , 0)"), sharedDtFormat), DtRangeConcat(DtRangeConstStr(": Examples and Quick Reference ("), RangeFormatDateTime(RangeRoundDateTime(sharedParsedDt, "({Hour=2, Minute=0, Second=0, Millisecond=0, HourInPeriod=2, Period=0}, 3, Hour, UpOrNext, Hour, 1)"), sharedDtFormat))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 2)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦',' or 'and'"), 1))), ConstStr("dition)\"")))))))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" and Internals")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1), RelativePosition(x, -8)))), ConstStr("ssential C++")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RelativePosition(x, 6), RelativePosition(x, 7)))), ConstStr("dioms of the Greek New Testament")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("-"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(": An Object-Oriented Approach")))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Evelyn; Leblanc, Cathie\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Maureen\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1))), Concat(ConstStr(" &amp; "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -9))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Bracket"), 1))))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "\"Anderson, James A.\"": "0"}); let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "0": "\"Anderson, James A.\""}); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Ampersand"), 1))), Concat(ConstStr(" and "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), -1), RelativePosition(x, -2))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("nalysis")))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "',' or 'and'"), 1))), Concat(ConstStr(" &amp; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("lgorithms")))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", RandyJohnson, Theodore\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(": A Constructive Approach (The Morgan Kaufmann Series in Computer Graphics)")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("; Henrik "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("eimer")))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (The Morgan Kaufmann Series "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr(" Artificial Intelligence)")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr("~David W. Corne")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("p "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("echnologies)")))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr("; Lola, Jim; O'Brien, Dennis; Yates, Gregory; Nichols, Brad\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), Concat(ConstStr(": "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case"), 1), RegexPositionRelative(x, RegexPair("Camel Case", "ε"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr("(tm) "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))))); ]

[Concat(ConstStr("\"Viotto, Kate"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Double Quote"), 1), RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1)))); ]

[Concat(ConstStr("\"O'Dea, Michael"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Double Quote"), 1), RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(ConstStr(" - "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Forward Slash", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))); ]

[Concat(ConstStr("Carrie Anderson "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), ConstStr(" -OS")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))), ConstStr(": An Introduction and Analysis")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1)))); Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (Paperback)")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr(") "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("Drenan, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), ConstStr("aryMorris, CrisJuniper&reg; Networks\""))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" (MicrosoftN"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("T Development Series)")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" - "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("Left Parenthesis◦Alphanumeric", "ε"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1))), Concat(ConstStr("tory of "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen", "ε"), 1), RegexPositionRelative(x, RegexPair("Hyphen◦ALL CAPS", "ε"), 1))), ConstStr("2")))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Hyphen"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Hyphen◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Camel Case"), -1))), ConstStr(" Morgan Kaufmann Series in Data Management Systems)")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(" (7th Edition) (International Computer Science Series)")); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1)))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "SOMMERVILL": "N/A"}); let columnName = "0" in let x = ChooseInput(vs, columnName) in Lookup(x, {Some "N/A": "SOMMERVILL"}); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), -1)))), ConstStr(" &amp;")))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), ConstStr(", Awareness, and Training : SEAT from Theory to Practice\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", D"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1)))), ConstStr(". Lynn Fischer, Joseph A. Grau\""))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Single Quote"), 1)))), Concat(ConstStr("dministratorandapos;"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr("/"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Right Parenthesis"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Right Parenthesis"), 1)))), ConstStr("\""))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr("nd Edition) ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("aperback)")))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(", Jon\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("ue "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))), ConstStr(" (Morgan Kaufmann Series in Interactive Technologies)")))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(": Designing Fast Cmos Circuits")); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Comma"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr(".\""))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Dot"), 1))), Concat(ConstStr("dward "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(", Robert F. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("proull, David Harris\""))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Colon"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Colon"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr("("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 19), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Number"), 1))), Concat(ConstStr(") Yukon "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Number◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" SQL Server 2005 "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Colon◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Lowercase word"), 1))), Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Lowercase word", "ε"), 1))), Concat(ConstStr(", Volume "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), ConstStr(")\""))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))), Concat(ConstStr(" : "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Left Parenthesis"), 1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToLowercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1)))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Number"), 1), RegexPositionRelative(x, RegexPair("Number", "ε"), 1))), Concat(ConstStr(" (A"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Forward Slash"), 1), RegexPositionRelative(x, RegexPair("ε", "Forward Slash"), 1))), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Left Parenthesis◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Upper Case◦Forward Slash"), 1))), ConstStr(") (Softcover)"))))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr(". "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), Concat(ConstStr("."), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Left Parenthesis"), 1))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Right Parenthesis◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(" ("), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), Concat(ConstStr(" Korper and Ellis E-Commerce Books "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace◦Words/dots/hyphens◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 2))), ConstStr("eries)")))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Upper Case"), 1), RegexPositionRelative(x, RegexPair("Upper Case", "ε"), 1))), ConstStr("Query: The XML Query Language")); ]

[Concat(ConstStr("T"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RelativePosition(x, 6), RelativePosition(x, 8))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(ConstStr("Neil "), let columnName = "0" in let x = ChooseInput(vs, columnName) in x); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace◦Dot"), 1))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1)))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1))), Concat(ConstStr(" ."), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Camel Case◦WhiteSpace"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Colon"), 1)))), ConstStr("\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Double Quote"), -1)))), ConstStr(": Object-Oriented Problem Solving, by Morelli, 3rd Edition\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1))), Concat(ConstStr("alph/ Walde, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case", "ε"), 1), RegexPositionRelative(x, RegexPair("Upper Case◦Upper Case◦Upper Case", "ε"), 1))), ConstStr("alph\""))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (the Morgan Kaufmann Series In Data Management Systems) (the Morgan Kaufmann Series In Data Management Systems)")); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦Question Mark"), 1), RegexPositionRelative(x, RegexPair("ε", "Question Mark"), 1))), Concat(ConstStr("uting, "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1))), Concat(ConstStr("; "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("',' or 'and'", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "WhiteSpace"), -1))), ConstStr("\""))))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric◦WhiteSpace◦Camel Case"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric◦WhiteSpace◦Camel Case", "ε"), 1)))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Ampersand"), 1), RegexPositionRelative(x, RegexPair("ε", "Semicolon"), 1))), ConstStr(";")))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Upper Case", "ε"), 1)))), ConstStr("Developer 10g for Forms &amp; PL/SQL Developers: A Guide to Web Development with Oracle ADF")); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), ConstStr(", Peter\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))), ConstStr("/MILLS")); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Double Quote", "ε"), 1), RelativePosition(x, 26)))), Concat(ConstStr(" -"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), -1), RelativePosition(x, -12)))), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), -1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), -1)))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦Alphanumeric", "ε"), 1)))), ConstStr(" Security: GSM, UMTS, 802.11 and Ad Hoc Security\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToSimpleTitleCase(x), ConstStr(", Jakob:\""))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", by "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("WhiteSpace◦ALL CAPS", "ε"), 1))), ConstStr("ohl, 2nd Edition\""))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(" , University of California, Santa Cruz\""))))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", by "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦WhiteSpace"), 1))), ConstStr("dams\""))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("ε", "Lowercase word◦Single Quote"), 1))), Concat(ConstStr("onandapos;"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), 1), RegexPositionRelative(x, RegexPair("',' or 'and'◦ALL CAPS", "ε"), 1))), Concat(ConstStr("oandapos;"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Single Quote", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RelativePosition(x, 17))), Concat(ConstStr("'"), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), 1), RelativePosition(x, 34))), Concat(ConstStr("'"), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Semicolon", "ε"), -1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Plus", "ε"), -1))), Concat(ConstStr(": "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Plus◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Line Separator"), -1))))); ]

[Concat(ConstStr("Dov "), let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1)))); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), ConstStr(", Mayhew,\""))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (The Morgan Kaufmann Series in Computer Graphics)")); ]

[Concat(ConstStr("\""), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), -1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), -1))), Concat(ConstStr(" "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in ToUppercase(SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Lowercase word"), -1), RelativePosition(x, -6)))), Concat(ConstStr(". "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "Alphanumeric"), 1), RegexPositionRelative(x, RegexPair("Alphanumeric", "ε"), 1))), ConstStr(",\""))))))); ]

[Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, ConstStr(" (2nd Edition) (Softcover)")); ]

[Concat(ConstStr("\"Vincent P. "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in x, Concat(ConstStr(", "), Concat(let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("ε", "ALL CAPS"), 1), RegexPositionRelative(x, RegexPair("ALL CAPS", "ε"), 1))), ConstStr("arry F. Jordan\""))))); ]

[let columnName = "0" in let x = ChooseInput(vs, columnName) in SubStr(x, PosPair(RegexPositionRelative(x, RegexPair("Dot◦WhiteSpace", "ε"), 1), RegexPositionRelative(x, RegexPair("ε", "Comma"), 1))); ]

